
audio_iap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002408  08002408  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002408  08002408  00004094  2**0
                  CONTENTS
  4 .ARM          00000000  08002408  08002408  00004094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002408  08002408  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002408  08002408  00003408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800240c  0800240c  0000340c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08002410  00004000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000878  20000094  080024a4  00004094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  080024a4  0000490c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072ad  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227b  00000000  00000000  0000b369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0000d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d7  00000000  00000000  0000df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155d5  00000000  00000000  0000e62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4d1  00000000  00000000  00023c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cfd7  00000000  00000000  0002f0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac0ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed0  00000000  00000000  000ac0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000adfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000094 	.word	0x20000094
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080023dc 	.word	0x080023dc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000098 	.word	0x20000098
 80000fc:	080023dc 	.word	0x080023dc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <MX_CRC_Init+0x48>)
 800021e:	4a11      	ldr	r2, [pc, #68]	@ (8000264 <MX_CRC_Init+0x4c>)
 8000220:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000222:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <MX_CRC_Init+0x48>)
 8000224:	2200      	movs	r2, #0
 8000226:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000228:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <MX_CRC_Init+0x48>)
 800022a:	2201      	movs	r2, #1
 800022c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InitValue = 0xffffffff;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <MX_CRC_Init+0x48>)
 8000230:	2201      	movs	r2, #1
 8000232:	4252      	negs	r2, r2
 8000234:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <MX_CRC_Init+0x48>)
 8000238:	2220      	movs	r2, #32
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <MX_CRC_Init+0x48>)
 800023e:	2280      	movs	r2, #128	@ 0x80
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000242:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <MX_CRC_Init+0x48>)
 8000244:	2201      	movs	r2, #1
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <MX_CRC_Init+0x48>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 f956 	bl	80014fc <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x40>
  {
    Error_Handler();
 8000254:	f000 ff7a 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			@ (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	200000b0 	.word	0x200000b0
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <HAL_CRC_MspInit+0x38>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10d      	bne.n	8000296 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <HAL_CRC_MspInit+0x3c>)
 800027c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800027e:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <HAL_CRC_MspInit+0x3c>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0149      	lsls	r1, r1, #5
 8000284:	430a      	orrs	r2, r1
 8000286:	639a      	str	r2, [r3, #56]	@ 0x38
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_CRC_MspInit+0x3c>)
 800028a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800028c:	2380      	movs	r3, #128	@ 0x80
 800028e:	015b      	lsls	r3, r3, #5
 8000290:	4013      	ands	r3, r2
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	b004      	add	sp, #16
 800029c:	bd80      	pop	{r7, pc}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	40023000 	.word	0x40023000
 80002a4:	40021000 	.word	0x40021000

080002a8 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <HAL_CRC_MspDeInit+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d105      	bne.n	80002c6 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80002ba:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <HAL_CRC_MspDeInit+0x2c>)
 80002bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80002be:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <HAL_CRC_MspDeInit+0x2c>)
 80002c0:	4905      	ldr	r1, [pc, #20]	@ (80002d8 <HAL_CRC_MspDeInit+0x30>)
 80002c2:	400a      	ands	r2, r1
 80002c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80002c6:	46c0      	nop			@ (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	40023000 	.word	0x40023000
 80002d4:	40021000 	.word	0x40021000
 80002d8:	ffffefff 	.word	0xffffefff

080002dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <MX_GPIO_Init+0x28>)
 80002e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002e6:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <MX_GPIO_Init+0x28>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	430a      	orrs	r2, r1
 80002ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80002ee:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <MX_GPIO_Init+0x28>)
 80002f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002f2:	2201      	movs	r2, #1
 80002f4:	4013      	ands	r3, r2
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

}
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	40021000 	.word	0x40021000

08000308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	0002      	movs	r2, r0
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b7f      	cmp	r3, #127	@ 0x7f
 800031a:	d809      	bhi.n	8000330 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	001a      	movs	r2, r3
 8000322:	231f      	movs	r3, #31
 8000324:	401a      	ands	r2, r3
 8000326:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <__NVIC_EnableIRQ+0x30>)
 8000328:	2101      	movs	r1, #1
 800032a:	4091      	lsls	r1, r2
 800032c:	000a      	movs	r2, r1
 800032e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000330:	46c0      	nop			@ (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b002      	add	sp, #8
 8000336:	bd80      	pop	{r7, pc}
 8000338:	e000e100 	.word	0xe000e100

0800033c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	0002      	movs	r2, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000350:	d828      	bhi.n	80003a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000352:	4a2f      	ldr	r2, [pc, #188]	@ (8000410 <__NVIC_SetPriority+0xd4>)
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b25b      	sxtb	r3, r3
 800035a:	089b      	lsrs	r3, r3, #2
 800035c:	33c0      	adds	r3, #192	@ 0xc0
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	589b      	ldr	r3, [r3, r2]
 8000362:	1dfa      	adds	r2, r7, #7
 8000364:	7812      	ldrb	r2, [r2, #0]
 8000366:	0011      	movs	r1, r2
 8000368:	2203      	movs	r2, #3
 800036a:	400a      	ands	r2, r1
 800036c:	00d2      	lsls	r2, r2, #3
 800036e:	21ff      	movs	r1, #255	@ 0xff
 8000370:	4091      	lsls	r1, r2
 8000372:	000a      	movs	r2, r1
 8000374:	43d2      	mvns	r2, r2
 8000376:	401a      	ands	r2, r3
 8000378:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	019b      	lsls	r3, r3, #6
 800037e:	22ff      	movs	r2, #255	@ 0xff
 8000380:	401a      	ands	r2, r3
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	0018      	movs	r0, r3
 8000388:	2303      	movs	r3, #3
 800038a:	4003      	ands	r3, r0
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	481f      	ldr	r0, [pc, #124]	@ (8000410 <__NVIC_SetPriority+0xd4>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	430a      	orrs	r2, r1
 800039c:	33c0      	adds	r3, #192	@ 0xc0
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003a2:	e031      	b.n	8000408 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000414 <__NVIC_SetPriority+0xd8>)
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	0019      	movs	r1, r3
 80003ac:	230f      	movs	r3, #15
 80003ae:	400b      	ands	r3, r1
 80003b0:	3b08      	subs	r3, #8
 80003b2:	089b      	lsrs	r3, r3, #2
 80003b4:	3306      	adds	r3, #6
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	18d3      	adds	r3, r2, r3
 80003ba:	3304      	adds	r3, #4
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	1dfa      	adds	r2, r7, #7
 80003c0:	7812      	ldrb	r2, [r2, #0]
 80003c2:	0011      	movs	r1, r2
 80003c4:	2203      	movs	r2, #3
 80003c6:	400a      	ands	r2, r1
 80003c8:	00d2      	lsls	r2, r2, #3
 80003ca:	21ff      	movs	r1, #255	@ 0xff
 80003cc:	4091      	lsls	r1, r2
 80003ce:	000a      	movs	r2, r1
 80003d0:	43d2      	mvns	r2, r2
 80003d2:	401a      	ands	r2, r3
 80003d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	019b      	lsls	r3, r3, #6
 80003da:	22ff      	movs	r2, #255	@ 0xff
 80003dc:	401a      	ands	r2, r3
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	0018      	movs	r0, r3
 80003e4:	2303      	movs	r3, #3
 80003e6:	4003      	ands	r3, r0
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ec:	4809      	ldr	r0, [pc, #36]	@ (8000414 <__NVIC_SetPriority+0xd8>)
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	001c      	movs	r4, r3
 80003f4:	230f      	movs	r3, #15
 80003f6:	4023      	ands	r3, r4
 80003f8:	3b08      	subs	r3, #8
 80003fa:	089b      	lsrs	r3, r3, #2
 80003fc:	430a      	orrs	r2, r1
 80003fe:	3306      	adds	r3, #6
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	18c3      	adds	r3, r0, r3
 8000404:	3304      	adds	r3, #4
 8000406:	601a      	str	r2, [r3, #0]
}
 8000408:	46c0      	nop			@ (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b003      	add	sp, #12
 800040e:	bd90      	pop	{r4, r7, pc}
 8000410:	e000e100 	.word	0xe000e100
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a03      	ldr	r2, [pc, #12]	@ (8000434 <LL_I2C_EnableClockStretching+0x1c>)
 8000426:	401a      	ands	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}
 8000434:	fffdffff 	.word	0xfffdffff

08000438 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a03      	ldr	r2, [pc, #12]	@ (8000454 <LL_I2C_DisableGeneralCall+0x1c>)
 8000446:	401a      	ands	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	601a      	str	r2, [r3, #0]
}
 800044c:	46c0      	nop			@ (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	fff7ffff 	.word	0xfff7ffff

08000458 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a05      	ldr	r2, [pc, #20]	@ (8000480 <LL_I2C_SetOwnAddress2+0x28>)
 800046a:	401a      	ands	r2, r3
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	430b      	orrs	r3, r1
 8000472:	431a      	orrs	r2, r3
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	60da      	str	r2, [r3, #12]
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b004      	add	sp, #16
 800047e:	bd80      	pop	{r7, pc}
 8000480:	fffff801 	.word	0xfffff801

08000484 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	4a03      	ldr	r2, [pc, #12]	@ (80004a0 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000492:	401a      	ands	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60da      	str	r2, [r3, #12]
}
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	ffff7fff 	.word	0xffff7fff

080004a4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	0492      	lsls	r2, r2, #18
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	605a      	str	r2, [r3, #4]
}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004cc:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <LL_APB1_GRP1_EnableClock+0x28>)
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	430a      	orrs	r2, r1
 80004d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <LL_APB1_GRP1_EnableClock+0x28>)
 80004da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4013      	ands	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b004      	add	sp, #16
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000

080004f0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	430a      	orrs	r2, r1
 8000502:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <LL_IOP_GRP1_EnableClock+0x28>)
 8000506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b004      	add	sp, #16
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000

0800051c <MX_I2C2_Init>:

/* USER CODE END 0 */

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08f      	sub	sp, #60	@ 0x3c
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000522:	241c      	movs	r4, #28
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	231c      	movs	r3, #28
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f001 ff29 	bl	8002384 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	0018      	movs	r0, r3
 8000536:	2318      	movs	r3, #24
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 ff22 	bl	8002384 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff ffd5 	bl	80004f0 <LL_IOP_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PA11 [PA9]   ------> I2C2_SCL
  PA12 [PA10]   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2202      	movs	r2, #2
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2201      	movs	r2, #1
 800055e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2206      	movs	r2, #6
 800056a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	23a0      	movs	r3, #160	@ 0xa0
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fcab 	bl	8001ed0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	0152      	lsls	r2, r2, #5
 8000580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2202      	movs	r2, #2
 8000586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2206      	movs	r2, #6
 800059e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	1d3a      	adds	r2, r7, #4
 80005a2:	23a0      	movs	r3, #160	@ 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fc91 	bl	8001ed0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80005ae:	2380      	movs	r3, #128	@ 0x80
 80005b0:	03db      	lsls	r3, r3, #15
 80005b2:	0018      	movs	r0, r3
 80005b4:	f7ff ff86 	bl	80004c4 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_IRQn, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2018      	movs	r0, #24
 80005bc:	f7ff febe 	bl	800033c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_IRQn);
 80005c0:	2018      	movs	r0, #24
 80005c2:	f7ff fea1 	bl	8000308 <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x10B17DB5;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <MX_I2C2_Init+0x118>)
 80005d2:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0x54<<1;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	22a8      	movs	r2, #168	@ 0xa8
 80005e4:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <MX_I2C2_Init+0x11c>)
 80005f6:	0019      	movs	r1, r3
 80005f8:	0010      	movs	r0, r2
 80005fa:	f001 fdb9 	bl	8002170 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_I2C2_Init+0x11c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff4f 	bl	80004a4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_I2C2_Init+0x11c>)
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ff23 	bl	8000458 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_I2C2_Init+0x11c>)
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff ff35 	bl	8000484 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <MX_I2C2_Init+0x11c>)
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ff0b 	bl	8000438 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000622:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <MX_I2C2_Init+0x11c>)
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff fef7 	bl	8000418 <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b00f      	add	sp, #60	@ 0x3c
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	10b17db5 	.word	0x10b17db5
 8000638:	40005800 	.word	0x40005800

0800063c <__NVIC_EnableIRQ>:
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	0002      	movs	r2, r0
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b7f      	cmp	r3, #127	@ 0x7f
 800064e:	d809      	bhi.n	8000664 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	001a      	movs	r2, r3
 8000656:	231f      	movs	r3, #31
 8000658:	401a      	ands	r2, r3
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_EnableIRQ+0x30>)
 800065c:	2101      	movs	r1, #1
 800065e:	4091      	lsls	r1, r2
 8000660:	000a      	movs	r2, r1
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_DisableIRQ>:
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b7f      	cmp	r3, #127	@ 0x7f
 8000682:	d810      	bhi.n	80006a6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	001a      	movs	r2, r3
 800068a:	231f      	movs	r3, #31
 800068c:	4013      	ands	r3, r2
 800068e:	4908      	ldr	r1, [pc, #32]	@ (80006b0 <__NVIC_DisableIRQ+0x40>)
 8000690:	2201      	movs	r2, #1
 8000692:	409a      	lsls	r2, r3
 8000694:	0013      	movs	r3, r2
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80006a0:	f3bf 8f6f 	isb	sy
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <LL_RCC_HSI_Enable+0x18>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <LL_RCC_HSI_Enable+0x18>)
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0049      	lsls	r1, r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <LL_RCC_HSI_IsReady+0x24>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	2380      	movs	r3, #128	@ 0x80
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	401a      	ands	r2, r3
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d101      	bne.n	80006ea <LL_RCC_HSI_IsReady+0x1a>
 80006e6:	2301      	movs	r3, #1
 80006e8:	e000      	b.n	80006ec <LL_RCC_HSI_IsReady+0x1c>
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <LL_RCC_SetSysClkSource+0x24>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	2207      	movs	r2, #7
 8000706:	4393      	bics	r3, r2
 8000708:	0019      	movs	r1, r3
 800070a:	4b04      	ldr	r3, [pc, #16]	@ (800071c <LL_RCC_SetSysClkSource+0x24>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	430a      	orrs	r2, r1
 8000710:	609a      	str	r2, [r3, #8]
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	40021000 	.word	0x40021000

08000720 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <LL_RCC_GetSysClkSource+0x14>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	2238      	movs	r2, #56	@ 0x38
 800072a:	4013      	ands	r3, r2
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LL_RCC_SetAHBPrescaler+0x24>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <LL_RCC_SetAHBPrescaler+0x28>)
 8000746:	4013      	ands	r3, r2
 8000748:	0019      	movs	r1, r3
 800074a:	4b04      	ldr	r3, [pc, #16]	@ (800075c <LL_RCC_SetAHBPrescaler+0x24>)
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	430a      	orrs	r2, r1
 8000750:	609a      	str	r2, [r3, #8]
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	40021000 	.word	0x40021000
 8000760:	fffff0ff 	.word	0xfffff0ff

08000764 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <LL_RCC_SetAPB1Prescaler+0x24>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	4a06      	ldr	r2, [pc, #24]	@ (800078c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000772:	4013      	ands	r3, r2
 8000774:	0019      	movs	r1, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	430a      	orrs	r2, r1
 800077c:	609a      	str	r2, [r3, #8]
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	40021000 	.word	0x40021000
 800078c:	ffff8fff 	.word	0xffff8fff

08000790 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <LL_RCC_PLL_Enable+0x18>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <LL_RCC_PLL_Enable+0x18>)
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	0449      	lsls	r1, r1, #17
 800079e:	430a      	orrs	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <LL_RCC_PLL_IsReady+0x24>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	049b      	lsls	r3, r3, #18
 80007b8:	401a      	ands	r2, r3
 80007ba:	2380      	movs	r3, #128	@ 0x80
 80007bc:	049b      	lsls	r3, r3, #18
 80007be:	429a      	cmp	r2, r3
 80007c0:	d101      	bne.n	80007c6 <LL_RCC_PLL_IsReady+0x1a>
 80007c2:	2301      	movs	r3, #1
 80007c4:	e000      	b.n	80007c8 <LL_RCC_PLL_IsReady+0x1c>
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	0019      	movs	r1, r3
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	431a      	orrs	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	431a      	orrs	r2, r3
 80007fc:	4b03      	ldr	r3, [pc, #12]	@ (800080c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007fe:	430a      	orrs	r2, r1
 8000800:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	40021000 	.word	0x40021000
 8000810:	1fff808c 	.word	0x1fff808c

08000814 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	4b03      	ldr	r3, [pc, #12]	@ (800082c <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800081e:	2180      	movs	r1, #128	@ 0x80
 8000820:	0549      	lsls	r1, r1, #21
 8000822:	430a      	orrs	r2, r1
 8000824:	60da      	str	r2, [r3, #12]
}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000

08000830 <LL_I2C_Enable>:
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2201      	movs	r2, #1
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <LL_I2C_Disable>:
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2201      	movs	r2, #1
 800085a:	4393      	bics	r3, r2
 800085c:	001a      	movs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <LL_I2C_EnableIT_ADDR>:
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2208      	movs	r2, #8
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}

08000886 <LL_I2C_DisableIT_ADDR>:
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2208      	movs	r2, #8
 8000894:	4393      	bics	r3, r2
 8000896:	001a      	movs	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <LL_I2C_DisableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_DisableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a03      	ldr	r2, [pc, #12]	@ (80008c0 <LL_I2C_DisableAutoEndMode+0x1c>)
 80008b2:	401a      	ands	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	fdffffff 	.word	0xfdffffff

080008c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <LL_FLASH_SetLatency+0x24>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2207      	movs	r2, #7
 80008d2:	4393      	bics	r3, r2
 80008d4:	0019      	movs	r1, r3
 80008d6:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <LL_FLASH_SetLatency+0x24>)
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	430a      	orrs	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40022000 	.word	0x40022000

080008ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <LL_FLASH_GetLatency+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2207      	movs	r2, #7
 80008f6:	4013      	ands	r3, r2
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	40022000 	.word	0x40022000

08000904 <GetPage>:
/**
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
static uint32_t GetPage(uint32_t Addr) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return (Addr - STM32G0xx_FLASH_PAGE0_STARTADDR) / FLASH_PAGE_SIZE;;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	22f8      	movs	r2, #248	@ 0xf8
 8000910:	0612      	lsls	r2, r2, #24
 8000912:	4694      	mov	ip, r2
 8000914:	4463      	add	r3, ip
 8000916:	0adb      	lsrs	r3, r3, #11
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <I2C2_IRQHandler>:
/**
 * Brief   This function handles I2C2 interrupt request.
 * Param   None
 * Retval  I2C2 always as slave of i2c conmunication
 */
void I2C2_IRQHandler(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	uint32_t I2C_InterruptStatus = I2C2->ISR; /* Get interrupt status */
 8000926:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	607b      	str	r3, [r7, #4]

	if ((I2C_InterruptStatus & I2C_ISR_ADDR) == I2C_ISR_ADDR) /* Check address match */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2208      	movs	r2, #8
 8000930:	4013      	ands	r3, r2
 8000932:	d028      	beq.n	8000986 <I2C2_IRQHandler+0x66>
	{
		I2C2->ICR |= I2C_ICR_ADDRCF; /* Clear address match flag*/
 8000934:	4b42      	ldr	r3, [pc, #264]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	4b41      	ldr	r3, [pc, #260]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 800093a:	2108      	movs	r1, #8
 800093c:	430a      	orrs	r2, r1
 800093e:	61da      	str	r2, [r3, #28]

		if ((I2C2->ISR & I2C_ISR_DIR) == I2C_ISR_DIR) /* Check if transfer direction is read (slave transmitter) */
 8000940:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000942:	699a      	ldr	r2, [r3, #24]
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	025b      	lsls	r3, r3, #9
 8000948:	401a      	ands	r2, r3
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	025b      	lsls	r3, r3, #9
 800094e:	429a      	cmp	r2, r3
 8000950:	d109      	bne.n	8000966 <I2C2_IRQHandler+0x46>
		{
			I2C2->CR1 |= I2C_CR1_TXIE; /* Set transmit IT /status*/
 8000952:	4b3b      	ldr	r3, [pc, #236]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000958:	2102      	movs	r1, #2
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
			i2c_event = EVENT_OPCOD_SEND; /* Set I2C  entor transmit mode*/
 800095e:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <I2C2_IRQHandler+0x124>)
 8000960:	2203      	movs	r2, #3
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e008      	b.n	8000978 <I2C2_IRQHandler+0x58>

		} else /*Write operation, slave receive status*/
		{
			I2C2->CR1 |= I2C_CR1_RXIE; /* Set receive IT /status*/
 8000966:	4b36      	ldr	r3, [pc, #216]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 800096c:	2104      	movs	r1, #4
 800096e:	430a      	orrs	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
			i2c_event = EVENT_OPCOD_BUSY_RECEIVE; /* Set I2C  entor receive mode*/
 8000972:	4b34      	ldr	r3, [pc, #208]	@ (8000a44 <I2C2_IRQHandler+0x124>)
 8000974:	2204      	movs	r2, #4
 8000976:	701a      	strb	r2, [r3, #0]
		}

		I2C2->CR1 |= I2C_CR1_STOPIE;             //Enable STOP interrupt
 8000978:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 800097e:	2120      	movs	r1, #32
 8000980:	430a      	orrs	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e017      	b.n	80009b6 <I2C2_IRQHandler+0x96>

	} else if ((I2C_InterruptStatus & I2C_ISR_TXIS) == I2C_ISR_TXIS) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2202      	movs	r2, #2
 800098a:	4013      	ands	r3, r2
 800098c:	d113      	bne.n	80009b6 <I2C2_IRQHandler+0x96>
		//add some application code in this place
	}
	/*check RXDR is not empty*/
	else if ((I2C_InterruptStatus & I2C_ISR_RXNE) == I2C_ISR_RXNE) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2204      	movs	r2, #4
 8000992:	4013      	ands	r3, r2
 8000994:	d00f      	beq.n	80009b6 <I2C2_IRQHandler+0x96>
		//I2C_ISR_RXNE add you code in this place Tomas Li add
		Receive_Buffer[I2C_Receive_Counter++] = I2C2->RXDR;
 8000996:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000998:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <I2C2_IRQHandler+0x128>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	b290      	uxth	r0, r2
 80009a4:	4a28      	ldr	r2, [pc, #160]	@ (8000a48 <I2C2_IRQHandler+0x128>)
 80009a6:	8010      	strh	r0, [r2, #0]
 80009a8:	001a      	movs	r2, r3
 80009aa:	b2c9      	uxtb	r1, r1
 80009ac:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <I2C2_IRQHandler+0x12c>)
 80009ae:	5499      	strb	r1, [r3, r2]
		i2c_event = EVENT_OPCOD_BUSY_RECEIVE;   //slave is busy for receive data
 80009b0:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <I2C2_IRQHandler+0x124>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	701a      	strb	r2, [r3, #0]

	} else if ((I2C_InterruptStatus & I2C_ISR_NACKF) == I2C_ISR_NACKF) {

	}
	/*check Stop event happen */
	if ((I2C_InterruptStatus & I2C_ISR_STOPF) == I2C_ISR_STOPF) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2220      	movs	r2, #32
 80009ba:	4013      	ands	r3, r2
 80009bc:	d037      	beq.n	8000a2e <I2C2_IRQHandler+0x10e>

		I2C2->ICR |= I2C_ICR_STOPCF;             //clear the STOP interrupt Flag
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 80009c0:	69da      	ldr	r2, [r3, #28]
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 80009c4:	2120      	movs	r1, #32
 80009c6:	430a      	orrs	r2, r1
 80009c8:	61da      	str	r2, [r3, #28]

#if 1
		switch (i2c_event) {
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <I2C2_IRQHandler+0x124>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d01b      	beq.n	8000a0c <I2C2_IRQHandler+0xec>
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d12e      	bne.n	8000a36 <I2C2_IRQHandler+0x116>
		case EVENT_OPCOD_BUSY_RECEIVE:          //slave receive status Stop flag
			I2C_Receive_Counter = 0;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <I2C2_IRQHandler+0x128>)
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
			i2c_event = EVENT_OPCOD_NOTYET_READ;
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <I2C2_IRQHandler+0x124>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]

			I2C2->CR1 &= ~(I2C_CR1_STOPIE); //Disable all interrupt.except Error interrupt
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 80009ea:	2120      	movs	r1, #32
 80009ec:	438a      	bics	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
			I2C2->CR2 |= I2C_CR2_NACK; //set feedback Nack in next event
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	0209      	lsls	r1, r1, #8
 80009fa:	430a      	orrs	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]
			I2C2->CR1 |= I2C_CR1_ADDRIE;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000a04:	2108      	movs	r1, #8
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
			break;
 8000a0a:	e015      	b.n	8000a38 <I2C2_IRQHandler+0x118>
		case EVENT_OPCOD_SEND: //slave send stop
			I2C2->ICR |= I2C_ICR_STOPCF | I2C_ICR_NACKCF | I2C_ICR_BERRCF; //clear the STOP interrupt Flag
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000a12:	2198      	movs	r1, #152	@ 0x98
 8000a14:	0049      	lsls	r1, r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	61da      	str	r2, [r3, #28]
			I2C2->CR1 |= I2C_CR1_ADDRIE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <I2C2_IRQHandler+0x120>)
 8000a20:	2108      	movs	r1, #8
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
			i2c_event = NOEVENT;
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <I2C2_IRQHandler+0x124>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]

			break;
 8000a2c:	e004      	b.n	8000a38 <I2C2_IRQHandler+0x118>

		}
#endif

	} else {
		error = ERROR_I2C; /* Report an error */
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <I2C2_IRQHandler+0x130>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	801a      	strh	r2, [r3, #0]

	}
}
 8000a34:	e000      	b.n	8000a38 <I2C2_IRQHandler+0x118>
			break;
 8000a36:	46c0      	nop			@ (mov r8, r8)
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40005800 	.word	0x40005800
 8000a44:	200008e0 	.word	0x200008e0
 8000a48:	200000d4 	.word	0x200000d4
 8000a4c:	200000d8 	.word	0x200000d8
 8000a50:	200008e2 	.word	0x200008e2

08000a54 <Reset_AllPeriph>:

void Reset_AllPeriph(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	LL_I2C_DeInit(I2C2);
 8000a58:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <Reset_AllPeriph+0x9c>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 fb52 	bl	8002104 <LL_I2C_DeInit>
	LL_I2C_DisableAutoEndMode(I2C2);
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <Reset_AllPeriph+0x9c>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff ff1e 	bl	80008a4 <LL_I2C_DisableAutoEndMode>
	LL_I2C_Disable(I2C2);
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <Reset_AllPeriph+0x9c>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff feee 	bl	800084c <LL_I2C_Disable>
	LL_I2C_DisableIT_ADDR(I2C2);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <Reset_AllPeriph+0x9c>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff ff07 	bl	8000886 <LL_I2C_DisableIT_ADDR>
	SysTick->CTRL = 0;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <Reset_AllPeriph+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	SYSCFG->CFGR1 &= SYSCFG_CFGR1_MEM_MODE;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <Reset_AllPeriph+0xa4>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <Reset_AllPeriph+0xa4>)
 8000a84:	2103      	movs	r1, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	601a      	str	r2, [r3, #0]
	NVIC->ICER[0] = 0xFFFFFFFF;
 8000a8a:	491c      	ldr	r1, [pc, #112]	@ (8000afc <Reset_AllPeriph+0xa8>)
 8000a8c:	2280      	movs	r2, #128	@ 0x80
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	508b      	str	r3, [r1, r2]
	NVIC->ICPR[0] = 0xFFFFFFFF;
 8000a94:	4919      	ldr	r1, [pc, #100]	@ (8000afc <Reset_AllPeriph+0xa8>)
 8000a96:	23c0      	movs	r3, #192	@ 0xc0
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4252      	negs	r2, r2
 8000a9e:	50ca      	str	r2, [r1, r3]
	/* Set EXTICRx registers to reset value */
	EXTI->EXTICR[0] = 0;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <Reset_AllPeriph+0xac>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	661a      	str	r2, [r3, #96]	@ 0x60
	EXTI->EXTICR[1] = 0;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <Reset_AllPeriph+0xac>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	665a      	str	r2, [r3, #100]	@ 0x64
	EXTI->EXTICR[2] = 0;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <Reset_AllPeriph+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	669a      	str	r2, [r3, #104]	@ 0x68
	EXTI->EXTICR[3] = 0;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <Reset_AllPeriph+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	66da      	str	r2, [r3, #108]	@ 0x6c
	/* Set CFGR2 register to reset value: clear SRAM parity error flag */
	SYSCFG->CFGR2 |= (uint32_t) SYSCFG_CFGR2_SRAM_PE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <Reset_AllPeriph+0xa4>)
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <Reset_AllPeriph+0xa4>)
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	0049      	lsls	r1, r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	619a      	str	r2, [r3, #24]
	LL_RCC_DeInit();
 8000ac6:	f001 fbf7 	bl	80022b8 <LL_RCC_DeInit>
	HAL_CRC_DeInit(&hcrc);
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <Reset_AllPeriph+0xb0>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fd7b 	bl	80015c8 <HAL_CRC_DeInit>
	HAL_DeInit();
 8000ad2:	f000 fbcd 	bl	8001270 <HAL_DeInit>
	SysTick->CTRL = 0;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <Reset_AllPeriph+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <Reset_AllPeriph+0xa0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <Reset_AllPeriph+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	40005800 	.word	0x40005800
 8000af4:	e000e010 	.word	0xe000e010
 8000af8:	40010000 	.word	0x40010000
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	40021800 	.word	0x40021800
 8000b04:	200000b0 	.word	0x200000b0

08000b08 <Jump_APP>:

void Jump_APP(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
//	if (compute_fw_crc32()) {
		/*check the application address context whether avilible*/
		if (((*(__IO uint32_t*) APPLICATION_ADDRESS) & 0x2FFE0000)
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <Jump_APP+0x50>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <Jump_APP+0x54>)
 8000b14:	401a      	ands	r2, r3
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	059b      	lsls	r3, r3, #22
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d117      	bne.n	8000b4e <Jump_APP+0x46>
				== 0x20000000) {
			Reset_AllPeriph();
 8000b1e:	f7ff ff99 	bl	8000a54 <Reset_AllPeriph>
			SCB->VTOR = APPLICATION_ADDRESS;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <Jump_APP+0x58>)
 8000b24:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <Jump_APP+0x50>)
 8000b26:	609a      	str	r2, [r3, #8]
			/* Jump to user application */
			JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <Jump_APP+0x5c>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <Jump_APP+0x60>)
 8000b2e:	601a      	str	r2, [r3, #0]
			JumpToApplication = (pFunction) JumpAddress;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <Jump_APP+0x60>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	001a      	movs	r2, r3
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <Jump_APP+0x64>)
 8000b38:	601a      	str	r2, [r3, #0]
			/* Initialize user application's Stack Pointer */
			__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <Jump_APP+0x50>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f383 8808 	msr	MSP, r3
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
			JumpToApplication();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <Jump_APP+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4798      	blx	r3
		}
//	}

}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	08001800 	.word	0x08001800
 8000b5c:	2ffe0000 	.word	0x2ffe0000
 8000b60:	e000ed00 	.word	0xe000ed00
 8000b64:	08001804 	.word	0x08001804
 8000b68:	200008e4 	.word	0x200008e4
 8000b6c:	200008e8 	.word	0x200008e8

08000b70 <Write_Code>:

void Write_Code(void) {
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	b0b9      	sub	sp, #228	@ 0xe4
 8000b74:	af00      	add	r7, sp, #0
	uint16_t Number_Bytes_Transferred = 0;
 8000b76:	202a      	movs	r0, #42	@ 0x2a
 8000b78:	23a8      	movs	r3, #168	@ 0xa8
 8000b7a:	18c3      	adds	r3, r0, r3
 8000b7c:	19da      	adds	r2, r3, r7
 8000b7e:	2300      	movs	r3, #0
 8000b80:	8013      	strh	r3, [r2, #0]
	uint32_t Add_Flash, end_add_flash;
	uint64_t Data = 0;
 8000b82:	2200      	movs	r2, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	21c8      	movs	r1, #200	@ 0xc8
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	600a      	str	r2, [r1, #0]
 8000b8c:	604b      	str	r3, [r1, #4]
	uint16_t Data_index = 8;
 8000b8e:	2332      	movs	r3, #50	@ 0x32
 8000b90:	22a8      	movs	r2, #168	@ 0xa8
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	19da      	adds	r2, r3, r7
 8000b96:	2308      	movs	r3, #8
 8000b98:	8013      	strh	r3, [r2, #0]
	uint32_t PageError = 0;              //设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	22bc      	movs	r2, #188	@ 0xbc
 8000b9e:	18ba      	adds	r2, r7, r2
 8000ba0:	6013      	str	r3, [r2, #0]
	FLASH_EraseInitTypeDef My_Flash;
	uint32_t PageNum = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	22c4      	movs	r2, #196	@ 0xc4
 8000ba6:	18ba      	adds	r2, r7, r2
 8000ba8:	6013      	str	r3, [r2, #0]

	Add_Flash = Receive_Buffer[1] << 24 | Receive_Buffer[2] << 16
 8000baa:	4bd5      	ldr	r3, [pc, #852]	@ (8000f00 <Write_Code+0x390>)
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	061a      	lsls	r2, r3, #24
 8000bb2:	4bd3      	ldr	r3, [pc, #844]	@ (8000f00 <Write_Code+0x390>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	431a      	orrs	r2, r3
			| Receive_Buffer[3] << 8 | Receive_Buffer[4] << 0;
 8000bbc:	4bd0      	ldr	r3, [pc, #832]	@ (8000f00 <Write_Code+0x390>)
 8000bbe:	78db      	ldrb	r3, [r3, #3]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4bce      	ldr	r3, [pc, #824]	@ (8000f00 <Write_Code+0x390>)
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4313      	orrs	r3, r2
	Add_Flash = Receive_Buffer[1] << 24 | Receive_Buffer[2] << 16
 8000bce:	22dc      	movs	r2, #220	@ 0xdc
 8000bd0:	18ba      	adds	r2, r7, r2
 8000bd2:	6013      	str	r3, [r2, #0]
	end_add_flash = Add_Flash + 2048;
 8000bd4:	23dc      	movs	r3, #220	@ 0xdc
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2280      	movs	r2, #128	@ 0x80
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	4694      	mov	ip, r2
 8000be0:	4463      	add	r3, ip
 8000be2:	22c0      	movs	r2, #192	@ 0xc0
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	6013      	str	r3, [r2, #0]

	Number_Bytes_Transferred = (Receive_Buffer[5] << 8) + Receive_Buffer[6];
 8000be8:	4bc5      	ldr	r3, [pc, #788]	@ (8000f00 <Write_Code+0x390>)
 8000bea:	795b      	ldrb	r3, [r3, #5]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	4bc3      	ldr	r3, [pc, #780]	@ (8000f00 <Write_Code+0x390>)
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	22a8      	movs	r2, #168	@ 0xa8
 8000bfa:	1882      	adds	r2, r0, r2
 8000bfc:	19d2      	adds	r2, r2, r7
 8000bfe:	18cb      	adds	r3, r1, r3
 8000c00:	8013      	strh	r3, [r2, #0]

	if (Number_Bytes_Transferred > 0) {
 8000c02:	23a8      	movs	r3, #168	@ 0xa8
 8000c04:	18c3      	adds	r3, r0, r3
 8000c06:	19db      	adds	r3, r3, r7
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <Write_Code+0xa0>
 8000c0e:	e171      	b.n	8000ef4 <Write_Code+0x384>
		if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U) {
 8000c10:	4bbc      	ldr	r3, [pc, #752]	@ (8000f04 <Write_Code+0x394>)
 8000c12:	691a      	ldr	r2, [r3, #16]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <Write_Code+0xc8>
			*(uint32_t*) (Add_Flash + 600) = 12323;
 8000c1c:	23dc      	movs	r3, #220	@ 0xdc
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2296      	movs	r2, #150	@ 0x96
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	4694      	mov	ip, r2
 8000c28:	4463      	add	r3, ip
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f08 <Write_Code+0x398>)
 8000c2e:	6013      	str	r3, [r2, #0]
			FLASH->SR = FLASH_SR_CLEAR;
 8000c30:	4ab4      	ldr	r2, [pc, #720]	@ (8000f04 <Write_Code+0x394>)
 8000c32:	4bb6      	ldr	r3, [pc, #728]	@ (8000f0c <Write_Code+0x39c>)
 8000c34:	6113      	str	r3, [r2, #16]
 8000c36:	e000      	b.n	8000c3a <Write_Code+0xca>
		}
		step_unlock: if (HAL_FLASH_Unlock() != HAL_OK) {
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	f000 fdb7 	bl	80017ac <HAL_FLASH_Unlock>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d000      	beq.n	8000c44 <Write_Code+0xd4>
			goto step_unlock;
 8000c42:	e7fa      	b.n	8000c3a <Write_Code+0xca>
		}

		PageNum = GetPage(Add_Flash);
 8000c44:	23dc      	movs	r3, #220	@ 0xdc
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fe5a 	bl	8000904 <GetPage>
 8000c50:	0003      	movs	r3, r0
 8000c52:	22c4      	movs	r2, #196	@ 0xc4
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	6013      	str	r3, [r2, #0]

		My_Flash.TypeErase = FLASH_TYPEERASE_PAGES;  //标明Flash执行页面只做擦除操作
 8000c58:	23ac      	movs	r3, #172	@ 0xac
 8000c5a:	18fa      	adds	r2, r7, r3
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	6013      	str	r3, [r2, #0]
		My_Flash.Page = PageNum;
 8000c60:	23ac      	movs	r3, #172	@ 0xac
 8000c62:	18fa      	adds	r2, r7, r3
 8000c64:	23c4      	movs	r3, #196	@ 0xc4
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6093      	str	r3, [r2, #8]
		My_Flash.NbPages = 1; //说明要擦除的页数，此参数必须是Min_Data = 1和Max_Data =(�??????大页�??????-初始页的�??????)之间的�??
 8000c6c:	23ac      	movs	r3, #172	@ 0xac
 8000c6e:	18fa      	adds	r2, r7, r3
 8000c70:	2301      	movs	r3, #1
 8000c72:	60d3      	str	r3, [r2, #12]

		step_erase: FLASH_WaitForLastOperation(50);
 8000c74:	2032      	movs	r0, #50	@ 0x32
 8000c76:	f000 fddf 	bl	8001838 <FLASH_WaitForLastOperation>
		if (HAL_FLASHEx_Erase(&My_Flash, &PageError) != HAL_OK) {
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	22a8      	movs	r2, #168	@ 0xa8
 8000c7e:	189b      	adds	r3, r3, r2
 8000c80:	19da      	adds	r2, r3, r7
 8000c82:	23ac      	movs	r3, #172	@ 0xac
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fe43 	bl	8001914 <HAL_FLASHEx_Erase>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d100      	bne.n	8000c94 <Write_Code+0x124>
 8000c92:	e121      	b.n	8000ed8 <Write_Code+0x368>
			goto step_erase;
 8000c94:	e7ee      	b.n	8000c74 <Write_Code+0x104>
		}  //调用擦除函数擦除

		while (Add_Flash < end_add_flash) {
			Data = Receive_Buffer[Data_index]
 8000c96:	2632      	movs	r6, #50	@ 0x32
 8000c98:	23a8      	movs	r3, #168	@ 0xa8
 8000c9a:	18f3      	adds	r3, r6, r3
 8000c9c:	19db      	adds	r3, r3, r7
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	4b97      	ldr	r3, [pc, #604]	@ (8000f00 <Write_Code+0x390>)
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2290      	movs	r2, #144	@ 0x90
 8000ca8:	18ba      	adds	r2, r7, r2
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	2300      	movs	r3, #0
 8000cae:	2294      	movs	r2, #148	@ 0x94
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	6013      	str	r3, [r2, #0]
					| ((uint64_t) Receive_Buffer[Data_index + 1] << 8)
 8000cb4:	23a8      	movs	r3, #168	@ 0xa8
 8000cb6:	18f3      	adds	r3, r6, r3
 8000cb8:	19db      	adds	r3, r3, r7
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	4b90      	ldr	r3, [pc, #576]	@ (8000f00 <Write_Code+0x390>)
 8000cc0:	5c9b      	ldrb	r3, [r3, r2]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2288      	movs	r2, #136	@ 0x88
 8000cc6:	18ba      	adds	r2, r7, r2
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	228c      	movs	r2, #140	@ 0x8c
 8000cce:	18ba      	adds	r2, r7, r2
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	2388      	movs	r3, #136	@ 0x88
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	000b      	movs	r3, r1
 8000cdc:	0e1b      	lsrs	r3, r3, #24
 8000cde:	0010      	movs	r0, r2
 8000ce0:	0200      	lsls	r0, r0, #8
 8000ce2:	24a4      	movs	r4, #164	@ 0xa4
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	6020      	str	r0, [r4, #0]
 8000ce8:	20a4      	movs	r0, #164	@ 0xa4
 8000cea:	1838      	adds	r0, r7, r0
 8000cec:	6800      	ldr	r0, [r0, #0]
 8000cee:	4318      	orrs	r0, r3
 8000cf0:	23a4      	movs	r3, #164	@ 0xa4
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	6018      	str	r0, [r3, #0]
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	22a0      	movs	r2, #160	@ 0xa0
 8000cfc:	18ba      	adds	r2, r7, r2
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	2390      	movs	r3, #144	@ 0x90
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	0004      	movs	r4, r0
 8000d0a:	23a0      	movs	r3, #160	@ 0xa0
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	0015      	movs	r5, r2
 8000d14:	432c      	orrs	r4, r5
 8000d16:	2580      	movs	r5, #128	@ 0x80
 8000d18:	197d      	adds	r5, r7, r5
 8000d1a:	602c      	str	r4, [r5, #0]
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	2384      	movs	r3, #132	@ 0x84
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	6019      	str	r1, [r3, #0]
					| ((uint64_t) Receive_Buffer[Data_index + 2] << 16)
 8000d24:	23a8      	movs	r3, #168	@ 0xa8
 8000d26:	18f3      	adds	r3, r6, r3
 8000d28:	19db      	adds	r3, r3, r7
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	1c9a      	adds	r2, r3, #2
 8000d2e:	4b74      	ldr	r3, [pc, #464]	@ (8000f00 <Write_Code+0x390>)
 8000d30:	5c9b      	ldrb	r3, [r3, r2]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000d36:	2300      	movs	r3, #0
 8000d38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d3a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000d3c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d3e:	000b      	movs	r3, r1
 8000d40:	0c1b      	lsrs	r3, r3, #16
 8000d42:	0010      	movs	r0, r2
 8000d44:	0400      	lsls	r0, r0, #16
 8000d46:	249c      	movs	r4, #156	@ 0x9c
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	6020      	str	r0, [r4, #0]
 8000d4c:	209c      	movs	r0, #156	@ 0x9c
 8000d4e:	1838      	adds	r0, r7, r0
 8000d50:	6800      	ldr	r0, [r0, #0]
 8000d52:	4318      	orrs	r0, r3
 8000d54:	239c      	movs	r3, #156	@ 0x9c
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	6018      	str	r0, [r3, #0]
 8000d5a:	000b      	movs	r3, r1
 8000d5c:	041b      	lsls	r3, r3, #16
 8000d5e:	2298      	movs	r2, #152	@ 0x98
 8000d60:	18ba      	adds	r2, r7, r2
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	2098      	movs	r0, #152	@ 0x98
 8000d70:	1838      	adds	r0, r7, r0
 8000d72:	6804      	ldr	r4, [r0, #0]
 8000d74:	6845      	ldr	r5, [r0, #4]
 8000d76:	0020      	movs	r0, r4
 8000d78:	4301      	orrs	r1, r0
 8000d7a:	6739      	str	r1, [r7, #112]	@ 0x70
 8000d7c:	002a      	movs	r2, r5
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	677b      	str	r3, [r7, #116]	@ 0x74
					| ((uint64_t) Receive_Buffer[Data_index + 3] << 24)
 8000d82:	23a8      	movs	r3, #168	@ 0xa8
 8000d84:	18f3      	adds	r3, r6, r3
 8000d86:	19db      	adds	r3, r3, r7
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	1cda      	adds	r2, r3, #3
 8000d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f00 <Write_Code+0x390>)
 8000d8e:	5c9b      	ldrb	r3, [r3, r2]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000d94:	2300      	movs	r3, #0
 8000d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000d98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0a09      	lsrs	r1, r1, #8
 8000da0:	6679      	str	r1, [r7, #100]	@ 0x64
 8000da2:	0013      	movs	r3, r2
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000da8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000daa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000dac:	0004      	movs	r4, r0
 8000dae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000db2:	0015      	movs	r5, r2
 8000db4:	432c      	orrs	r4, r5
 8000db6:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000db8:	4319      	orrs	r1, r3
 8000dba:	65f9      	str	r1, [r7, #92]	@ 0x5c
					| ((uint64_t) Receive_Buffer[Data_index + 4] << 32)
 8000dbc:	23a8      	movs	r3, #168	@ 0xa8
 8000dbe:	18f3      	adds	r3, r6, r3
 8000dc0:	19db      	adds	r3, r3, r7
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	1d1a      	adds	r2, r3, #4
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8000f00 <Write_Code+0x390>)
 8000dc8:	5c9b      	ldrb	r3, [r3, r2]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8000dce:	2300      	movs	r3, #0
 8000dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dd4:	001b      	movs	r3, r3
 8000dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000dd8:	2300      	movs	r3, #0
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ddc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000dde:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000de0:	0004      	movs	r4, r0
 8000de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000de6:	0015      	movs	r5, r2
 8000de8:	432c      	orrs	r4, r5
 8000dea:	643c      	str	r4, [r7, #64]	@ 0x40
 8000dec:	4319      	orrs	r1, r3
 8000dee:	6479      	str	r1, [r7, #68]	@ 0x44
					| ((uint64_t) Receive_Buffer[Data_index + 5] << 40)
 8000df0:	23a8      	movs	r3, #168	@ 0xa8
 8000df2:	18f3      	adds	r3, r6, r3
 8000df4:	19db      	adds	r3, r3, r7
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	1d5a      	adds	r2, r3, #5
 8000dfa:	4b41      	ldr	r3, [pc, #260]	@ (8000f00 <Write_Code+0x390>)
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e10:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000e12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000e14:	0004      	movs	r4, r0
 8000e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1a:	0015      	movs	r5, r2
 8000e1c:	432c      	orrs	r4, r5
 8000e1e:	62bc      	str	r4, [r7, #40]	@ 0x28
 8000e20:	4319      	orrs	r1, r3
 8000e22:	62f9      	str	r1, [r7, #44]	@ 0x2c
					| ((uint64_t) Receive_Buffer[Data_index + 6] << 48)
 8000e24:	23a8      	movs	r3, #168	@ 0xa8
 8000e26:	18f3      	adds	r3, r6, r3
 8000e28:	19db      	adds	r3, r3, r7
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	1d9a      	adds	r2, r3, #6
 8000e2e:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <Write_Code+0x390>)
 8000e30:	5c9b      	ldrb	r3, [r3, r2]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	623b      	str	r3, [r7, #32]
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e48:	0004      	movs	r4, r0
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	0015      	movs	r5, r2
 8000e50:	432c      	orrs	r4, r5
 8000e52:	613c      	str	r4, [r7, #16]
 8000e54:	4319      	orrs	r1, r3
 8000e56:	6179      	str	r1, [r7, #20]
					| ((uint64_t) Receive_Buffer[Data_index + 7] << 56);
 8000e58:	23a8      	movs	r3, #168	@ 0xa8
 8000e5a:	18f3      	adds	r3, r6, r3
 8000e5c:	19db      	adds	r3, r3, r7
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	1dda      	adds	r2, r3, #7
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <Write_Code+0x390>)
 8000e64:	5c9b      	ldrb	r3, [r3, r2]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	061b      	lsls	r3, r3, #24
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
			Data = Receive_Buffer[Data_index]
 8000e78:	693c      	ldr	r4, [r7, #16]
 8000e7a:	697d      	ldr	r5, [r7, #20]
 8000e7c:	0023      	movs	r3, r4
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	0008      	movs	r0, r1
 8000e84:	4303      	orrs	r3, r0
 8000e86:	20c8      	movs	r0, #200	@ 0xc8
 8000e88:	1838      	adds	r0, r7, r0
 8000e8a:	6003      	str	r3, [r0, #0]
 8000e8c:	002b      	movs	r3, r5
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	22cc      	movs	r2, #204	@ 0xcc
 8000e92:	18ba      	adds	r2, r7, r2
 8000e94:	6013      	str	r3, [r2, #0]

			step_write: FLASH_WaitForLastOperation(50);
 8000e96:	2032      	movs	r0, #50	@ 0x32
 8000e98:	f000 fcce 	bl	8001838 <FLASH_WaitForLastOperation>
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Add_Flash, Data)
 8000e9c:	23c8      	movs	r3, #200	@ 0xc8
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	21dc      	movs	r1, #220	@ 0xdc
 8000ea6:	1879      	adds	r1, r7, r1
 8000ea8:	6809      	ldr	r1, [r1, #0]
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 fc30 	bl	8001710 <HAL_FLASH_Program>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d000      	beq.n	8000eb6 <Write_Code+0x346>
					!= HAL_OK) {
				goto step_write;
 8000eb4:	e7ef      	b.n	8000e96 <Write_Code+0x326>
			}
			Add_Flash = Add_Flash + 8;
 8000eb6:	23dc      	movs	r3, #220	@ 0xdc
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	22dc      	movs	r2, #220	@ 0xdc
 8000ec0:	18ba      	adds	r2, r7, r2
 8000ec2:	6013      	str	r3, [r2, #0]
			Data_index = Data_index + 8;
 8000ec4:	2332      	movs	r3, #50	@ 0x32
 8000ec6:	22a8      	movs	r2, #168	@ 0xa8
 8000ec8:	189a      	adds	r2, r3, r2
 8000eca:	19d2      	adds	r2, r2, r7
 8000ecc:	21a8      	movs	r1, #168	@ 0xa8
 8000ece:	185b      	adds	r3, r3, r1
 8000ed0:	19db      	adds	r3, r3, r7
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	8013      	strh	r3, [r2, #0]
		while (Add_Flash < end_add_flash) {
 8000ed8:	23dc      	movs	r3, #220	@ 0xdc
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	23c0      	movs	r3, #192	@ 0xc0
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d200      	bcs.n	8000eea <Write_Code+0x37a>
 8000ee8:	e6d5      	b.n	8000c96 <Write_Code+0x126>
			//   while (1)
			//   {
			//   }
			// }
		}
		HAL_FLASH_Lock();
 8000eea:	f000 fc83 	bl	80017f4 <HAL_FLASH_Lock>
		FLASH_WaitForLastOperation(50);
 8000eee:	2032      	movs	r0, #50	@ 0x32
 8000ef0:	f000 fca2 	bl	8001838 <FLASH_WaitForLastOperation>
	}
	for (int i = 0; i < sizeof(Receive_Buffer); i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	22d4      	movs	r2, #212	@ 0xd4
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e016      	b.n	8000f2c <Write_Code+0x3bc>
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	200000d8 	.word	0x200000d8
 8000f04:	40022000 	.word	0x40022000
 8000f08:	00003023 	.word	0x00003023
 8000f0c:	000083fb 	.word	0x000083fb
		Receive_Buffer[i] = 0;
 8000f10:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <Write_Code+0x3d4>)
 8000f12:	23d4      	movs	r3, #212	@ 0xd4
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(Receive_Buffer); i++) {
 8000f1e:	23d4      	movs	r3, #212	@ 0xd4
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	22d4      	movs	r2, #212	@ 0xd4
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	23d4      	movs	r3, #212	@ 0xd4
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <Write_Code+0x3d8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d9eb      	bls.n	8000f10 <Write_Code+0x3a0>
	}

}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b039      	add	sp, #228	@ 0xe4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	200000d8 	.word	0x200000d8
 8000f48:	00000807 	.word	0x00000807

08000f4c <iap_i2c>:

void iap_i2c(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

	/*this is a endless loop for process the data from Host side*/
	while (1) {
		//Tomas_Li_Test();//Just for Test

		if (i2c_event == EVENT_OPCOD_NOTYET_READ) {
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <iap_i2c+0x5c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d1fa      	bne.n	8000f50 <iap_i2c+0x4>

			NVIC_DisableIRQ(I2C2_IRQn);
 8000f5a:	2018      	movs	r0, #24
 8000f5c:	f7ff fb88 	bl	8000670 <__NVIC_DisableIRQ>
			i2c_event = NOEVENT;        //changed the status
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <iap_i2c+0x5c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
			/* Read opcode */
			switch (Receive_Buffer[0]) {
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <iap_i2c+0x60>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b06      	cmp	r3, #6
 8000f6e:	d002      	beq.n	8000f76 <iap_i2c+0x2a>
 8000f70:	2b77      	cmp	r3, #119	@ 0x77
 8000f72:	d003      	beq.n	8000f7c <iap_i2c+0x30>
			case OPC_USRCD :
				Jump_APP();
				break;

			default:
				break;
 8000f74:	e005      	b.n	8000f82 <iap_i2c+0x36>
				Write_Code();
 8000f76:	f7ff fdfb 	bl	8000b70 <Write_Code>
				break;
 8000f7a:	e002      	b.n	8000f82 <iap_i2c+0x36>
				Jump_APP();
 8000f7c:	f7ff fdc4 	bl	8000b08 <Jump_APP>
				break;
 8000f80:	46c0      	nop			@ (mov r8, r8)
			}
			NVIC_EnableIRQ(I2C2_IRQn);
 8000f82:	2018      	movs	r0, #24
 8000f84:	f7ff fb5a 	bl	800063c <__NVIC_EnableIRQ>
			I2C2->CR1 |= I2C_CR1_ADDRIE;       //Open address and Stop interrupt
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <iap_i2c+0x64>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <iap_i2c+0x64>)
 8000f8e:	2108      	movs	r1, #8
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
			LL_I2C_Enable(I2C2);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <iap_i2c+0x64>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff fc4a 	bl	8000830 <LL_I2C_Enable>
			LL_I2C_EnableIT_ADDR(I2C2);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <iap_i2c+0x64>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff fc63 	bl	800086a <LL_I2C_EnableIT_ADDR>
		if (i2c_event == EVENT_OPCOD_NOTYET_READ) {
 8000fa4:	e7d4      	b.n	8000f50 <iap_i2c+0x4>
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	200008e0 	.word	0x200008e0
 8000fac:	200000d8 	.word	0x200000d8
 8000fb0:	40005800 	.word	0x40005800

08000fb4 <iap_gpio_init>:

		}
	}
}

static void iap_gpio_init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f001 f9de 	bl	8002384 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <iap_gpio_init+0xa4>)
 8000fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <iap_gpio_init+0xa4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd4:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <iap_gpio_init+0xa4>)
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4013      	ands	r3, r2
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	0119      	lsls	r1, r3, #4
 8000fe4:	23a0      	movs	r3, #160	@ 0xa0
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	2200      	movs	r2, #0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fe9a 	bl	8001d24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	0159      	lsls	r1, r3, #5
 8000ff4:	23a0      	movs	r3, #160	@ 0xa0
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 fe92 	bl	8001d24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2280      	movs	r2, #128	@ 0x80
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2201      	movs	r2, #1
 8001012:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	1d3a      	adds	r2, r7, #4
 800101c:	23a0      	movs	r3, #160	@ 0xa0
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fd1a 	bl	8001a5c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	0152      	lsls	r2, r2, #5
 800102e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2201      	movs	r2, #1
 800103a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	1d3a      	adds	r2, r7, #4
 8001044:	23a0      	movs	r3, #160	@ 0xa0
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fd06 	bl	8001a5c <HAL_GPIO_Init>
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b006      	add	sp, #24
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f000 f8e6 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f82e 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001068:	f7ff f938 	bl	80002dc <MX_GPIO_Init>
  MX_CRC_Init();
 800106c:	f7ff f8d4 	bl	8000218 <MX_CRC_Init>
  MX_I2C2_Init();
 8001070:	f7ff fa54 	bl	800051c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	iap_gpio_init();
 8001074:	f7ff ff9e 	bl	8000fb4 <iap_gpio_init>
	LL_mDelay(300);
 8001078:	2396      	movs	r3, #150	@ 0x96
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	0018      	movs	r0, r3
 800107e:	f001 f94f 	bl	8002320 <LL_mDelay>
//	Jump_APP();
	if ((!(!!(GPIOA->IDR & GPIO_PIN_11)))
 8001082:	23a0      	movs	r3, #160	@ 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4013      	ands	r3, r2
 800108e:	d113      	bne.n	80010b8 <main+0x5c>
			&& (!(!!(GPIOA->IDR & GPIO_PIN_12)))) {
 8001090:	23a0      	movs	r3, #160	@ 0xa0
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	4013      	ands	r3, r2
 800109c:	d10c      	bne.n	80010b8 <main+0x5c>
		MX_I2C2_Init();
 800109e:	f7ff fa3d 	bl	800051c <MX_I2C2_Init>
		LL_I2C_Enable(I2C2);
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <main+0x64>)
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff fbc3 	bl	8000830 <LL_I2C_Enable>
		LL_I2C_EnableIT_ADDR(I2C2);
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <main+0x64>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff fbdc 	bl	800086a <LL_I2C_EnableIT_ADDR>
		iap_i2c();
 80010b2:	f7ff ff4b 	bl	8000f4c <iap_i2c>
 80010b6:	e001      	b.n	80010bc <main+0x60>
	} else {
		Jump_APP();
 80010b8:	f7ff fd26 	bl	8000b08 <Jump_APP>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	e7fd      	b.n	80010bc <main+0x60>
 80010c0:	40005800 	.word	0x40005800

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff fbfb 	bl	80008c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	f7ff fc0c 	bl	80008ec <LL_FLASH_GetLatency>
 80010d4:	0003      	movs	r3, r0
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d1fa      	bne.n	80010d0 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80010da:	f7ff faeb 	bl	80006b4 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	f7ff faf6 	bl	80006d0 <LL_RCC_HSI_IsReady>
 80010e4:	0003      	movs	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d1fa      	bne.n	80010e0 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	059b      	lsls	r3, r3, #22
 80010ee:	2208      	movs	r2, #8
 80010f0:	2100      	movs	r1, #0
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff fb6e 	bl	80007d4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80010f8:	f7ff fb4a 	bl	8000790 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 80010fc:	f7ff fb8a 	bl	8000814 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	f7ff fb53 	bl	80007ac <LL_RCC_PLL_IsReady>
 8001106:	0003      	movs	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d1fa      	bne.n	8001102 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fb13 	bl	8000738 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001112:	2002      	movs	r0, #2
 8001114:	f7ff faf0 	bl	80006f8 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	f7ff fb01 	bl	8000720 <LL_RCC_GetSysClkSource>
 800111e:	0003      	movs	r3, r0
 8001120:	2b10      	cmp	r3, #16
 8001122:	d1fa      	bne.n	800111a <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fb1d 	bl	8000764 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <SystemClock_Config+0x84>)
 800112c:	0018      	movs	r0, r3
 800112e:	f001 f91b 	bl	8002368 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f8c8 	bl	80012c8 <HAL_InitTick>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800113c:	f000 f806 	bl	800114c <Error_Handler>
  }
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	03d09000 	.word	0x03d09000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_MspInit+0x44>)
 8001160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_MspInit+0x44>)
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <HAL_MspInit+0x44>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <HAL_MspInit+0x44>)
 8001178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_MspInit+0x44>)
 800117c:	2180      	movs	r1, #128	@ 0x80
 800117e:	0549      	lsls	r1, r1, #21
 8001180:	430a      	orrs	r2, r1
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_MspInit+0x44>)
 8001186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	4013      	ands	r3, r2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	40021000 	.word	0x40021000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	e7fd      	b.n	80011a4 <NMI_Handler+0x4>

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	e7fd      	b.n	80011ac <HardFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8c8 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e0:	f7ff fff7 	bl	80011d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	@ (800121c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800120a:	f001 f8c3 	bl	8002394 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800120e:	f7ff ff25 	bl	800105c <main>

08001212 <LoopForever>:

LoopForever:
  b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   r0, =_estack
 8001214:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001220:	08002410 	.word	0x08002410
  ldr r2, =_sbss
 8001224:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001228:	2000090c 	.word	0x2000090c

0800122c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_IRQHandler>
	...

08001230 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_Init+0x3c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_Init+0x3c>)
 8001242:	2180      	movs	r1, #128	@ 0x80
 8001244:	0049      	lsls	r1, r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	2003      	movs	r0, #3
 800124c:	f000 f83c 	bl	80012c8 <HAL_InitTick>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d003      	beq.n	800125c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff ff7c 	bl	8001158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_DeInit+0x48>)
 8001276:	2201      	movs	r2, #1
 8001278:	4252      	negs	r2, r2
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_DeInit+0x48>)
 800127e:	2200      	movs	r2, #0
 8001280:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_DeInit+0x48>)
 8001284:	2201      	movs	r2, #1
 8001286:	4252      	negs	r2, r2
 8001288:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_DeInit+0x48>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_DeInit+0x48>)
 8001292:	2201      	movs	r2, #1
 8001294:	4252      	negs	r2, r2
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_DeInit+0x48>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_DeInit+0x48>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	4252      	negs	r2, r2
 80012a4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <HAL_DeInit+0x48>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80012ac:	f000 f806 	bl	80012bc <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <HAL_InitTick+0x88>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d02b      	beq.n	8001338 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_InitTick+0x8c>)
 80012e2:	681c      	ldr	r4, [r3, #0]
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_InitTick+0x88>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	0019      	movs	r1, r3
 80012ea:	23fa      	movs	r3, #250	@ 0xfa
 80012ec:	0098      	lsls	r0, r3, #2
 80012ee:	f7fe ff07 	bl	8000100 <__udivsi3>
 80012f2:	0003      	movs	r3, r0
 80012f4:	0019      	movs	r1, r3
 80012f6:	0020      	movs	r0, r4
 80012f8:	f7fe ff02 	bl	8000100 <__udivsi3>
 80012fc:	0003      	movs	r3, r0
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f8ef 	bl	80014e2 <HAL_SYSTICK_Config>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d112      	bne.n	800132e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d80a      	bhi.n	8001324 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	2200      	movs	r2, #0
 8001316:	0018      	movs	r0, r3
 8001318:	f000 f8ce 	bl	80014b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_InitTick+0x90>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e00d      	b.n	8001340 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	230f      	movs	r3, #15
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e008      	b.n	8001340 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e003      	b.n	8001340 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b005      	add	sp, #20
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	20000008 	.word	0x20000008
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	20000008 	.word	0x20000008
 800137c:	200008ec 	.word	0x200008ec

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	@ (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	200008ec 	.word	0x200008ec

08001394 <__NVIC_SetPriority>:
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80013a8:	d828      	bhi.n	80013fc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <__NVIC_SetPriority+0xd4>)
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	33c0      	adds	r3, #192	@ 0xc0
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	589b      	ldr	r3, [r3, r2]
 80013ba:	1dfa      	adds	r2, r7, #7
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	0011      	movs	r1, r2
 80013c0:	2203      	movs	r2, #3
 80013c2:	400a      	ands	r2, r1
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	21ff      	movs	r1, #255	@ 0xff
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	401a      	ands	r2, r3
 80013d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	22ff      	movs	r2, #255	@ 0xff
 80013d8:	401a      	ands	r2, r3
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	0018      	movs	r0, r3
 80013e0:	2303      	movs	r3, #3
 80013e2:	4003      	ands	r3, r0
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	481f      	ldr	r0, [pc, #124]	@ (8001468 <__NVIC_SetPriority+0xd4>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	430a      	orrs	r2, r1
 80013f4:	33c0      	adds	r3, #192	@ 0xc0
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	501a      	str	r2, [r3, r0]
}
 80013fa:	e031      	b.n	8001460 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fc:	4a1b      	ldr	r2, [pc, #108]	@ (800146c <__NVIC_SetPriority+0xd8>)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	0019      	movs	r1, r3
 8001404:	230f      	movs	r3, #15
 8001406:	400b      	ands	r3, r1
 8001408:	3b08      	subs	r3, #8
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3306      	adds	r3, #6
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	18d3      	adds	r3, r2, r3
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1dfa      	adds	r2, r7, #7
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	0011      	movs	r1, r2
 800141c:	2203      	movs	r2, #3
 800141e:	400a      	ands	r2, r1
 8001420:	00d2      	lsls	r2, r2, #3
 8001422:	21ff      	movs	r1, #255	@ 0xff
 8001424:	4091      	lsls	r1, r2
 8001426:	000a      	movs	r2, r1
 8001428:	43d2      	mvns	r2, r2
 800142a:	401a      	ands	r2, r3
 800142c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	22ff      	movs	r2, #255	@ 0xff
 8001434:	401a      	ands	r2, r3
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0018      	movs	r0, r3
 800143c:	2303      	movs	r3, #3
 800143e:	4003      	ands	r3, r0
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <__NVIC_SetPriority+0xd8>)
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	001c      	movs	r4, r3
 800144c:	230f      	movs	r3, #15
 800144e:	4023      	ands	r3, r4
 8001450:	3b08      	subs	r3, #8
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	430a      	orrs	r2, r1
 8001456:	3306      	adds	r3, #6
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	18c3      	adds	r3, r0, r3
 800145c:	3304      	adds	r3, #4
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b003      	add	sp, #12
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	045b      	lsls	r3, r3, #17
 8001480:	429a      	cmp	r2, r3
 8001482:	d301      	bcc.n	8001488 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001484:	2301      	movs	r3, #1
 8001486:	e010      	b.n	80014aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <SysTick_Config+0x44>)
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	3a01      	subs	r2, #1
 800148e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001490:	2301      	movs	r3, #1
 8001492:	425b      	negs	r3, r3
 8001494:	2103      	movs	r1, #3
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff7c 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x44>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	210f      	movs	r1, #15
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	1c02      	adds	r2, r0, #0
 80014c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ffbf 	bl	8001470 <SysTick_Config>
 80014f2:	0003      	movs	r3, r0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e056      	b.n	80015bc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7f5b      	ldrb	r3, [r3, #29]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f7fe fea1 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10c      	bne.n	800154e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <HAL_CRC_Init+0xc8>)
 800153a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2118      	movs	r1, #24
 8001548:	438a      	bics	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e00b      	b.n	8001566 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f863 	bl	8001624 <HAL_CRCEx_Polynomial_Set>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e02a      	b.n	80015bc <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	795b      	ldrb	r3, [r3, #5]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d105      	bne.n	800157a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4252      	negs	r2, r2
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	e004      	b.n	8001584 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6912      	ldr	r2, [r2, #16]
 8001582:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2260      	movs	r2, #96	@ 0x60
 800158c:	4393      	bics	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	4393      	bics	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	04c11db7 	.word	0x04c11db7

080015c8 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e020      	b.n	800161c <HAL_CRC_DeInit+0x54>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7f5b      	ldrb	r3, [r3, #29]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d101      	bne.n	80015e8 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
 80015e6:	e019      	b.n	800161c <HAL_CRC_DeInit+0x54>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_REG(hcrc->Instance->IDR);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0018      	movs	r0, r3
 800160a:	f7fe fe4d 	bl	80002a8 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001630:	2117      	movs	r1, #23
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001638:	231f      	movs	r3, #31
 800163a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	d103      	bne.n	800164c <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8001644:	187b      	adds	r3, r7, r1
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e045      	b.n	80016d8 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	613a      	str	r2, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_CRCEx_Polynomial_Set+0x46>
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	221f      	movs	r2, #31
 800165c:	4013      	ands	r3, r2
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	40da      	lsrs	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	2201      	movs	r2, #1
 8001666:	4013      	ands	r3, r2
 8001668:	d0f1      	beq.n	800164e <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b18      	cmp	r3, #24
 800166e:	d00f      	beq.n	8001690 <HAL_CRCEx_Polynomial_Set+0x6c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b18      	cmp	r3, #24
 8001674:	d824      	bhi.n	80016c0 <HAL_CRCEx_Polynomial_Set+0x9c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b10      	cmp	r3, #16
 800167a:	d011      	beq.n	80016a0 <HAL_CRCEx_Polynomial_Set+0x7c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b10      	cmp	r3, #16
 8001680:	d81e      	bhi.n	80016c0 <HAL_CRCEx_Polynomial_Set+0x9c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_CRCEx_Polynomial_Set+0xa6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d010      	beq.n	80016b0 <HAL_CRCEx_Polynomial_Set+0x8c>
 800168e:	e017      	b.n	80016c0 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b06      	cmp	r3, #6
 8001694:	d91b      	bls.n	80016ce <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8001696:	2317      	movs	r3, #23
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800169e:	e016      	b.n	80016ce <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d915      	bls.n	80016d2 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 80016a6:	2317      	movs	r3, #23
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
        }
        break;
 80016ae:	e010      	b.n	80016d2 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d90f      	bls.n	80016d6 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80016b6:	2317      	movs	r3, #23
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80016be:	e00a      	b.n	80016d6 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80016c0:	2317      	movs	r3, #23
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
        break;
 80016c8:	e006      	b.n	80016d8 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	e004      	b.n	80016d8 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	e002      	b.n	80016d8 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	e000      	b.n	80016d8 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016d6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 80016d8:	2317      	movs	r3, #23
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2218      	movs	r2, #24
 80016f2:	4393      	bics	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001700:	2317      	movs	r3, #23
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	781b      	ldrb	r3, [r3, #0]
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b006      	add	sp, #24
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	603a      	str	r2, [r7, #0]
 800171c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_FLASH_Program+0x94>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_FLASH_Program+0x1a>
 8001726:	2302      	movs	r3, #2
 8001728:	e038      	b.n	800179c <HAL_FLASH_Program+0x8c>
 800172a:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <HAL_FLASH_Program+0x94>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_FLASH_Program+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001736:	2517      	movs	r5, #23
 8001738:	197c      	adds	r4, r7, r5
 800173a:	23fa      	movs	r3, #250	@ 0xfa
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f87a 	bl	8001838 <FLASH_WaitForLastOperation>
 8001744:	0003      	movs	r3, r0
 8001746:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001748:	197b      	adds	r3, r7, r5
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11f      	bne.n	8001790 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d106      	bne.n	8001764 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	0008      	movs	r0, r1
 800175e:	f000 f8b9 	bl	80018d4 <FLASH_Program_DoubleWord>
 8001762:	e005      	b.n	8001770 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fe44 	bl	80023f8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001770:	2317      	movs	r3, #23
 8001772:	18fc      	adds	r4, r7, r3
 8001774:	23fa      	movs	r3, #250	@ 0xfa
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	0018      	movs	r0, r3
 800177a:	f000 f85d 	bl	8001838 <FLASH_WaitForLastOperation>
 800177e:	0003      	movs	r3, r0
 8001780:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_FLASH_Program+0x98>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43d9      	mvns	r1, r3
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <HAL_FLASH_Program+0x98>)
 800178c:	400a      	ands	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <HAL_FLASH_Program+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001796:	2317      	movs	r3, #23
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	200008f0 	.word	0x200008f0
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_FLASH_Unlock+0x3c>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da0c      	bge.n	80017da <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_FLASH_Unlock+0x3c>)
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_FLASH_Unlock+0x40>)
 80017c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_FLASH_Unlock+0x3c>)
 80017c8:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_FLASH_Unlock+0x44>)
 80017ca:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_FLASH_Unlock+0x3c>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da02      	bge.n	80017da <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	40022000 	.word	0x40022000
 80017ec:	45670123 	.word	0x45670123
 80017f0:	cdef89ab 	.word	0xcdef89ab

080017f4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001800:	23fa      	movs	r3, #250	@ 0xfa
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	0018      	movs	r0, r3
 8001806:	f000 f817 	bl	8001838 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_FLASH_Lock+0x40>)
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_FLASH_Lock+0x40>)
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	0609      	lsls	r1, r1, #24
 8001814:	430a      	orrs	r2, r1
 8001816:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_FLASH_Lock+0x40>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	da02      	bge.n	8001826 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	40022000 	.word	0x40022000

08001838 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff fd9e 	bl	8001380 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800184e:	e00c      	b.n	800186a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	d009      	beq.n	800186a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001856:	f7ff fd93 	bl	8001380 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d801      	bhi.n	800186a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e028      	b.n	80018bc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800186a:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <FLASH_WaitForLastOperation+0x8c>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4013      	ands	r3, r2
 8001872:	d1ed      	bne.n	8001850 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <FLASH_WaitForLastOperation+0x8c>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <FLASH_WaitForLastOperation+0x90>)
 800187a:	4013      	ands	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <FLASH_WaitForLastOperation+0x8c>)
 8001880:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <FLASH_WaitForLastOperation+0x94>)
 8001882:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d011      	beq.n	80018ae <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <FLASH_WaitForLastOperation+0x98>)
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e013      	b.n	80018bc <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3301      	adds	r3, #1
 8001898:	d009      	beq.n	80018ae <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800189a:	f7ff fd71 	bl	8001380 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d801      	bhi.n	80018ae <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e006      	b.n	80018bc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <FLASH_WaitForLastOperation+0x8c>)
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	02db      	lsls	r3, r3, #11
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1ec      	bne.n	8001894 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b004      	add	sp, #16
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40022000 	.word	0x40022000
 80018c8:	000083fa 	.word	0x000083fa
 80018cc:	000083fb 	.word	0x000083fb
 80018d0:	200008f0 	.word	0x200008f0

080018d4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	603a      	str	r2, [r7, #0]
 80018de:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <FLASH_Program_DoubleWord+0x3c>)
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <FLASH_Program_DoubleWord+0x3c>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80018f2:	f3bf 8f6f 	isb	sy
}
 80018f6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	001c      	movs	r4, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	001d      	movs	r5, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3304      	adds	r3, #4
 8001904:	0022      	movs	r2, r4
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	40022000 	.word	0x40022000

08001914 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001914:	b5b0      	push	{r4, r5, r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800191e:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_FLASHEx_Erase+0xe0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_FLASHEx_Erase+0x16>
 8001926:	2302      	movs	r3, #2
 8001928:	e05f      	b.n	80019ea <HAL_FLASHEx_Erase+0xd6>
 800192a:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <HAL_FLASHEx_Erase+0xe0>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001930:	4b30      	ldr	r3, [pc, #192]	@ (80019f4 <HAL_FLASHEx_Erase+0xe0>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001936:	250f      	movs	r5, #15
 8001938:	197c      	adds	r4, r7, r5
 800193a:	23fa      	movs	r3, #250	@ 0xfa
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff ff7a 	bl	8001838 <FLASH_WaitForLastOperation>
 8001944:	0003      	movs	r3, r0
 8001946:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001948:	002c      	movs	r4, r5
 800194a:	193b      	adds	r3, r7, r4
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d145      	bne.n	80019de <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2204      	movs	r2, #4
 8001956:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d10d      	bne.n	800197c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f000 f849 	bl	80019fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800196a:	193c      	adds	r4, r7, r4
 800196c:	23fa      	movs	r3, #250	@ 0xfa
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff ff61 	bl	8001838 <FLASH_WaitForLastOperation>
 8001976:	0003      	movs	r3, r0
 8001978:	7023      	strb	r3, [r4, #0]
 800197a:	e030      	b.n	80019de <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4252      	negs	r2, r2
 8001982:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	e01a      	b.n	80019c2 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f845 	bl	8001a24 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800199a:	250f      	movs	r5, #15
 800199c:	197c      	adds	r4, r7, r5
 800199e:	23fa      	movs	r3, #250	@ 0xfa
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff ff48 	bl	8001838 <FLASH_WaitForLastOperation>
 80019a8:	0003      	movs	r3, r0
 80019aa:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	601a      	str	r2, [r3, #0]
          break;
 80019ba:	e00a      	b.n	80019d2 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	18d3      	adds	r3, r2, r3
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d3dc      	bcc.n	800198c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_FLASHEx_Erase+0xe4>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_FLASHEx_Erase+0xe4>)
 80019d8:	2102      	movs	r1, #2
 80019da:	438a      	bics	r2, r1
 80019dc:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_FLASHEx_Erase+0xe0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80019e4:	230f      	movs	r3, #15
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bdb0      	pop	{r4, r5, r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	200008f0 	.word	0x200008f0
 80019f8:	40022000 	.word	0x40022000

080019fc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <FLASH_MassErase+0x24>)
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <FLASH_MassErase+0x24>)
 8001a0e:	2180      	movs	r1, #128	@ 0x80
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	430a      	orrs	r2, r1
 8001a14:	615a      	str	r2, [r3, #20]
}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	40022000 	.word	0x40022000

08001a24 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <FLASH_PageErase+0x2c>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <FLASH_PageErase+0x30>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	00da      	lsls	r2, r3, #3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <FLASH_PageErase+0x2c>)
 8001a42:	4905      	ldr	r1, [pc, #20]	@ (8001a58 <FLASH_PageErase+0x34>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40022000 	.word	0x40022000
 8001a54:	ffffe007 	.word	0xffffe007
 8001a58:	00010002 	.word	0x00010002

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e147      	b.n	8001cfc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4091      	lsls	r1, r2
 8001a76:	000a      	movs	r2, r1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <HAL_GPIO_Init+0x28>
 8001a82:	e138      	b.n	8001cf6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d005      	beq.n	8001a9c <HAL_GPIO_Init+0x40>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2203      	movs	r2, #3
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d130      	bne.n	8001afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	43da      	mvns	r2, r3
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	409a      	lsls	r2, r3
 8001abe:	0013      	movs	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	0013      	movs	r3, r2
 8001ada:	43da      	mvns	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	2201      	movs	r2, #1
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d017      	beq.n	8001b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2203      	movs	r2, #3
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	58d3      	ldr	r3, [r2, r3]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4013      	ands	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2107      	movs	r1, #7
 8001b72:	400b      	ands	r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	6939      	ldr	r1, [r7, #16]
 8001b8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	401a      	ands	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	23c0      	movs	r3, #192	@ 0xc0
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <HAL_GPIO_Init+0x174>
 8001bce:	e092      	b.n	8001cf6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bd0:	4a50      	ldr	r2, [pc, #320]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3318      	adds	r3, #24
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	589b      	ldr	r3, [r3, r2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4013      	ands	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	220f      	movs	r2, #15
 8001be8:	409a      	lsls	r2, r3
 8001bea:	0013      	movs	r3, r2
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	23a0      	movs	r3, #160	@ 0xa0
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x1ca>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <HAL_GPIO_Init+0x2bc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x1c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <HAL_GPIO_Init+0x2c0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x1c2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a43      	ldr	r2, [pc, #268]	@ (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x1be>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x1cc>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x1cc>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x1cc>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x1cc>
 8001c26:	2300      	movs	r3, #0
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	00d2      	lsls	r2, r2, #3
 8001c30:	4093      	lsls	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c38:	4936      	ldr	r1, [pc, #216]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3318      	adds	r3, #24
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c46:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	035b      	lsls	r3, r3, #13
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c70:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	039b      	lsls	r3, r3, #14
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001c9c:	2384      	movs	r3, #132	@ 0x84
 8001c9e:	58d3      	ldr	r3, [r2, r3]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	029b      	lsls	r3, r3, #10
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc0:	4914      	ldr	r1, [pc, #80]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001cc2:	2284      	movs	r2, #132	@ 0x84
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001cc8:	4a12      	ldr	r2, [pc, #72]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	58d3      	ldr	r3, [r2, r3]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cee:	4909      	ldr	r1, [pc, #36]	@ (8001d14 <HAL_GPIO_Init+0x2b8>)
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	1e13      	subs	r3, r2, #0
 8001d06:	d000      	beq.n	8001d0a <HAL_GPIO_Init+0x2ae>
 8001d08:	e6b0      	b.n	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b006      	add	sp, #24
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021800 	.word	0x40021800
 8001d18:	50000400 	.word	0x50000400
 8001d1c:	50000800 	.word	0x50000800
 8001d20:	50000c00 	.word	0x50000c00

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	0008      	movs	r0, r1
 8001d2e:	0011      	movs	r1, r2
 8001d30:	1cbb      	adds	r3, r7, #2
 8001d32:	1c02      	adds	r2, r0, #0
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	1c7b      	adds	r3, r7, #1
 8001d38:	1c0a      	adds	r2, r1, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3c:	1c7b      	adds	r3, r7, #1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d44:	1cbb      	adds	r3, r7, #2
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4e:	1cbb      	adds	r3, r7, #2
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6819      	ldr	r1, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	435b      	muls	r3, r3
 8001d72:	001a      	movs	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	189b      	adds	r3, r3, r2
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	001a      	movs	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	435b      	muls	r3, r3
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	434b      	muls	r3, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	43d2      	mvns	r2, r2
 8001daa:	401a      	ands	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	434b      	muls	r3, r1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]
}
 8001db8:	46c0      	nop			@ (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b004      	add	sp, #16
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	435b      	muls	r3, r3
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	400b      	ands	r3, r1
 8001de0:	001a      	movs	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	435b      	muls	r3, r3
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	434b      	muls	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68d9      	ldr	r1, [r3, #12]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	435b      	muls	r3, r3
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	0013      	movs	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	43db      	mvns	r3, r3
 8001e16:	400b      	ands	r3, r1
 8001e18:	001a      	movs	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	435b      	muls	r3, r3
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	434b      	muls	r3, r1
 8001e22:	431a      	orrs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	60da      	str	r2, [r3, #12]
}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a19      	ldr	r1, [r3, #32]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	435b      	muls	r3, r3
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	4353      	muls	r3, r2
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	435a      	muls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	43db      	mvns	r3, r3
 8001e54:	400b      	ands	r3, r1
 8001e56:	001a      	movs	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	435b      	muls	r3, r3
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	434b      	muls	r3, r1
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	434b      	muls	r3, r1
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	434b      	muls	r3, r1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b004      	add	sp, #16
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	0a12      	lsrs	r2, r2, #8
 8001e8e:	4353      	muls	r3, r2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	0a12      	lsrs	r2, r2, #8
 8001e94:	4353      	muls	r3, r2
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	0a12      	lsrs	r2, r2, #8
 8001e9a:	435a      	muls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	0a09      	lsrs	r1, r1, #8
 8001eb0:	434b      	muls	r3, r1
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	0a09      	lsrs	r1, r1, #8
 8001eb6:	434b      	muls	r3, r1
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	0a09      	lsrs	r1, r1, #8
 8001ebc:	434b      	muls	r3, r1
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	434b      	muls	r3, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b004      	add	sp, #16
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ede:	e047      	b.n	8001f70 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4091      	lsls	r1, r2
 8001eea:	000a      	movs	r2, r1
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d039      	beq.n	8001f6a <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d003      	beq.n	8001f06 <LL_GPIO_Init+0x36>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d10d      	bne.n	8001f22 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff ff56 	bl	8001dc0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff ff3a 	bl	8001d96 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7ff ff64 	bl	8001df8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d111      	bne.n	8001f5c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2bff      	cmp	r3, #255	@ 0xff
 8001f3c:	d807      	bhi.n	8001f4e <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff ff72 	bl	8001e30 <LL_GPIO_SetAFPin_0_7>
 8001f4c:	e006      	b.n	8001f5c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff ff8d 	bl	8001e76 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff fefa 	bl	8001d5e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	40da      	lsrs	r2, r3
 8001f78:	1e13      	subs	r3, r2, #0
 8001f7a:	d1b1      	bne.n	8001ee0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <LL_I2C_Enable>:
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <LL_I2C_Disable>:
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <LL_I2C_ConfigFilters>:
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <LL_I2C_ConfigFilters+0x2c>)
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0219      	lsls	r1, r3, #8
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b004      	add	sp, #16
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	ffffe0ff 	.word	0xffffe0ff

08001ff0 <LL_I2C_SetOwnAddress1>:
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	0adb      	lsrs	r3, r3, #11
 8002002:	02da      	lsls	r2, r3, #11
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	430b      	orrs	r3, r1
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	46c0      	nop			@ (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}

08002018 <LL_I2C_EnableOwnAddress1>:
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2280      	movs	r2, #128	@ 0x80
 8002026:	0212      	lsls	r2, r2, #8
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]
}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <LL_I2C_DisableOwnAddress1>:
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a03      	ldr	r2, [pc, #12]	@ (8002054 <LL_I2C_DisableOwnAddress1+0x1c>)
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	ffff7fff 	.word	0xffff7fff

08002058 <LL_I2C_SetTiming>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	611a      	str	r2, [r3, #16]
}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <LL_I2C_SetMode>:
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <LL_I2C_SetMode+0x24>)
 8002080:	401a      	ands	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	ffcfffff 	.word	0xffcfffff

08002098 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <LL_I2C_AcknowledgeNextData+0x24>)
 80020a8:	401a      	ands	r2, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	605a      	str	r2, [r3, #4]
}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	ffff7fff 	.word	0xffff7fff

080020c0 <LL_APB1_GRP1_ForceReset>:
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR1, Periphs);
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <LL_APB1_GRP1_ForceReset+0x1c>)
 80020ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <LL_APB1_GRP1_ForceReset+0x1c>)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_APB1_GRP1_ReleaseReset>:
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <LL_APB1_GRP1_ReleaseReset+0x20>)
 80020ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <LL_APB1_GRP1_ReleaseReset+0x20>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	40021000 	.word	0x40021000

08002104 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are de-initialized
  *          - ERROR: I2C registers are not de-initialized
  */
ErrorStatus LL_I2C_DeInit(const I2C_TypeDef *I2Cx)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800210c:	230f      	movs	r3, #15
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <LL_I2C_DeInit+0x64>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d10a      	bne.n	8002132 <LL_I2C_DeInit+0x2e>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	039b      	lsls	r3, r3, #14
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ffcd 	bl	80020c0 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	039b      	lsls	r3, r3, #14
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff ffd8 	bl	80020e0 <LL_APB1_GRP1_ReleaseReset>
 8002130:	e012      	b.n	8002158 <LL_I2C_DeInit+0x54>
  }
  else if (I2Cx == I2C2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LL_I2C_DeInit+0x68>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10a      	bne.n	8002150 <LL_I2C_DeInit+0x4c>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	03db      	lsls	r3, r3, #15
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff ffbe 	bl	80020c0 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	03db      	lsls	r3, r3, #15
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ffc9 	bl	80020e0 <LL_APB1_GRP1_ReleaseReset>
 800214e:	e003      	b.n	8002158 <LL_I2C_DeInit+0x54>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
  }
#endif /* I2C3 */
  else
  {
    status = ERROR;
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	40005400 	.word	0x40005400
 800216c:	40005800 	.word	0x40005800

08002170 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff ff10 	bl	8001fa2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff ff17 	bl	8001fc0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0011      	movs	r1, r2
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff ff5c 	bl	8002058 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7ff feef 	bl	8001f86 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7ff ff44 	bl	8002038 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6919      	ldr	r1, [r3, #16]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff ff18 	bl	8001ff0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff ff24 	bl	8002018 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0011      	movs	r1, r2
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff ff49 	bl	8002070 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0011      	movs	r1, r2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7ff ff56 	bl	8002098 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <LL_RCC_HSE_IsReady>:
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <LL_RCC_HSE_IsReady+0x24>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	401a      	ands	r2, r3
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	429a      	cmp	r2, r3
 800220c:	d101      	bne.n	8002212 <LL_RCC_HSE_IsReady+0x1a>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_RCC_HSE_IsReady+0x1c>
 8002212:	2300      	movs	r3, #0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	40021000 	.word	0x40021000

08002220 <LL_RCC_HSI_Enable>:
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <LL_RCC_HSI_Enable+0x18>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <LL_RCC_HSI_Enable+0x18>)
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	0049      	lsls	r1, r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000

0800223c <LL_RCC_HSI_IsReady>:
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <LL_RCC_HSI_IsReady+0x24>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	401a      	ands	r2, r3
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <LL_RCC_HSI_IsReady+0x1a>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_RCC_HSI_IsReady+0x1c>
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	40021000 	.word	0x40021000

08002264 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
}
 8002280:	46c0      	nop			@ (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	ffff80ff 	.word	0xffff80ff

08002290 <LL_RCC_PLL_IsReady>:
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <LL_RCC_PLL_IsReady+0x24>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	049b      	lsls	r3, r3, #18
 800229c:	401a      	ands	r2, r3
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	049b      	lsls	r3, r3, #18
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d101      	bne.n	80022aa <LL_RCC_PLL_IsReady+0x1a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_RCC_PLL_IsReady+0x1c>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	40021000 	.word	0x40021000

080022b8 <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Set HSION bit and wait for HSI READY bit */
  LL_RCC_HSI_Enable();
 80022bc:	f7ff ffb0 	bl	8002220 <LL_RCC_HSI_Enable>
  while (LL_RCC_HSI_IsReady() != 1U)
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	f7ff ffbb 	bl	800223c <LL_RCC_HSI_IsReady>
 80022c6:	0003      	movs	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1fa      	bne.n	80022c2 <LL_RCC_DeInit+0xa>
  {}

  /* Set HSITRIM bits to reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x40U);
 80022cc:	2040      	movs	r0, #64	@ 0x40
 80022ce:	f7ff ffc9 	bl	8002264 <LL_RCC_HSI_SetCalibTrimming>

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <LL_RCC_DeInit+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]

  /* Reset whole CR register but HSI in 2 steps in case HSEBYP is set */
  LL_RCC_WriteReg(CR, RCC_CR_HSION);
 80022d8:	4b10      	ldr	r3, [pc, #64]	@ (800231c <LL_RCC_DeInit+0x64>)
 80022da:	2280      	movs	r2, #128	@ 0x80
 80022dc:	0052      	lsls	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
  while (LL_RCC_HSE_IsReady() != 0U)
 80022e0:	46c0      	nop			@ (mov r8, r8)
 80022e2:	f7ff ff89 	bl	80021f8 <LL_RCC_HSE_IsReady>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d1fb      	bne.n	80022e2 <LL_RCC_DeInit+0x2a>
  {}
  LL_RCC_WriteReg(CR, RCC_CR_HSION);
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <LL_RCC_DeInit+0x64>)
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	0052      	lsls	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Wait for PLL READY bit to be reset */
  while (LL_RCC_PLL_IsReady() != 0U)
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	f7ff ffcc 	bl	8002290 <LL_RCC_PLL_IsReady>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d1fb      	bne.n	80022f4 <LL_RCC_DeInit+0x3c>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, 16U << RCC_PLLCFGR_PLLN_Pos);
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <LL_RCC_DeInit+0x64>)
 80022fe:	2280      	movs	r2, #128	@ 0x80
 8002300:	0152      	lsls	r2, r2, #5
 8002302:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  LL_RCC_WriteReg(CIER, 0x00000000U);
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <LL_RCC_DeInit+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]

  /* Clear all interrupts flags */
  LL_RCC_WriteReg(CICR, 0xFFFFFFFFU);
 800230a:	4b04      	ldr	r3, [pc, #16]	@ (800231c <LL_RCC_DeInit+0x64>)
 800230c:	2201      	movs	r2, #1
 800230e:	4252      	negs	r2, r2
 8002310:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	40021000 	.word	0x40021000

08002320 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002328:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <LL_mDelay+0x44>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60bb      	str	r3, [r7, #8]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800232e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	d00c      	beq.n	8002354 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3301      	adds	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e008      	b.n	8002354 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <LL_mDelay+0x44>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	@ 0x80
 8002348:	025b      	lsls	r3, r3, #9
 800234a:	4013      	ands	r3, r2
 800234c:	d002      	beq.n	8002354 <LL_mDelay+0x34>
    {
      tmpDelay --;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3b01      	subs	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f3      	bne.n	8002342 <LL_mDelay+0x22>
    }
  }
}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b004      	add	sp, #16
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000e010 	.word	0xe000e010

08002368 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002370:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <LL_SetSystemCoreClock+0x18>)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b002      	add	sp, #8
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	20000000 	.word	0x20000000

08002384 <memset>:
 8002384:	0003      	movs	r3, r0
 8002386:	1882      	adds	r2, r0, r2
 8002388:	4293      	cmp	r3, r2
 800238a:	d100      	bne.n	800238e <memset+0xa>
 800238c:	4770      	bx	lr
 800238e:	7019      	strb	r1, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	e7f9      	b.n	8002388 <memset+0x4>

08002394 <__libc_init_array>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	2600      	movs	r6, #0
 8002398:	4c0c      	ldr	r4, [pc, #48]	@ (80023cc <__libc_init_array+0x38>)
 800239a:	4d0d      	ldr	r5, [pc, #52]	@ (80023d0 <__libc_init_array+0x3c>)
 800239c:	1b64      	subs	r4, r4, r5
 800239e:	10a4      	asrs	r4, r4, #2
 80023a0:	42a6      	cmp	r6, r4
 80023a2:	d109      	bne.n	80023b8 <__libc_init_array+0x24>
 80023a4:	2600      	movs	r6, #0
 80023a6:	f000 f819 	bl	80023dc <_init>
 80023aa:	4c0a      	ldr	r4, [pc, #40]	@ (80023d4 <__libc_init_array+0x40>)
 80023ac:	4d0a      	ldr	r5, [pc, #40]	@ (80023d8 <__libc_init_array+0x44>)
 80023ae:	1b64      	subs	r4, r4, r5
 80023b0:	10a4      	asrs	r4, r4, #2
 80023b2:	42a6      	cmp	r6, r4
 80023b4:	d105      	bne.n	80023c2 <__libc_init_array+0x2e>
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
 80023b8:	00b3      	lsls	r3, r6, #2
 80023ba:	58eb      	ldr	r3, [r5, r3]
 80023bc:	4798      	blx	r3
 80023be:	3601      	adds	r6, #1
 80023c0:	e7ee      	b.n	80023a0 <__libc_init_array+0xc>
 80023c2:	00b3      	lsls	r3, r6, #2
 80023c4:	58eb      	ldr	r3, [r5, r3]
 80023c6:	4798      	blx	r3
 80023c8:	3601      	adds	r6, #1
 80023ca:	e7f2      	b.n	80023b2 <__libc_init_array+0x1e>
 80023cc:	08002408 	.word	0x08002408
 80023d0:	08002408 	.word	0x08002408
 80023d4:	0800240c 	.word	0x0800240c
 80023d8:	08002408 	.word	0x08002408

080023dc <_init>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr

080023e8 <_fini>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr
 80023f4:	0000      	movs	r0, r0
	...

080023f8 <__FLASH_Program_Fast_veneer>:
 80023f8:	b401      	push	{r0}
 80023fa:	4802      	ldr	r0, [pc, #8]	@ (8002404 <__FLASH_Program_Fast_veneer+0xc>)
 80023fc:	4684      	mov	ip, r0
 80023fe:	bc01      	pop	{r0}
 8002400:	4760      	bx	ip
 8002402:	bf00      	nop
 8002404:	2000000d 	.word	0x2000000d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000000c:	b580      	push	{r7, lr}
2000000e:	b088      	sub	sp, #32
20000010:	af00      	add	r7, sp, #0
20000012:	6078      	str	r0, [r7, #4]
20000014:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000016:	231f      	movs	r3, #31
20000018:	18fb      	adds	r3, r7, r3
2000001a:	2200      	movs	r2, #0
2000001c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000026:	4b1a      	ldr	r3, [pc, #104]	@ (20000090 <FLASH_Program_Fast+0x84>)
20000028:	695a      	ldr	r2, [r3, #20]
2000002a:	4b19      	ldr	r3, [pc, #100]	@ (20000090 <FLASH_Program_Fast+0x84>)
2000002c:	2180      	movs	r1, #128	@ 0x80
2000002e:	02c9      	lsls	r1, r1, #11
20000030:	430a      	orrs	r2, r1
20000032:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000034:	f3ef 8310 	mrs	r3, PRIMASK
20000038:	60fb      	str	r3, [r7, #12]
  return(result);
2000003a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000003c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000003e:	b672      	cpsid	i
}
20000040:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000042:	e00f      	b.n	20000064 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000044:	697a      	ldr	r2, [r7, #20]
20000046:	69bb      	ldr	r3, [r7, #24]
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000004c:	697b      	ldr	r3, [r7, #20]
2000004e:	3304      	adds	r3, #4
20000050:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000052:	69bb      	ldr	r3, [r7, #24]
20000054:	3304      	adds	r3, #4
20000056:	61bb      	str	r3, [r7, #24]
    index++;
20000058:	211f      	movs	r1, #31
2000005a:	187b      	adds	r3, r7, r1
2000005c:	781a      	ldrb	r2, [r3, #0]
2000005e:	187b      	adds	r3, r7, r1
20000060:	3201      	adds	r2, #1
20000062:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000064:	231f      	movs	r3, #31
20000066:	18fb      	adds	r3, r7, r3
20000068:	781b      	ldrb	r3, [r3, #0]
2000006a:	2b3f      	cmp	r3, #63	@ 0x3f
2000006c:	d9ea      	bls.n	20000044 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000006e:	46c0      	nop			@ (mov r8, r8)
20000070:	4b07      	ldr	r3, [pc, #28]	@ (20000090 <FLASH_Program_Fast+0x84>)
20000072:	691a      	ldr	r2, [r3, #16]
20000074:	2380      	movs	r3, #128	@ 0x80
20000076:	025b      	lsls	r3, r3, #9
20000078:	4013      	ands	r3, r2
2000007a:	d1f9      	bne.n	20000070 <FLASH_Program_Fast+0x64>
2000007c:	693b      	ldr	r3, [r7, #16]
2000007e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000080:	68bb      	ldr	r3, [r7, #8]
20000082:	f383 8810 	msr	PRIMASK, r3
}
20000086:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000088:	46c0      	nop			@ (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b008      	add	sp, #32
2000008e:	bd80      	pop	{r7, pc}
20000090:	40022000 	.word	0x40022000
