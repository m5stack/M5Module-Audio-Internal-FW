
Module_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08001800  08001800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006010  080018b8  080018b8  000008b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080078c8  080078c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  00007154  2**0
                  CONTENTS
  4 .ARM          00000000  08007aa0  08007aa0  00007154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007aa0  08007aa0  00007154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa0  08007aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007aa4  08007aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  200000c0  08007aa8  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000570  20000154  08007b3c  00007154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08007b3c  000076c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a022  00000000  00000000  0000717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b45  00000000  00000000  0001119e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00013ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000925  00000000  00000000  00014968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017609  00000000  00000000  0001528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b9  00000000  00000000  0002c896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c00  00000000  00000000  0003b04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0c4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c20  00000000  00000000  000c0c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c38b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080018b8 <__do_global_dtors_aux>:
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4c06      	ldr	r4, [pc, #24]	@ (80018d4 <__do_global_dtors_aux+0x1c>)
 80018bc:	7823      	ldrb	r3, [r4, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <__do_global_dtors_aux+0x1a>
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <__do_global_dtors_aux+0x20>)
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <__do_global_dtors_aux+0x16>
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <__do_global_dtors_aux+0x24>)
 80018ca:	e000      	b.n	80018ce <__do_global_dtors_aux+0x16>
 80018cc:	bf00      	nop
 80018ce:	2301      	movs	r3, #1
 80018d0:	7023      	strb	r3, [r4, #0]
 80018d2:	bd10      	pop	{r4, pc}
 80018d4:	20000154 	.word	0x20000154
 80018d8:	00000000 	.word	0x00000000
 80018dc:	080078a0 	.word	0x080078a0

080018e0 <frame_dummy>:
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <frame_dummy+0x14>)
 80018e2:	b510      	push	{r4, lr}
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <frame_dummy+0x10>
 80018e8:	4903      	ldr	r1, [pc, #12]	@ (80018f8 <frame_dummy+0x18>)
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <frame_dummy+0x1c>)
 80018ec:	e000      	b.n	80018f0 <frame_dummy+0x10>
 80018ee:	bf00      	nop
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	00000000 	.word	0x00000000
 80018f8:	20000158 	.word	0x20000158
 80018fc:	080078a0 	.word	0x080078a0

08001900 <__udivsi3>:
 8001900:	2200      	movs	r2, #0
 8001902:	0843      	lsrs	r3, r0, #1
 8001904:	428b      	cmp	r3, r1
 8001906:	d374      	bcc.n	80019f2 <__udivsi3+0xf2>
 8001908:	0903      	lsrs	r3, r0, #4
 800190a:	428b      	cmp	r3, r1
 800190c:	d35f      	bcc.n	80019ce <__udivsi3+0xce>
 800190e:	0a03      	lsrs	r3, r0, #8
 8001910:	428b      	cmp	r3, r1
 8001912:	d344      	bcc.n	800199e <__udivsi3+0x9e>
 8001914:	0b03      	lsrs	r3, r0, #12
 8001916:	428b      	cmp	r3, r1
 8001918:	d328      	bcc.n	800196c <__udivsi3+0x6c>
 800191a:	0c03      	lsrs	r3, r0, #16
 800191c:	428b      	cmp	r3, r1
 800191e:	d30d      	bcc.n	800193c <__udivsi3+0x3c>
 8001920:	22ff      	movs	r2, #255	@ 0xff
 8001922:	0209      	lsls	r1, r1, #8
 8001924:	ba12      	rev	r2, r2
 8001926:	0c03      	lsrs	r3, r0, #16
 8001928:	428b      	cmp	r3, r1
 800192a:	d302      	bcc.n	8001932 <__udivsi3+0x32>
 800192c:	1212      	asrs	r2, r2, #8
 800192e:	0209      	lsls	r1, r1, #8
 8001930:	d065      	beq.n	80019fe <__udivsi3+0xfe>
 8001932:	0b03      	lsrs	r3, r0, #12
 8001934:	428b      	cmp	r3, r1
 8001936:	d319      	bcc.n	800196c <__udivsi3+0x6c>
 8001938:	e000      	b.n	800193c <__udivsi3+0x3c>
 800193a:	0a09      	lsrs	r1, r1, #8
 800193c:	0bc3      	lsrs	r3, r0, #15
 800193e:	428b      	cmp	r3, r1
 8001940:	d301      	bcc.n	8001946 <__udivsi3+0x46>
 8001942:	03cb      	lsls	r3, r1, #15
 8001944:	1ac0      	subs	r0, r0, r3
 8001946:	4152      	adcs	r2, r2
 8001948:	0b83      	lsrs	r3, r0, #14
 800194a:	428b      	cmp	r3, r1
 800194c:	d301      	bcc.n	8001952 <__udivsi3+0x52>
 800194e:	038b      	lsls	r3, r1, #14
 8001950:	1ac0      	subs	r0, r0, r3
 8001952:	4152      	adcs	r2, r2
 8001954:	0b43      	lsrs	r3, r0, #13
 8001956:	428b      	cmp	r3, r1
 8001958:	d301      	bcc.n	800195e <__udivsi3+0x5e>
 800195a:	034b      	lsls	r3, r1, #13
 800195c:	1ac0      	subs	r0, r0, r3
 800195e:	4152      	adcs	r2, r2
 8001960:	0b03      	lsrs	r3, r0, #12
 8001962:	428b      	cmp	r3, r1
 8001964:	d301      	bcc.n	800196a <__udivsi3+0x6a>
 8001966:	030b      	lsls	r3, r1, #12
 8001968:	1ac0      	subs	r0, r0, r3
 800196a:	4152      	adcs	r2, r2
 800196c:	0ac3      	lsrs	r3, r0, #11
 800196e:	428b      	cmp	r3, r1
 8001970:	d301      	bcc.n	8001976 <__udivsi3+0x76>
 8001972:	02cb      	lsls	r3, r1, #11
 8001974:	1ac0      	subs	r0, r0, r3
 8001976:	4152      	adcs	r2, r2
 8001978:	0a83      	lsrs	r3, r0, #10
 800197a:	428b      	cmp	r3, r1
 800197c:	d301      	bcc.n	8001982 <__udivsi3+0x82>
 800197e:	028b      	lsls	r3, r1, #10
 8001980:	1ac0      	subs	r0, r0, r3
 8001982:	4152      	adcs	r2, r2
 8001984:	0a43      	lsrs	r3, r0, #9
 8001986:	428b      	cmp	r3, r1
 8001988:	d301      	bcc.n	800198e <__udivsi3+0x8e>
 800198a:	024b      	lsls	r3, r1, #9
 800198c:	1ac0      	subs	r0, r0, r3
 800198e:	4152      	adcs	r2, r2
 8001990:	0a03      	lsrs	r3, r0, #8
 8001992:	428b      	cmp	r3, r1
 8001994:	d301      	bcc.n	800199a <__udivsi3+0x9a>
 8001996:	020b      	lsls	r3, r1, #8
 8001998:	1ac0      	subs	r0, r0, r3
 800199a:	4152      	adcs	r2, r2
 800199c:	d2cd      	bcs.n	800193a <__udivsi3+0x3a>
 800199e:	09c3      	lsrs	r3, r0, #7
 80019a0:	428b      	cmp	r3, r1
 80019a2:	d301      	bcc.n	80019a8 <__udivsi3+0xa8>
 80019a4:	01cb      	lsls	r3, r1, #7
 80019a6:	1ac0      	subs	r0, r0, r3
 80019a8:	4152      	adcs	r2, r2
 80019aa:	0983      	lsrs	r3, r0, #6
 80019ac:	428b      	cmp	r3, r1
 80019ae:	d301      	bcc.n	80019b4 <__udivsi3+0xb4>
 80019b0:	018b      	lsls	r3, r1, #6
 80019b2:	1ac0      	subs	r0, r0, r3
 80019b4:	4152      	adcs	r2, r2
 80019b6:	0943      	lsrs	r3, r0, #5
 80019b8:	428b      	cmp	r3, r1
 80019ba:	d301      	bcc.n	80019c0 <__udivsi3+0xc0>
 80019bc:	014b      	lsls	r3, r1, #5
 80019be:	1ac0      	subs	r0, r0, r3
 80019c0:	4152      	adcs	r2, r2
 80019c2:	0903      	lsrs	r3, r0, #4
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d301      	bcc.n	80019cc <__udivsi3+0xcc>
 80019c8:	010b      	lsls	r3, r1, #4
 80019ca:	1ac0      	subs	r0, r0, r3
 80019cc:	4152      	adcs	r2, r2
 80019ce:	08c3      	lsrs	r3, r0, #3
 80019d0:	428b      	cmp	r3, r1
 80019d2:	d301      	bcc.n	80019d8 <__udivsi3+0xd8>
 80019d4:	00cb      	lsls	r3, r1, #3
 80019d6:	1ac0      	subs	r0, r0, r3
 80019d8:	4152      	adcs	r2, r2
 80019da:	0883      	lsrs	r3, r0, #2
 80019dc:	428b      	cmp	r3, r1
 80019de:	d301      	bcc.n	80019e4 <__udivsi3+0xe4>
 80019e0:	008b      	lsls	r3, r1, #2
 80019e2:	1ac0      	subs	r0, r0, r3
 80019e4:	4152      	adcs	r2, r2
 80019e6:	0843      	lsrs	r3, r0, #1
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d301      	bcc.n	80019f0 <__udivsi3+0xf0>
 80019ec:	004b      	lsls	r3, r1, #1
 80019ee:	1ac0      	subs	r0, r0, r3
 80019f0:	4152      	adcs	r2, r2
 80019f2:	1a41      	subs	r1, r0, r1
 80019f4:	d200      	bcs.n	80019f8 <__udivsi3+0xf8>
 80019f6:	4601      	mov	r1, r0
 80019f8:	4152      	adcs	r2, r2
 80019fa:	4610      	mov	r0, r2
 80019fc:	4770      	bx	lr
 80019fe:	e7ff      	b.n	8001a00 <__udivsi3+0x100>
 8001a00:	b501      	push	{r0, lr}
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f806 	bl	8001a14 <__aeabi_idiv0>
 8001a08:	bd02      	pop	{r1, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)

08001a0c <__aeabi_uidivmod>:
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d0f7      	beq.n	8001a00 <__udivsi3+0x100>
 8001a10:	e776      	b.n	8001900 <__udivsi3>
 8001a12:	4770      	bx	lr

08001a14 <__aeabi_idiv0>:
 8001a14:	4770      	bx	lr
 8001a16:	46c0      	nop			@ (mov r8, r8)

08001a18 <__aeabi_d2uiz>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <__aeabi_d2uiz+0x38>)
 8001a1e:	0004      	movs	r4, r0
 8001a20:	000d      	movs	r5, r1
 8001a22:	f001 fa33 	bl	8002e8c <__aeabi_dcmpge>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d104      	bne.n	8001a34 <__aeabi_d2uiz+0x1c>
 8001a2a:	0020      	movs	r0, r4
 8001a2c:	0029      	movs	r1, r5
 8001a2e:	f001 f98f 	bl	8002d50 <__aeabi_d2iz>
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <__aeabi_d2uiz+0x38>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	0020      	movs	r0, r4
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	f000 fdec 	bl	8002618 <__aeabi_dsub>
 8001a40:	f001 f986 	bl	8002d50 <__aeabi_d2iz>
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	469c      	mov	ip, r3
 8001a4a:	4460      	add	r0, ip
 8001a4c:	e7f1      	b.n	8001a32 <__aeabi_d2uiz+0x1a>
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	41e00000 	.word	0x41e00000

08001a54 <__aeabi_ddiv>:
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	46de      	mov	lr, fp
 8001a58:	4645      	mov	r5, r8
 8001a5a:	4657      	mov	r7, sl
 8001a5c:	464e      	mov	r6, r9
 8001a5e:	b5e0      	push	{r5, r6, r7, lr}
 8001a60:	b087      	sub	sp, #28
 8001a62:	9200      	str	r2, [sp, #0]
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	030b      	lsls	r3, r1, #12
 8001a68:	0b1b      	lsrs	r3, r3, #12
 8001a6a:	469b      	mov	fp, r3
 8001a6c:	0fca      	lsrs	r2, r1, #31
 8001a6e:	004b      	lsls	r3, r1, #1
 8001a70:	0004      	movs	r4, r0
 8001a72:	4680      	mov	r8, r0
 8001a74:	0d5b      	lsrs	r3, r3, #21
 8001a76:	9202      	str	r2, [sp, #8]
 8001a78:	d100      	bne.n	8001a7c <__aeabi_ddiv+0x28>
 8001a7a:	e16a      	b.n	8001d52 <__aeabi_ddiv+0x2fe>
 8001a7c:	4ad4      	ldr	r2, [pc, #848]	@ (8001dd0 <__aeabi_ddiv+0x37c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d100      	bne.n	8001a84 <__aeabi_ddiv+0x30>
 8001a82:	e18c      	b.n	8001d9e <__aeabi_ddiv+0x34a>
 8001a84:	4659      	mov	r1, fp
 8001a86:	0f42      	lsrs	r2, r0, #29
 8001a88:	00c9      	lsls	r1, r1, #3
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	0409      	lsls	r1, r1, #16
 8001a90:	4311      	orrs	r1, r2
 8001a92:	00c2      	lsls	r2, r0, #3
 8001a94:	4690      	mov	r8, r2
 8001a96:	4acf      	ldr	r2, [pc, #828]	@ (8001dd4 <__aeabi_ddiv+0x380>)
 8001a98:	4689      	mov	r9, r1
 8001a9a:	4692      	mov	sl, r2
 8001a9c:	449a      	add	sl, r3
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	9303      	str	r3, [sp, #12]
 8001aa4:	9e00      	ldr	r6, [sp, #0]
 8001aa6:	9f01      	ldr	r7, [sp, #4]
 8001aa8:	033b      	lsls	r3, r7, #12
 8001aaa:	0b1b      	lsrs	r3, r3, #12
 8001aac:	469b      	mov	fp, r3
 8001aae:	007b      	lsls	r3, r7, #1
 8001ab0:	0030      	movs	r0, r6
 8001ab2:	0d5b      	lsrs	r3, r3, #21
 8001ab4:	0ffd      	lsrs	r5, r7, #31
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x68>
 8001aba:	e128      	b.n	8001d0e <__aeabi_ddiv+0x2ba>
 8001abc:	4ac4      	ldr	r2, [pc, #784]	@ (8001dd0 <__aeabi_ddiv+0x37c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x70>
 8001ac2:	e177      	b.n	8001db4 <__aeabi_ddiv+0x360>
 8001ac4:	4659      	mov	r1, fp
 8001ac6:	0f72      	lsrs	r2, r6, #29
 8001ac8:	00c9      	lsls	r1, r1, #3
 8001aca:	430a      	orrs	r2, r1
 8001acc:	2180      	movs	r1, #128	@ 0x80
 8001ace:	0409      	lsls	r1, r1, #16
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	468b      	mov	fp, r1
 8001ad4:	49bf      	ldr	r1, [pc, #764]	@ (8001dd4 <__aeabi_ddiv+0x380>)
 8001ad6:	00f2      	lsls	r2, r6, #3
 8001ad8:	468c      	mov	ip, r1
 8001ada:	4651      	mov	r1, sl
 8001adc:	4463      	add	r3, ip
 8001ade:	1acb      	subs	r3, r1, r3
 8001ae0:	469a      	mov	sl, r3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9e02      	ldr	r6, [sp, #8]
 8001ae6:	406e      	eors	r6, r5
 8001ae8:	2c0f      	cmp	r4, #15
 8001aea:	d827      	bhi.n	8001b3c <__aeabi_ddiv+0xe8>
 8001aec:	49ba      	ldr	r1, [pc, #744]	@ (8001dd8 <__aeabi_ddiv+0x384>)
 8001aee:	00a4      	lsls	r4, r4, #2
 8001af0:	5909      	ldr	r1, [r1, r4]
 8001af2:	468f      	mov	pc, r1
 8001af4:	46cb      	mov	fp, r9
 8001af6:	4642      	mov	r2, r8
 8001af8:	9e02      	ldr	r6, [sp, #8]
 8001afa:	9b03      	ldr	r3, [sp, #12]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d016      	beq.n	8001b2e <__aeabi_ddiv+0xda>
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0xb2>
 8001b04:	e2a6      	b.n	8002054 <__aeabi_ddiv+0x600>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d000      	beq.n	8001b0c <__aeabi_ddiv+0xb8>
 8001b0a:	e0df      	b.n	8001ccc <__aeabi_ddiv+0x278>
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2400      	movs	r4, #0
 8001b12:	4690      	mov	r8, r2
 8001b14:	051b      	lsls	r3, r3, #20
 8001b16:	4323      	orrs	r3, r4
 8001b18:	07f6      	lsls	r6, r6, #31
 8001b1a:	4333      	orrs	r3, r6
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	0019      	movs	r1, r3
 8001b20:	b007      	add	sp, #28
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2400      	movs	r4, #0
 8001b32:	4690      	mov	r8, r2
 8001b34:	4ba6      	ldr	r3, [pc, #664]	@ (8001dd0 <__aeabi_ddiv+0x37c>)
 8001b36:	e7ed      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001b38:	002e      	movs	r6, r5
 8001b3a:	e7df      	b.n	8001afc <__aeabi_ddiv+0xa8>
 8001b3c:	45cb      	cmp	fp, r9
 8001b3e:	d200      	bcs.n	8001b42 <__aeabi_ddiv+0xee>
 8001b40:	e1d4      	b.n	8001eec <__aeabi_ddiv+0x498>
 8001b42:	d100      	bne.n	8001b46 <__aeabi_ddiv+0xf2>
 8001b44:	e1cf      	b.n	8001ee6 <__aeabi_ddiv+0x492>
 8001b46:	2301      	movs	r3, #1
 8001b48:	425b      	negs	r3, r3
 8001b4a:	469c      	mov	ip, r3
 8001b4c:	4644      	mov	r4, r8
 8001b4e:	4648      	mov	r0, r9
 8001b50:	2700      	movs	r7, #0
 8001b52:	44e2      	add	sl, ip
 8001b54:	465b      	mov	r3, fp
 8001b56:	0e15      	lsrs	r5, r2, #24
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	431d      	orrs	r5, r3
 8001b5c:	0c19      	lsrs	r1, r3, #16
 8001b5e:	042b      	lsls	r3, r5, #16
 8001b60:	0212      	lsls	r2, r2, #8
 8001b62:	9500      	str	r5, [sp, #0]
 8001b64:	0c1d      	lsrs	r5, r3, #16
 8001b66:	4691      	mov	r9, r2
 8001b68:	9102      	str	r1, [sp, #8]
 8001b6a:	9503      	str	r5, [sp, #12]
 8001b6c:	f7ff ff4e 	bl	8001a0c <__aeabi_uidivmod>
 8001b70:	0002      	movs	r2, r0
 8001b72:	436a      	muls	r2, r5
 8001b74:	040b      	lsls	r3, r1, #16
 8001b76:	0c21      	lsrs	r1, r4, #16
 8001b78:	4680      	mov	r8, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	428a      	cmp	r2, r1
 8001b7e:	d909      	bls.n	8001b94 <__aeabi_ddiv+0x140>
 8001b80:	9d00      	ldr	r5, [sp, #0]
 8001b82:	2301      	movs	r3, #1
 8001b84:	46ac      	mov	ip, r5
 8001b86:	425b      	negs	r3, r3
 8001b88:	4461      	add	r1, ip
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	44e0      	add	r8, ip
 8001b8e:	428d      	cmp	r5, r1
 8001b90:	d800      	bhi.n	8001b94 <__aeabi_ddiv+0x140>
 8001b92:	e1fb      	b.n	8001f8c <__aeabi_ddiv+0x538>
 8001b94:	1a88      	subs	r0, r1, r2
 8001b96:	9902      	ldr	r1, [sp, #8]
 8001b98:	f7ff ff38 	bl	8001a0c <__aeabi_uidivmod>
 8001b9c:	9a03      	ldr	r2, [sp, #12]
 8001b9e:	0424      	lsls	r4, r4, #16
 8001ba0:	4342      	muls	r2, r0
 8001ba2:	0409      	lsls	r1, r1, #16
 8001ba4:	0c24      	lsrs	r4, r4, #16
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	430c      	orrs	r4, r1
 8001baa:	42a2      	cmp	r2, r4
 8001bac:	d906      	bls.n	8001bbc <__aeabi_ddiv+0x168>
 8001bae:	9900      	ldr	r1, [sp, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	468c      	mov	ip, r1
 8001bb4:	4464      	add	r4, ip
 8001bb6:	42a1      	cmp	r1, r4
 8001bb8:	d800      	bhi.n	8001bbc <__aeabi_ddiv+0x168>
 8001bba:	e1e1      	b.n	8001f80 <__aeabi_ddiv+0x52c>
 8001bbc:	1aa0      	subs	r0, r4, r2
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	0412      	lsls	r2, r2, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	4693      	mov	fp, r2
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	4659      	mov	r1, fp
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	001d      	movs	r5, r3
 8001bce:	9304      	str	r3, [sp, #16]
 8001bd0:	040b      	lsls	r3, r1, #16
 8001bd2:	4649      	mov	r1, r9
 8001bd4:	0409      	lsls	r1, r1, #16
 8001bd6:	0c09      	lsrs	r1, r1, #16
 8001bd8:	000c      	movs	r4, r1
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	435c      	muls	r4, r3
 8001bde:	0c12      	lsrs	r2, r2, #16
 8001be0:	436b      	muls	r3, r5
 8001be2:	4688      	mov	r8, r1
 8001be4:	4351      	muls	r1, r2
 8001be6:	436a      	muls	r2, r5
 8001be8:	0c25      	lsrs	r5, r4, #16
 8001bea:	46ac      	mov	ip, r5
 8001bec:	185b      	adds	r3, r3, r1
 8001bee:	4463      	add	r3, ip
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	d903      	bls.n	8001bfc <__aeabi_ddiv+0x1a8>
 8001bf4:	2180      	movs	r1, #128	@ 0x80
 8001bf6:	0249      	lsls	r1, r1, #9
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4462      	add	r2, ip
 8001bfc:	0c19      	lsrs	r1, r3, #16
 8001bfe:	0424      	lsls	r4, r4, #16
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	188a      	adds	r2, r1, r2
 8001c06:	191c      	adds	r4, r3, r4
 8001c08:	4290      	cmp	r0, r2
 8001c0a:	d302      	bcc.n	8001c12 <__aeabi_ddiv+0x1be>
 8001c0c:	d116      	bne.n	8001c3c <__aeabi_ddiv+0x1e8>
 8001c0e:	42a7      	cmp	r7, r4
 8001c10:	d214      	bcs.n	8001c3c <__aeabi_ddiv+0x1e8>
 8001c12:	465b      	mov	r3, fp
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	444f      	add	r7, r9
 8001c1a:	9305      	str	r3, [sp, #20]
 8001c1c:	454f      	cmp	r7, r9
 8001c1e:	419b      	sbcs	r3, r3
 8001c20:	46ac      	mov	ip, r5
 8001c22:	425b      	negs	r3, r3
 8001c24:	4463      	add	r3, ip
 8001c26:	18c0      	adds	r0, r0, r3
 8001c28:	4285      	cmp	r5, r0
 8001c2a:	d300      	bcc.n	8001c2e <__aeabi_ddiv+0x1da>
 8001c2c:	e1a1      	b.n	8001f72 <__aeabi_ddiv+0x51e>
 8001c2e:	4282      	cmp	r2, r0
 8001c30:	d900      	bls.n	8001c34 <__aeabi_ddiv+0x1e0>
 8001c32:	e1f6      	b.n	8002022 <__aeabi_ddiv+0x5ce>
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x1e4>
 8001c36:	e1f1      	b.n	800201c <__aeabi_ddiv+0x5c8>
 8001c38:	9b05      	ldr	r3, [sp, #20]
 8001c3a:	469b      	mov	fp, r3
 8001c3c:	1b3c      	subs	r4, r7, r4
 8001c3e:	42a7      	cmp	r7, r4
 8001c40:	41bf      	sbcs	r7, r7
 8001c42:	9d00      	ldr	r5, [sp, #0]
 8001c44:	1a80      	subs	r0, r0, r2
 8001c46:	427f      	negs	r7, r7
 8001c48:	1bc0      	subs	r0, r0, r7
 8001c4a:	4285      	cmp	r5, r0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_ddiv+0x1fc>
 8001c4e:	e1d0      	b.n	8001ff2 <__aeabi_ddiv+0x59e>
 8001c50:	9902      	ldr	r1, [sp, #8]
 8001c52:	f7ff fedb 	bl	8001a0c <__aeabi_uidivmod>
 8001c56:	9a03      	ldr	r2, [sp, #12]
 8001c58:	040b      	lsls	r3, r1, #16
 8001c5a:	4342      	muls	r2, r0
 8001c5c:	0c21      	lsrs	r1, r4, #16
 8001c5e:	0007      	movs	r7, r0
 8001c60:	4319      	orrs	r1, r3
 8001c62:	428a      	cmp	r2, r1
 8001c64:	d900      	bls.n	8001c68 <__aeabi_ddiv+0x214>
 8001c66:	e178      	b.n	8001f5a <__aeabi_ddiv+0x506>
 8001c68:	1a88      	subs	r0, r1, r2
 8001c6a:	9902      	ldr	r1, [sp, #8]
 8001c6c:	f7ff fece 	bl	8001a0c <__aeabi_uidivmod>
 8001c70:	9a03      	ldr	r2, [sp, #12]
 8001c72:	0424      	lsls	r4, r4, #16
 8001c74:	4342      	muls	r2, r0
 8001c76:	0409      	lsls	r1, r1, #16
 8001c78:	0c24      	lsrs	r4, r4, #16
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	430c      	orrs	r4, r1
 8001c7e:	42a2      	cmp	r2, r4
 8001c80:	d900      	bls.n	8001c84 <__aeabi_ddiv+0x230>
 8001c82:	e15d      	b.n	8001f40 <__aeabi_ddiv+0x4ec>
 8001c84:	4641      	mov	r1, r8
 8001c86:	1aa4      	subs	r4, r4, r2
 8001c88:	043a      	lsls	r2, r7, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	9d04      	ldr	r5, [sp, #16]
 8001c8e:	0413      	lsls	r3, r2, #16
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	4359      	muls	r1, r3
 8001c94:	4647      	mov	r7, r8
 8001c96:	436b      	muls	r3, r5
 8001c98:	469c      	mov	ip, r3
 8001c9a:	0c10      	lsrs	r0, r2, #16
 8001c9c:	4347      	muls	r7, r0
 8001c9e:	0c0b      	lsrs	r3, r1, #16
 8001ca0:	44bc      	add	ip, r7
 8001ca2:	4463      	add	r3, ip
 8001ca4:	4368      	muls	r0, r5
 8001ca6:	429f      	cmp	r7, r3
 8001ca8:	d903      	bls.n	8001cb2 <__aeabi_ddiv+0x25e>
 8001caa:	2580      	movs	r5, #128	@ 0x80
 8001cac:	026d      	lsls	r5, r5, #9
 8001cae:	46ac      	mov	ip, r5
 8001cb0:	4460      	add	r0, ip
 8001cb2:	0c1f      	lsrs	r7, r3, #16
 8001cb4:	0409      	lsls	r1, r1, #16
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	0c09      	lsrs	r1, r1, #16
 8001cba:	183f      	adds	r7, r7, r0
 8001cbc:	185b      	adds	r3, r3, r1
 8001cbe:	42bc      	cmp	r4, r7
 8001cc0:	d200      	bcs.n	8001cc4 <__aeabi_ddiv+0x270>
 8001cc2:	e102      	b.n	8001eca <__aeabi_ddiv+0x476>
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_ddiv+0x274>
 8001cc6:	e0fd      	b.n	8001ec4 <__aeabi_ddiv+0x470>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <__aeabi_ddiv+0x388>)
 8001cce:	4453      	add	r3, sl
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	dc00      	bgt.n	8001cd6 <__aeabi_ddiv+0x282>
 8001cd4:	e0ae      	b.n	8001e34 <__aeabi_ddiv+0x3e0>
 8001cd6:	0751      	lsls	r1, r2, #29
 8001cd8:	d000      	beq.n	8001cdc <__aeabi_ddiv+0x288>
 8001cda:	e198      	b.n	800200e <__aeabi_ddiv+0x5ba>
 8001cdc:	4659      	mov	r1, fp
 8001cde:	01c9      	lsls	r1, r1, #7
 8001ce0:	d506      	bpl.n	8001cf0 <__aeabi_ddiv+0x29c>
 8001ce2:	4659      	mov	r1, fp
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8001de0 <__aeabi_ddiv+0x38c>)
 8001ce6:	4019      	ands	r1, r3
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	468b      	mov	fp, r1
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4453      	add	r3, sl
 8001cf0:	493c      	ldr	r1, [pc, #240]	@ (8001de4 <__aeabi_ddiv+0x390>)
 8001cf2:	428b      	cmp	r3, r1
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_ddiv+0x2a4>
 8001cf6:	e71a      	b.n	8001b2e <__aeabi_ddiv+0xda>
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	08d2      	lsrs	r2, r2, #3
 8001cfc:	0749      	lsls	r1, r1, #29
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	465a      	mov	r2, fp
 8001d02:	055b      	lsls	r3, r3, #21
 8001d04:	0254      	lsls	r4, r2, #9
 8001d06:	4688      	mov	r8, r1
 8001d08:	0b24      	lsrs	r4, r4, #12
 8001d0a:	0d5b      	lsrs	r3, r3, #21
 8001d0c:	e702      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001d0e:	465a      	mov	r2, fp
 8001d10:	9b00      	ldr	r3, [sp, #0]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x2c4>
 8001d16:	e07e      	b.n	8001e16 <__aeabi_ddiv+0x3c2>
 8001d18:	465b      	mov	r3, fp
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x2cc>
 8001d1e:	e100      	b.n	8001f22 <__aeabi_ddiv+0x4ce>
 8001d20:	4658      	mov	r0, fp
 8001d22:	f001 f8bd 	bl	8002ea0 <__clzsi2>
 8001d26:	0002      	movs	r2, r0
 8001d28:	0003      	movs	r3, r0
 8001d2a:	3a0b      	subs	r2, #11
 8001d2c:	271d      	movs	r7, #29
 8001d2e:	9e00      	ldr	r6, [sp, #0]
 8001d30:	1aba      	subs	r2, r7, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	4658      	mov	r0, fp
 8001d36:	40d6      	lsrs	r6, r2
 8001d38:	3908      	subs	r1, #8
 8001d3a:	4088      	lsls	r0, r1
 8001d3c:	0032      	movs	r2, r6
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	4693      	mov	fp, r2
 8001d42:	9a00      	ldr	r2, [sp, #0]
 8001d44:	408a      	lsls	r2, r1
 8001d46:	4928      	ldr	r1, [pc, #160]	@ (8001de8 <__aeabi_ddiv+0x394>)
 8001d48:	4453      	add	r3, sl
 8001d4a:	468a      	mov	sl, r1
 8001d4c:	449a      	add	sl, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e6c8      	b.n	8001ae4 <__aeabi_ddiv+0x90>
 8001d52:	465b      	mov	r3, fp
 8001d54:	4303      	orrs	r3, r0
 8001d56:	4699      	mov	r9, r3
 8001d58:	d056      	beq.n	8001e08 <__aeabi_ddiv+0x3b4>
 8001d5a:	465b      	mov	r3, fp
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x30e>
 8001d60:	e0cd      	b.n	8001efe <__aeabi_ddiv+0x4aa>
 8001d62:	4658      	mov	r0, fp
 8001d64:	f001 f89c 	bl	8002ea0 <__clzsi2>
 8001d68:	230b      	movs	r3, #11
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	0002      	movs	r2, r0
 8001d70:	4484      	add	ip, r0
 8001d72:	4666      	mov	r6, ip
 8001d74:	231d      	movs	r3, #29
 8001d76:	1b9b      	subs	r3, r3, r6
 8001d78:	0026      	movs	r6, r4
 8001d7a:	0011      	movs	r1, r2
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	40de      	lsrs	r6, r3
 8001d80:	3908      	subs	r1, #8
 8001d82:	4088      	lsls	r0, r1
 8001d84:	0033      	movs	r3, r6
 8001d86:	4303      	orrs	r3, r0
 8001d88:	4699      	mov	r9, r3
 8001d8a:	0023      	movs	r3, r4
 8001d8c:	408b      	lsls	r3, r1
 8001d8e:	4698      	mov	r8, r3
 8001d90:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <__aeabi_ddiv+0x398>)
 8001d92:	2400      	movs	r4, #0
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	469a      	mov	sl, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	e682      	b.n	8001aa4 <__aeabi_ddiv+0x50>
 8001d9e:	465a      	mov	r2, fp
 8001da0:	4302      	orrs	r2, r0
 8001da2:	4691      	mov	r9, r2
 8001da4:	d12a      	bne.n	8001dfc <__aeabi_ddiv+0x3a8>
 8001da6:	2200      	movs	r2, #0
 8001da8:	469a      	mov	sl, r3
 8001daa:	2302      	movs	r3, #2
 8001dac:	4690      	mov	r8, r2
 8001dae:	2408      	movs	r4, #8
 8001db0:	9303      	str	r3, [sp, #12]
 8001db2:	e677      	b.n	8001aa4 <__aeabi_ddiv+0x50>
 8001db4:	465a      	mov	r2, fp
 8001db6:	9b00      	ldr	r3, [sp, #0]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <__aeabi_ddiv+0x39c>)
 8001dbc:	469c      	mov	ip, r3
 8001dbe:	44e2      	add	sl, ip
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d117      	bne.n	8001df4 <__aeabi_ddiv+0x3a0>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	431c      	orrs	r4, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	469b      	mov	fp, r3
 8001dcc:	3302      	adds	r3, #2
 8001dce:	e689      	b.n	8001ae4 <__aeabi_ddiv+0x90>
 8001dd0:	000007ff 	.word	0x000007ff
 8001dd4:	fffffc01 	.word	0xfffffc01
 8001dd8:	080078c8 	.word	0x080078c8
 8001ddc:	000003ff 	.word	0x000003ff
 8001de0:	feffffff 	.word	0xfeffffff
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	000003f3 	.word	0x000003f3
 8001dec:	fffffc0d 	.word	0xfffffc0d
 8001df0:	fffff801 	.word	0xfffff801
 8001df4:	2303      	movs	r3, #3
 8001df6:	0032      	movs	r2, r6
 8001df8:	431c      	orrs	r4, r3
 8001dfa:	e673      	b.n	8001ae4 <__aeabi_ddiv+0x90>
 8001dfc:	469a      	mov	sl, r3
 8001dfe:	2303      	movs	r3, #3
 8001e00:	46d9      	mov	r9, fp
 8001e02:	240c      	movs	r4, #12
 8001e04:	9303      	str	r3, [sp, #12]
 8001e06:	e64d      	b.n	8001aa4 <__aeabi_ddiv+0x50>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4698      	mov	r8, r3
 8001e0c:	469a      	mov	sl, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	2404      	movs	r4, #4
 8001e12:	9303      	str	r3, [sp, #12]
 8001e14:	e646      	b.n	8001aa4 <__aeabi_ddiv+0x50>
 8001e16:	2301      	movs	r3, #1
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	469b      	mov	fp, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	e660      	b.n	8001ae4 <__aeabi_ddiv+0x90>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2480      	movs	r4, #128	@ 0x80
 8001e26:	4698      	mov	r8, r3
 8001e28:	2600      	movs	r6, #0
 8001e2a:	4b92      	ldr	r3, [pc, #584]	@ (8002074 <__aeabi_ddiv+0x620>)
 8001e2c:	0324      	lsls	r4, r4, #12
 8001e2e:	e671      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001e30:	2201      	movs	r2, #1
 8001e32:	4252      	negs	r2, r2
 8001e34:	2101      	movs	r1, #1
 8001e36:	1ac9      	subs	r1, r1, r3
 8001e38:	2938      	cmp	r1, #56	@ 0x38
 8001e3a:	dd00      	ble.n	8001e3e <__aeabi_ddiv+0x3ea>
 8001e3c:	e666      	b.n	8001b0c <__aeabi_ddiv+0xb8>
 8001e3e:	291f      	cmp	r1, #31
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_ddiv+0x3f0>
 8001e42:	e0ab      	b.n	8001f9c <__aeabi_ddiv+0x548>
 8001e44:	201f      	movs	r0, #31
 8001e46:	4240      	negs	r0, r0
 8001e48:	1ac3      	subs	r3, r0, r3
 8001e4a:	4658      	mov	r0, fp
 8001e4c:	40d8      	lsrs	r0, r3
 8001e4e:	0003      	movs	r3, r0
 8001e50:	2920      	cmp	r1, #32
 8001e52:	d004      	beq.n	8001e5e <__aeabi_ddiv+0x40a>
 8001e54:	4658      	mov	r0, fp
 8001e56:	4988      	ldr	r1, [pc, #544]	@ (8002078 <__aeabi_ddiv+0x624>)
 8001e58:	4451      	add	r1, sl
 8001e5a:	4088      	lsls	r0, r1
 8001e5c:	4302      	orrs	r2, r0
 8001e5e:	1e51      	subs	r1, r2, #1
 8001e60:	418a      	sbcs	r2, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	2307      	movs	r3, #7
 8001e66:	0019      	movs	r1, r3
 8001e68:	2400      	movs	r4, #0
 8001e6a:	4011      	ands	r1, r2
 8001e6c:	4213      	tst	r3, r2
 8001e6e:	d00c      	beq.n	8001e8a <__aeabi_ddiv+0x436>
 8001e70:	230f      	movs	r3, #15
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d100      	bne.n	8001e7a <__aeabi_ddiv+0x426>
 8001e78:	e0f9      	b.n	800206e <__aeabi_ddiv+0x61a>
 8001e7a:	1d11      	adds	r1, r2, #4
 8001e7c:	4291      	cmp	r1, r2
 8001e7e:	419b      	sbcs	r3, r3
 8001e80:	000a      	movs	r2, r1
 8001e82:	425b      	negs	r3, r3
 8001e84:	0759      	lsls	r1, r3, #29
 8001e86:	025b      	lsls	r3, r3, #9
 8001e88:	0b1c      	lsrs	r4, r3, #12
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	4690      	mov	r8, r2
 8001e90:	2300      	movs	r3, #0
 8001e92:	e63f      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001e94:	2480      	movs	r4, #128	@ 0x80
 8001e96:	464b      	mov	r3, r9
 8001e98:	0324      	lsls	r4, r4, #12
 8001e9a:	4223      	tst	r3, r4
 8001e9c:	d009      	beq.n	8001eb2 <__aeabi_ddiv+0x45e>
 8001e9e:	465b      	mov	r3, fp
 8001ea0:	4223      	tst	r3, r4
 8001ea2:	d106      	bne.n	8001eb2 <__aeabi_ddiv+0x45e>
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	0324      	lsls	r4, r4, #12
 8001ea8:	002e      	movs	r6, r5
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4b71      	ldr	r3, [pc, #452]	@ (8002074 <__aeabi_ddiv+0x620>)
 8001eae:	0b24      	lsrs	r4, r4, #12
 8001eb0:	e630      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001eb2:	2480      	movs	r4, #128	@ 0x80
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	0324      	lsls	r4, r4, #12
 8001eb8:	431c      	orrs	r4, r3
 8001eba:	0324      	lsls	r4, r4, #12
 8001ebc:	9e02      	ldr	r6, [sp, #8]
 8001ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8002074 <__aeabi_ddiv+0x620>)
 8001ec0:	0b24      	lsrs	r4, r4, #12
 8001ec2:	e627      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <__aeabi_ddiv+0x476>
 8001ec8:	e700      	b.n	8001ccc <__aeabi_ddiv+0x278>
 8001eca:	9800      	ldr	r0, [sp, #0]
 8001ecc:	1e51      	subs	r1, r2, #1
 8001ece:	4684      	mov	ip, r0
 8001ed0:	4464      	add	r4, ip
 8001ed2:	4284      	cmp	r4, r0
 8001ed4:	d200      	bcs.n	8001ed8 <__aeabi_ddiv+0x484>
 8001ed6:	e084      	b.n	8001fe2 <__aeabi_ddiv+0x58e>
 8001ed8:	42bc      	cmp	r4, r7
 8001eda:	d200      	bcs.n	8001ede <__aeabi_ddiv+0x48a>
 8001edc:	e0ae      	b.n	800203c <__aeabi_ddiv+0x5e8>
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_ddiv+0x48e>
 8001ee0:	e0c1      	b.n	8002066 <__aeabi_ddiv+0x612>
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	e6f0      	b.n	8001cc8 <__aeabi_ddiv+0x274>
 8001ee6:	4542      	cmp	r2, r8
 8001ee8:	d900      	bls.n	8001eec <__aeabi_ddiv+0x498>
 8001eea:	e62c      	b.n	8001b46 <__aeabi_ddiv+0xf2>
 8001eec:	464b      	mov	r3, r9
 8001eee:	07dc      	lsls	r4, r3, #31
 8001ef0:	0858      	lsrs	r0, r3, #1
 8001ef2:	4643      	mov	r3, r8
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	431c      	orrs	r4, r3
 8001ef8:	4643      	mov	r3, r8
 8001efa:	07df      	lsls	r7, r3, #31
 8001efc:	e62a      	b.n	8001b54 <__aeabi_ddiv+0x100>
 8001efe:	f000 ffcf 	bl	8002ea0 <__clzsi2>
 8001f02:	2315      	movs	r3, #21
 8001f04:	469c      	mov	ip, r3
 8001f06:	4484      	add	ip, r0
 8001f08:	0002      	movs	r2, r0
 8001f0a:	4663      	mov	r3, ip
 8001f0c:	3220      	adds	r2, #32
 8001f0e:	2b1c      	cmp	r3, #28
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_ddiv+0x4c0>
 8001f12:	e72e      	b.n	8001d72 <__aeabi_ddiv+0x31e>
 8001f14:	0023      	movs	r3, r4
 8001f16:	3808      	subs	r0, #8
 8001f18:	4083      	lsls	r3, r0
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4698      	mov	r8, r3
 8001f20:	e736      	b.n	8001d90 <__aeabi_ddiv+0x33c>
 8001f22:	f000 ffbd 	bl	8002ea0 <__clzsi2>
 8001f26:	0002      	movs	r2, r0
 8001f28:	0003      	movs	r3, r0
 8001f2a:	3215      	adds	r2, #21
 8001f2c:	3320      	adds	r3, #32
 8001f2e:	2a1c      	cmp	r2, #28
 8001f30:	dc00      	bgt.n	8001f34 <__aeabi_ddiv+0x4e0>
 8001f32:	e6fb      	b.n	8001d2c <__aeabi_ddiv+0x2d8>
 8001f34:	9900      	ldr	r1, [sp, #0]
 8001f36:	3808      	subs	r0, #8
 8001f38:	4081      	lsls	r1, r0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	468b      	mov	fp, r1
 8001f3e:	e702      	b.n	8001d46 <__aeabi_ddiv+0x2f2>
 8001f40:	9900      	ldr	r1, [sp, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	468c      	mov	ip, r1
 8001f46:	4464      	add	r4, ip
 8001f48:	42a1      	cmp	r1, r4
 8001f4a:	d900      	bls.n	8001f4e <__aeabi_ddiv+0x4fa>
 8001f4c:	e69a      	b.n	8001c84 <__aeabi_ddiv+0x230>
 8001f4e:	42a2      	cmp	r2, r4
 8001f50:	d800      	bhi.n	8001f54 <__aeabi_ddiv+0x500>
 8001f52:	e697      	b.n	8001c84 <__aeabi_ddiv+0x230>
 8001f54:	1e83      	subs	r3, r0, #2
 8001f56:	4464      	add	r4, ip
 8001f58:	e694      	b.n	8001c84 <__aeabi_ddiv+0x230>
 8001f5a:	46ac      	mov	ip, r5
 8001f5c:	4461      	add	r1, ip
 8001f5e:	3f01      	subs	r7, #1
 8001f60:	428d      	cmp	r5, r1
 8001f62:	d900      	bls.n	8001f66 <__aeabi_ddiv+0x512>
 8001f64:	e680      	b.n	8001c68 <__aeabi_ddiv+0x214>
 8001f66:	428a      	cmp	r2, r1
 8001f68:	d800      	bhi.n	8001f6c <__aeabi_ddiv+0x518>
 8001f6a:	e67d      	b.n	8001c68 <__aeabi_ddiv+0x214>
 8001f6c:	1e87      	subs	r7, r0, #2
 8001f6e:	4461      	add	r1, ip
 8001f70:	e67a      	b.n	8001c68 <__aeabi_ddiv+0x214>
 8001f72:	4285      	cmp	r5, r0
 8001f74:	d000      	beq.n	8001f78 <__aeabi_ddiv+0x524>
 8001f76:	e65f      	b.n	8001c38 <__aeabi_ddiv+0x1e4>
 8001f78:	45b9      	cmp	r9, r7
 8001f7a:	d900      	bls.n	8001f7e <__aeabi_ddiv+0x52a>
 8001f7c:	e65c      	b.n	8001c38 <__aeabi_ddiv+0x1e4>
 8001f7e:	e656      	b.n	8001c2e <__aeabi_ddiv+0x1da>
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	d800      	bhi.n	8001f86 <__aeabi_ddiv+0x532>
 8001f84:	e61a      	b.n	8001bbc <__aeabi_ddiv+0x168>
 8001f86:	1e83      	subs	r3, r0, #2
 8001f88:	4464      	add	r4, ip
 8001f8a:	e617      	b.n	8001bbc <__aeabi_ddiv+0x168>
 8001f8c:	428a      	cmp	r2, r1
 8001f8e:	d800      	bhi.n	8001f92 <__aeabi_ddiv+0x53e>
 8001f90:	e600      	b.n	8001b94 <__aeabi_ddiv+0x140>
 8001f92:	46ac      	mov	ip, r5
 8001f94:	1e83      	subs	r3, r0, #2
 8001f96:	4698      	mov	r8, r3
 8001f98:	4461      	add	r1, ip
 8001f9a:	e5fb      	b.n	8001b94 <__aeabi_ddiv+0x140>
 8001f9c:	4837      	ldr	r0, [pc, #220]	@ (800207c <__aeabi_ddiv+0x628>)
 8001f9e:	0014      	movs	r4, r2
 8001fa0:	4450      	add	r0, sl
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	465b      	mov	r3, fp
 8001fa6:	0017      	movs	r7, r2
 8001fa8:	4083      	lsls	r3, r0
 8001faa:	40cc      	lsrs	r4, r1
 8001fac:	1e7a      	subs	r2, r7, #1
 8001fae:	4197      	sbcs	r7, r2
 8001fb0:	4323      	orrs	r3, r4
 8001fb2:	433b      	orrs	r3, r7
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	40cb      	lsrs	r3, r1
 8001fba:	0751      	lsls	r1, r2, #29
 8001fbc:	d009      	beq.n	8001fd2 <__aeabi_ddiv+0x57e>
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	4011      	ands	r1, r2
 8001fc2:	2904      	cmp	r1, #4
 8001fc4:	d005      	beq.n	8001fd2 <__aeabi_ddiv+0x57e>
 8001fc6:	1d11      	adds	r1, r2, #4
 8001fc8:	4291      	cmp	r1, r2
 8001fca:	4192      	sbcs	r2, r2
 8001fcc:	4252      	negs	r2, r2
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	0219      	lsls	r1, r3, #8
 8001fd4:	d400      	bmi.n	8001fd8 <__aeabi_ddiv+0x584>
 8001fd6:	e755      	b.n	8001e84 <__aeabi_ddiv+0x430>
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2301      	movs	r3, #1
 8001fdc:	2400      	movs	r4, #0
 8001fde:	4690      	mov	r8, r2
 8001fe0:	e598      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	42bc      	cmp	r4, r7
 8001fe6:	d000      	beq.n	8001fea <__aeabi_ddiv+0x596>
 8001fe8:	e66e      	b.n	8001cc8 <__aeabi_ddiv+0x274>
 8001fea:	454b      	cmp	r3, r9
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_ddiv+0x59c>
 8001fee:	e66b      	b.n	8001cc8 <__aeabi_ddiv+0x274>
 8001ff0:	e66c      	b.n	8001ccc <__aeabi_ddiv+0x278>
 8001ff2:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <__aeabi_ddiv+0x62c>)
 8001ff4:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <__aeabi_ddiv+0x630>)
 8001ff6:	4453      	add	r3, sl
 8001ff8:	4592      	cmp	sl, r2
 8001ffa:	da00      	bge.n	8001ffe <__aeabi_ddiv+0x5aa>
 8001ffc:	e718      	b.n	8001e30 <__aeabi_ddiv+0x3dc>
 8001ffe:	2101      	movs	r1, #1
 8002000:	4249      	negs	r1, r1
 8002002:	1d0a      	adds	r2, r1, #4
 8002004:	428a      	cmp	r2, r1
 8002006:	4189      	sbcs	r1, r1
 8002008:	4249      	negs	r1, r1
 800200a:	448b      	add	fp, r1
 800200c:	e666      	b.n	8001cdc <__aeabi_ddiv+0x288>
 800200e:	210f      	movs	r1, #15
 8002010:	4011      	ands	r1, r2
 8002012:	2904      	cmp	r1, #4
 8002014:	d100      	bne.n	8002018 <__aeabi_ddiv+0x5c4>
 8002016:	e661      	b.n	8001cdc <__aeabi_ddiv+0x288>
 8002018:	0011      	movs	r1, r2
 800201a:	e7f2      	b.n	8002002 <__aeabi_ddiv+0x5ae>
 800201c:	42bc      	cmp	r4, r7
 800201e:	d800      	bhi.n	8002022 <__aeabi_ddiv+0x5ce>
 8002020:	e60a      	b.n	8001c38 <__aeabi_ddiv+0x1e4>
 8002022:	2302      	movs	r3, #2
 8002024:	425b      	negs	r3, r3
 8002026:	469c      	mov	ip, r3
 8002028:	9900      	ldr	r1, [sp, #0]
 800202a:	444f      	add	r7, r9
 800202c:	454f      	cmp	r7, r9
 800202e:	419b      	sbcs	r3, r3
 8002030:	44e3      	add	fp, ip
 8002032:	468c      	mov	ip, r1
 8002034:	425b      	negs	r3, r3
 8002036:	4463      	add	r3, ip
 8002038:	18c0      	adds	r0, r0, r3
 800203a:	e5ff      	b.n	8001c3c <__aeabi_ddiv+0x1e8>
 800203c:	4649      	mov	r1, r9
 800203e:	9d00      	ldr	r5, [sp, #0]
 8002040:	0048      	lsls	r0, r1, #1
 8002042:	4548      	cmp	r0, r9
 8002044:	4189      	sbcs	r1, r1
 8002046:	46ac      	mov	ip, r5
 8002048:	4249      	negs	r1, r1
 800204a:	4461      	add	r1, ip
 800204c:	4681      	mov	r9, r0
 800204e:	3a02      	subs	r2, #2
 8002050:	1864      	adds	r4, r4, r1
 8002052:	e7c7      	b.n	8001fe4 <__aeabi_ddiv+0x590>
 8002054:	2480      	movs	r4, #128	@ 0x80
 8002056:	465b      	mov	r3, fp
 8002058:	0324      	lsls	r4, r4, #12
 800205a:	431c      	orrs	r4, r3
 800205c:	0324      	lsls	r4, r4, #12
 800205e:	4690      	mov	r8, r2
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__aeabi_ddiv+0x620>)
 8002062:	0b24      	lsrs	r4, r4, #12
 8002064:	e556      	b.n	8001b14 <__aeabi_ddiv+0xc0>
 8002066:	4599      	cmp	r9, r3
 8002068:	d3e8      	bcc.n	800203c <__aeabi_ddiv+0x5e8>
 800206a:	000a      	movs	r2, r1
 800206c:	e7bd      	b.n	8001fea <__aeabi_ddiv+0x596>
 800206e:	2300      	movs	r3, #0
 8002070:	e708      	b.n	8001e84 <__aeabi_ddiv+0x430>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff
 8002078:	0000043e 	.word	0x0000043e
 800207c:	0000041e 	.word	0x0000041e
 8002080:	000003ff 	.word	0x000003ff
 8002084:	fffffc02 	.word	0xfffffc02

08002088 <__aeabi_dmul>:
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	4657      	mov	r7, sl
 800208c:	46de      	mov	lr, fp
 800208e:	464e      	mov	r6, r9
 8002090:	4645      	mov	r5, r8
 8002092:	b5e0      	push	{r5, r6, r7, lr}
 8002094:	001f      	movs	r7, r3
 8002096:	030b      	lsls	r3, r1, #12
 8002098:	0b1b      	lsrs	r3, r3, #12
 800209a:	0016      	movs	r6, r2
 800209c:	469a      	mov	sl, r3
 800209e:	0fca      	lsrs	r2, r1, #31
 80020a0:	004b      	lsls	r3, r1, #1
 80020a2:	0004      	movs	r4, r0
 80020a4:	4693      	mov	fp, r2
 80020a6:	b087      	sub	sp, #28
 80020a8:	0d5b      	lsrs	r3, r3, #21
 80020aa:	d100      	bne.n	80020ae <__aeabi_dmul+0x26>
 80020ac:	e0d5      	b.n	800225a <__aeabi_dmul+0x1d2>
 80020ae:	4abb      	ldr	r2, [pc, #748]	@ (800239c <__aeabi_dmul+0x314>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dmul+0x2e>
 80020b4:	e0f8      	b.n	80022a8 <__aeabi_dmul+0x220>
 80020b6:	4651      	mov	r1, sl
 80020b8:	0f42      	lsrs	r2, r0, #29
 80020ba:	00c9      	lsls	r1, r1, #3
 80020bc:	430a      	orrs	r2, r1
 80020be:	2180      	movs	r1, #128	@ 0x80
 80020c0:	0409      	lsls	r1, r1, #16
 80020c2:	4311      	orrs	r1, r2
 80020c4:	00c2      	lsls	r2, r0, #3
 80020c6:	4691      	mov	r9, r2
 80020c8:	4ab5      	ldr	r2, [pc, #724]	@ (80023a0 <__aeabi_dmul+0x318>)
 80020ca:	468a      	mov	sl, r1
 80020cc:	189d      	adds	r5, r3, r2
 80020ce:	2300      	movs	r3, #0
 80020d0:	4698      	mov	r8, r3
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	033c      	lsls	r4, r7, #12
 80020d6:	007b      	lsls	r3, r7, #1
 80020d8:	0ffa      	lsrs	r2, r7, #31
 80020da:	0030      	movs	r0, r6
 80020dc:	0b24      	lsrs	r4, r4, #12
 80020de:	0d5b      	lsrs	r3, r3, #21
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	d100      	bne.n	80020e6 <__aeabi_dmul+0x5e>
 80020e4:	e096      	b.n	8002214 <__aeabi_dmul+0x18c>
 80020e6:	4aad      	ldr	r2, [pc, #692]	@ (800239c <__aeabi_dmul+0x314>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d031      	beq.n	8002150 <__aeabi_dmul+0xc8>
 80020ec:	0f72      	lsrs	r2, r6, #29
 80020ee:	00e4      	lsls	r4, r4, #3
 80020f0:	4322      	orrs	r2, r4
 80020f2:	2480      	movs	r4, #128	@ 0x80
 80020f4:	0424      	lsls	r4, r4, #16
 80020f6:	4314      	orrs	r4, r2
 80020f8:	4aa9      	ldr	r2, [pc, #676]	@ (80023a0 <__aeabi_dmul+0x318>)
 80020fa:	00f0      	lsls	r0, r6, #3
 80020fc:	4694      	mov	ip, r2
 80020fe:	4463      	add	r3, ip
 8002100:	195b      	adds	r3, r3, r5
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	9201      	str	r2, [sp, #4]
 8002106:	4642      	mov	r2, r8
 8002108:	2600      	movs	r6, #0
 800210a:	2a0a      	cmp	r2, #10
 800210c:	dc42      	bgt.n	8002194 <__aeabi_dmul+0x10c>
 800210e:	465a      	mov	r2, fp
 8002110:	9900      	ldr	r1, [sp, #0]
 8002112:	404a      	eors	r2, r1
 8002114:	4693      	mov	fp, r2
 8002116:	4642      	mov	r2, r8
 8002118:	2a02      	cmp	r2, #2
 800211a:	dc32      	bgt.n	8002182 <__aeabi_dmul+0xfa>
 800211c:	3a01      	subs	r2, #1
 800211e:	2a01      	cmp	r2, #1
 8002120:	d900      	bls.n	8002124 <__aeabi_dmul+0x9c>
 8002122:	e149      	b.n	80023b8 <__aeabi_dmul+0x330>
 8002124:	2e02      	cmp	r6, #2
 8002126:	d100      	bne.n	800212a <__aeabi_dmul+0xa2>
 8002128:	e0ca      	b.n	80022c0 <__aeabi_dmul+0x238>
 800212a:	2e01      	cmp	r6, #1
 800212c:	d13d      	bne.n	80021aa <__aeabi_dmul+0x122>
 800212e:	2300      	movs	r3, #0
 8002130:	2400      	movs	r4, #0
 8002132:	2200      	movs	r2, #0
 8002134:	0010      	movs	r0, r2
 8002136:	465a      	mov	r2, fp
 8002138:	051b      	lsls	r3, r3, #20
 800213a:	4323      	orrs	r3, r4
 800213c:	07d2      	lsls	r2, r2, #31
 800213e:	4313      	orrs	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	b007      	add	sp, #28
 8002144:	bcf0      	pop	{r4, r5, r6, r7}
 8002146:	46bb      	mov	fp, r7
 8002148:	46b2      	mov	sl, r6
 800214a:	46a9      	mov	r9, r5
 800214c:	46a0      	mov	r8, r4
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	4b92      	ldr	r3, [pc, #584]	@ (800239c <__aeabi_dmul+0x314>)
 8002152:	4326      	orrs	r6, r4
 8002154:	18eb      	adds	r3, r5, r3
 8002156:	2e00      	cmp	r6, #0
 8002158:	d100      	bne.n	800215c <__aeabi_dmul+0xd4>
 800215a:	e0bb      	b.n	80022d4 <__aeabi_dmul+0x24c>
 800215c:	2203      	movs	r2, #3
 800215e:	4641      	mov	r1, r8
 8002160:	4311      	orrs	r1, r2
 8002162:	465a      	mov	r2, fp
 8002164:	4688      	mov	r8, r1
 8002166:	9900      	ldr	r1, [sp, #0]
 8002168:	404a      	eors	r2, r1
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	0109      	lsls	r1, r1, #4
 800216e:	468c      	mov	ip, r1
 8002170:	0029      	movs	r1, r5
 8002172:	4461      	add	r1, ip
 8002174:	9101      	str	r1, [sp, #4]
 8002176:	4641      	mov	r1, r8
 8002178:	290a      	cmp	r1, #10
 800217a:	dd00      	ble.n	800217e <__aeabi_dmul+0xf6>
 800217c:	e233      	b.n	80025e6 <__aeabi_dmul+0x55e>
 800217e:	4693      	mov	fp, r2
 8002180:	2603      	movs	r6, #3
 8002182:	4642      	mov	r2, r8
 8002184:	2701      	movs	r7, #1
 8002186:	4097      	lsls	r7, r2
 8002188:	21a6      	movs	r1, #166	@ 0xa6
 800218a:	003a      	movs	r2, r7
 800218c:	00c9      	lsls	r1, r1, #3
 800218e:	400a      	ands	r2, r1
 8002190:	420f      	tst	r7, r1
 8002192:	d031      	beq.n	80021f8 <__aeabi_dmul+0x170>
 8002194:	9e02      	ldr	r6, [sp, #8]
 8002196:	2e02      	cmp	r6, #2
 8002198:	d100      	bne.n	800219c <__aeabi_dmul+0x114>
 800219a:	e235      	b.n	8002608 <__aeabi_dmul+0x580>
 800219c:	2e03      	cmp	r6, #3
 800219e:	d100      	bne.n	80021a2 <__aeabi_dmul+0x11a>
 80021a0:	e1d2      	b.n	8002548 <__aeabi_dmul+0x4c0>
 80021a2:	4654      	mov	r4, sl
 80021a4:	4648      	mov	r0, r9
 80021a6:	2e01      	cmp	r6, #1
 80021a8:	d0c1      	beq.n	800212e <__aeabi_dmul+0xa6>
 80021aa:	9a01      	ldr	r2, [sp, #4]
 80021ac:	4b7d      	ldr	r3, [pc, #500]	@ (80023a4 <__aeabi_dmul+0x31c>)
 80021ae:	4694      	mov	ip, r2
 80021b0:	4463      	add	r3, ip
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dc00      	bgt.n	80021b8 <__aeabi_dmul+0x130>
 80021b6:	e0c0      	b.n	800233a <__aeabi_dmul+0x2b2>
 80021b8:	0742      	lsls	r2, r0, #29
 80021ba:	d009      	beq.n	80021d0 <__aeabi_dmul+0x148>
 80021bc:	220f      	movs	r2, #15
 80021be:	4002      	ands	r2, r0
 80021c0:	2a04      	cmp	r2, #4
 80021c2:	d005      	beq.n	80021d0 <__aeabi_dmul+0x148>
 80021c4:	1d02      	adds	r2, r0, #4
 80021c6:	4282      	cmp	r2, r0
 80021c8:	4180      	sbcs	r0, r0
 80021ca:	4240      	negs	r0, r0
 80021cc:	1824      	adds	r4, r4, r0
 80021ce:	0010      	movs	r0, r2
 80021d0:	01e2      	lsls	r2, r4, #7
 80021d2:	d506      	bpl.n	80021e2 <__aeabi_dmul+0x15a>
 80021d4:	4b74      	ldr	r3, [pc, #464]	@ (80023a8 <__aeabi_dmul+0x320>)
 80021d6:	9a01      	ldr	r2, [sp, #4]
 80021d8:	401c      	ands	r4, r3
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	4694      	mov	ip, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4463      	add	r3, ip
 80021e2:	4a72      	ldr	r2, [pc, #456]	@ (80023ac <__aeabi_dmul+0x324>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dc6b      	bgt.n	80022c0 <__aeabi_dmul+0x238>
 80021e8:	0762      	lsls	r2, r4, #29
 80021ea:	08c0      	lsrs	r0, r0, #3
 80021ec:	0264      	lsls	r4, r4, #9
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	4302      	orrs	r2, r0
 80021f2:	0b24      	lsrs	r4, r4, #12
 80021f4:	0d5b      	lsrs	r3, r3, #21
 80021f6:	e79d      	b.n	8002134 <__aeabi_dmul+0xac>
 80021f8:	2190      	movs	r1, #144	@ 0x90
 80021fa:	0089      	lsls	r1, r1, #2
 80021fc:	420f      	tst	r7, r1
 80021fe:	d163      	bne.n	80022c8 <__aeabi_dmul+0x240>
 8002200:	2288      	movs	r2, #136	@ 0x88
 8002202:	423a      	tst	r2, r7
 8002204:	d100      	bne.n	8002208 <__aeabi_dmul+0x180>
 8002206:	e0d7      	b.n	80023b8 <__aeabi_dmul+0x330>
 8002208:	9b00      	ldr	r3, [sp, #0]
 800220a:	46a2      	mov	sl, r4
 800220c:	469b      	mov	fp, r3
 800220e:	4681      	mov	r9, r0
 8002210:	9602      	str	r6, [sp, #8]
 8002212:	e7bf      	b.n	8002194 <__aeabi_dmul+0x10c>
 8002214:	0023      	movs	r3, r4
 8002216:	4333      	orrs	r3, r6
 8002218:	d100      	bne.n	800221c <__aeabi_dmul+0x194>
 800221a:	e07f      	b.n	800231c <__aeabi_dmul+0x294>
 800221c:	2c00      	cmp	r4, #0
 800221e:	d100      	bne.n	8002222 <__aeabi_dmul+0x19a>
 8002220:	e1ad      	b.n	800257e <__aeabi_dmul+0x4f6>
 8002222:	0020      	movs	r0, r4
 8002224:	f000 fe3c 	bl	8002ea0 <__clzsi2>
 8002228:	0002      	movs	r2, r0
 800222a:	0003      	movs	r3, r0
 800222c:	3a0b      	subs	r2, #11
 800222e:	201d      	movs	r0, #29
 8002230:	0019      	movs	r1, r3
 8002232:	1a82      	subs	r2, r0, r2
 8002234:	0030      	movs	r0, r6
 8002236:	3908      	subs	r1, #8
 8002238:	40d0      	lsrs	r0, r2
 800223a:	408c      	lsls	r4, r1
 800223c:	4304      	orrs	r4, r0
 800223e:	0030      	movs	r0, r6
 8002240:	4088      	lsls	r0, r1
 8002242:	4a5b      	ldr	r2, [pc, #364]	@ (80023b0 <__aeabi_dmul+0x328>)
 8002244:	1aeb      	subs	r3, r5, r3
 8002246:	4694      	mov	ip, r2
 8002248:	4463      	add	r3, ip
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	9201      	str	r2, [sp, #4]
 800224e:	4642      	mov	r2, r8
 8002250:	2600      	movs	r6, #0
 8002252:	2a0a      	cmp	r2, #10
 8002254:	dc00      	bgt.n	8002258 <__aeabi_dmul+0x1d0>
 8002256:	e75a      	b.n	800210e <__aeabi_dmul+0x86>
 8002258:	e79c      	b.n	8002194 <__aeabi_dmul+0x10c>
 800225a:	4653      	mov	r3, sl
 800225c:	4303      	orrs	r3, r0
 800225e:	4699      	mov	r9, r3
 8002260:	d054      	beq.n	800230c <__aeabi_dmul+0x284>
 8002262:	4653      	mov	r3, sl
 8002264:	2b00      	cmp	r3, #0
 8002266:	d100      	bne.n	800226a <__aeabi_dmul+0x1e2>
 8002268:	e177      	b.n	800255a <__aeabi_dmul+0x4d2>
 800226a:	4650      	mov	r0, sl
 800226c:	f000 fe18 	bl	8002ea0 <__clzsi2>
 8002270:	230b      	movs	r3, #11
 8002272:	425b      	negs	r3, r3
 8002274:	469c      	mov	ip, r3
 8002276:	0002      	movs	r2, r0
 8002278:	4484      	add	ip, r0
 800227a:	0011      	movs	r1, r2
 800227c:	4650      	mov	r0, sl
 800227e:	3908      	subs	r1, #8
 8002280:	4088      	lsls	r0, r1
 8002282:	231d      	movs	r3, #29
 8002284:	4680      	mov	r8, r0
 8002286:	4660      	mov	r0, ip
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	0020      	movs	r0, r4
 800228c:	40d8      	lsrs	r0, r3
 800228e:	0003      	movs	r3, r0
 8002290:	4640      	mov	r0, r8
 8002292:	4303      	orrs	r3, r0
 8002294:	469a      	mov	sl, r3
 8002296:	0023      	movs	r3, r4
 8002298:	408b      	lsls	r3, r1
 800229a:	4699      	mov	r9, r3
 800229c:	2300      	movs	r3, #0
 800229e:	4d44      	ldr	r5, [pc, #272]	@ (80023b0 <__aeabi_dmul+0x328>)
 80022a0:	4698      	mov	r8, r3
 80022a2:	1aad      	subs	r5, r5, r2
 80022a4:	9302      	str	r3, [sp, #8]
 80022a6:	e715      	b.n	80020d4 <__aeabi_dmul+0x4c>
 80022a8:	4652      	mov	r2, sl
 80022aa:	4302      	orrs	r2, r0
 80022ac:	4691      	mov	r9, r2
 80022ae:	d126      	bne.n	80022fe <__aeabi_dmul+0x276>
 80022b0:	2200      	movs	r2, #0
 80022b2:	001d      	movs	r5, r3
 80022b4:	2302      	movs	r3, #2
 80022b6:	4692      	mov	sl, r2
 80022b8:	3208      	adds	r2, #8
 80022ba:	4690      	mov	r8, r2
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	e709      	b.n	80020d4 <__aeabi_dmul+0x4c>
 80022c0:	2400      	movs	r4, #0
 80022c2:	2200      	movs	r2, #0
 80022c4:	4b35      	ldr	r3, [pc, #212]	@ (800239c <__aeabi_dmul+0x314>)
 80022c6:	e735      	b.n	8002134 <__aeabi_dmul+0xac>
 80022c8:	2300      	movs	r3, #0
 80022ca:	2480      	movs	r4, #128	@ 0x80
 80022cc:	469b      	mov	fp, r3
 80022ce:	0324      	lsls	r4, r4, #12
 80022d0:	4b32      	ldr	r3, [pc, #200]	@ (800239c <__aeabi_dmul+0x314>)
 80022d2:	e72f      	b.n	8002134 <__aeabi_dmul+0xac>
 80022d4:	2202      	movs	r2, #2
 80022d6:	4641      	mov	r1, r8
 80022d8:	4311      	orrs	r1, r2
 80022da:	2280      	movs	r2, #128	@ 0x80
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	4694      	mov	ip, r2
 80022e0:	002a      	movs	r2, r5
 80022e2:	4462      	add	r2, ip
 80022e4:	4688      	mov	r8, r1
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	290a      	cmp	r1, #10
 80022ea:	dd00      	ble.n	80022ee <__aeabi_dmul+0x266>
 80022ec:	e752      	b.n	8002194 <__aeabi_dmul+0x10c>
 80022ee:	465a      	mov	r2, fp
 80022f0:	2000      	movs	r0, #0
 80022f2:	9900      	ldr	r1, [sp, #0]
 80022f4:	0004      	movs	r4, r0
 80022f6:	404a      	eors	r2, r1
 80022f8:	4693      	mov	fp, r2
 80022fa:	2602      	movs	r6, #2
 80022fc:	e70b      	b.n	8002116 <__aeabi_dmul+0x8e>
 80022fe:	220c      	movs	r2, #12
 8002300:	001d      	movs	r5, r3
 8002302:	2303      	movs	r3, #3
 8002304:	4681      	mov	r9, r0
 8002306:	4690      	mov	r8, r2
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	e6e3      	b.n	80020d4 <__aeabi_dmul+0x4c>
 800230c:	2300      	movs	r3, #0
 800230e:	469a      	mov	sl, r3
 8002310:	3304      	adds	r3, #4
 8002312:	4698      	mov	r8, r3
 8002314:	3b03      	subs	r3, #3
 8002316:	2500      	movs	r5, #0
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	e6db      	b.n	80020d4 <__aeabi_dmul+0x4c>
 800231c:	4642      	mov	r2, r8
 800231e:	3301      	adds	r3, #1
 8002320:	431a      	orrs	r2, r3
 8002322:	002b      	movs	r3, r5
 8002324:	4690      	mov	r8, r2
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	9201      	str	r2, [sp, #4]
 800232a:	4642      	mov	r2, r8
 800232c:	2400      	movs	r4, #0
 800232e:	2000      	movs	r0, #0
 8002330:	2601      	movs	r6, #1
 8002332:	2a0a      	cmp	r2, #10
 8002334:	dc00      	bgt.n	8002338 <__aeabi_dmul+0x2b0>
 8002336:	e6ea      	b.n	800210e <__aeabi_dmul+0x86>
 8002338:	e72c      	b.n	8002194 <__aeabi_dmul+0x10c>
 800233a:	2201      	movs	r2, #1
 800233c:	1ad2      	subs	r2, r2, r3
 800233e:	2a38      	cmp	r2, #56	@ 0x38
 8002340:	dd00      	ble.n	8002344 <__aeabi_dmul+0x2bc>
 8002342:	e6f4      	b.n	800212e <__aeabi_dmul+0xa6>
 8002344:	2a1f      	cmp	r2, #31
 8002346:	dc00      	bgt.n	800234a <__aeabi_dmul+0x2c2>
 8002348:	e12a      	b.n	80025a0 <__aeabi_dmul+0x518>
 800234a:	211f      	movs	r1, #31
 800234c:	4249      	negs	r1, r1
 800234e:	1acb      	subs	r3, r1, r3
 8002350:	0021      	movs	r1, r4
 8002352:	40d9      	lsrs	r1, r3
 8002354:	000b      	movs	r3, r1
 8002356:	2a20      	cmp	r2, #32
 8002358:	d005      	beq.n	8002366 <__aeabi_dmul+0x2de>
 800235a:	4a16      	ldr	r2, [pc, #88]	@ (80023b4 <__aeabi_dmul+0x32c>)
 800235c:	9d01      	ldr	r5, [sp, #4]
 800235e:	4694      	mov	ip, r2
 8002360:	4465      	add	r5, ip
 8002362:	40ac      	lsls	r4, r5
 8002364:	4320      	orrs	r0, r4
 8002366:	1e42      	subs	r2, r0, #1
 8002368:	4190      	sbcs	r0, r2
 800236a:	4318      	orrs	r0, r3
 800236c:	2307      	movs	r3, #7
 800236e:	0019      	movs	r1, r3
 8002370:	2400      	movs	r4, #0
 8002372:	4001      	ands	r1, r0
 8002374:	4203      	tst	r3, r0
 8002376:	d00c      	beq.n	8002392 <__aeabi_dmul+0x30a>
 8002378:	230f      	movs	r3, #15
 800237a:	4003      	ands	r3, r0
 800237c:	2b04      	cmp	r3, #4
 800237e:	d100      	bne.n	8002382 <__aeabi_dmul+0x2fa>
 8002380:	e140      	b.n	8002604 <__aeabi_dmul+0x57c>
 8002382:	1d03      	adds	r3, r0, #4
 8002384:	4283      	cmp	r3, r0
 8002386:	41a4      	sbcs	r4, r4
 8002388:	0018      	movs	r0, r3
 800238a:	4264      	negs	r4, r4
 800238c:	0761      	lsls	r1, r4, #29
 800238e:	0264      	lsls	r4, r4, #9
 8002390:	0b24      	lsrs	r4, r4, #12
 8002392:	08c2      	lsrs	r2, r0, #3
 8002394:	2300      	movs	r3, #0
 8002396:	430a      	orrs	r2, r1
 8002398:	e6cc      	b.n	8002134 <__aeabi_dmul+0xac>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	000007ff 	.word	0x000007ff
 80023a0:	fffffc01 	.word	0xfffffc01
 80023a4:	000003ff 	.word	0x000003ff
 80023a8:	feffffff 	.word	0xfeffffff
 80023ac:	000007fe 	.word	0x000007fe
 80023b0:	fffffc0d 	.word	0xfffffc0d
 80023b4:	0000043e 	.word	0x0000043e
 80023b8:	4649      	mov	r1, r9
 80023ba:	464a      	mov	r2, r9
 80023bc:	0409      	lsls	r1, r1, #16
 80023be:	0c09      	lsrs	r1, r1, #16
 80023c0:	000d      	movs	r5, r1
 80023c2:	0c16      	lsrs	r6, r2, #16
 80023c4:	0c02      	lsrs	r2, r0, #16
 80023c6:	0400      	lsls	r0, r0, #16
 80023c8:	0c00      	lsrs	r0, r0, #16
 80023ca:	4345      	muls	r5, r0
 80023cc:	46ac      	mov	ip, r5
 80023ce:	0005      	movs	r5, r0
 80023d0:	4375      	muls	r5, r6
 80023d2:	46a8      	mov	r8, r5
 80023d4:	0015      	movs	r5, r2
 80023d6:	000f      	movs	r7, r1
 80023d8:	4375      	muls	r5, r6
 80023da:	9200      	str	r2, [sp, #0]
 80023dc:	9502      	str	r5, [sp, #8]
 80023de:	002a      	movs	r2, r5
 80023e0:	9d00      	ldr	r5, [sp, #0]
 80023e2:	436f      	muls	r7, r5
 80023e4:	4665      	mov	r5, ip
 80023e6:	0c2d      	lsrs	r5, r5, #16
 80023e8:	46a9      	mov	r9, r5
 80023ea:	4447      	add	r7, r8
 80023ec:	444f      	add	r7, r9
 80023ee:	45b8      	cmp	r8, r7
 80023f0:	d905      	bls.n	80023fe <__aeabi_dmul+0x376>
 80023f2:	0015      	movs	r5, r2
 80023f4:	2280      	movs	r2, #128	@ 0x80
 80023f6:	0252      	lsls	r2, r2, #9
 80023f8:	4690      	mov	r8, r2
 80023fa:	4445      	add	r5, r8
 80023fc:	9502      	str	r5, [sp, #8]
 80023fe:	0c3d      	lsrs	r5, r7, #16
 8002400:	9503      	str	r5, [sp, #12]
 8002402:	4665      	mov	r5, ip
 8002404:	042d      	lsls	r5, r5, #16
 8002406:	043f      	lsls	r7, r7, #16
 8002408:	0c2d      	lsrs	r5, r5, #16
 800240a:	46ac      	mov	ip, r5
 800240c:	003d      	movs	r5, r7
 800240e:	4465      	add	r5, ip
 8002410:	9504      	str	r5, [sp, #16]
 8002412:	0c25      	lsrs	r5, r4, #16
 8002414:	0424      	lsls	r4, r4, #16
 8002416:	0c24      	lsrs	r4, r4, #16
 8002418:	46ac      	mov	ip, r5
 800241a:	0025      	movs	r5, r4
 800241c:	4375      	muls	r5, r6
 800241e:	46a8      	mov	r8, r5
 8002420:	4665      	mov	r5, ip
 8002422:	000f      	movs	r7, r1
 8002424:	4369      	muls	r1, r5
 8002426:	4441      	add	r1, r8
 8002428:	4689      	mov	r9, r1
 800242a:	4367      	muls	r7, r4
 800242c:	0c39      	lsrs	r1, r7, #16
 800242e:	4449      	add	r1, r9
 8002430:	436e      	muls	r6, r5
 8002432:	4588      	cmp	r8, r1
 8002434:	d903      	bls.n	800243e <__aeabi_dmul+0x3b6>
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	0252      	lsls	r2, r2, #9
 800243a:	4690      	mov	r8, r2
 800243c:	4446      	add	r6, r8
 800243e:	0c0d      	lsrs	r5, r1, #16
 8002440:	46a8      	mov	r8, r5
 8002442:	0035      	movs	r5, r6
 8002444:	4445      	add	r5, r8
 8002446:	9505      	str	r5, [sp, #20]
 8002448:	9d03      	ldr	r5, [sp, #12]
 800244a:	043f      	lsls	r7, r7, #16
 800244c:	46a8      	mov	r8, r5
 800244e:	0c3f      	lsrs	r7, r7, #16
 8002450:	0409      	lsls	r1, r1, #16
 8002452:	19c9      	adds	r1, r1, r7
 8002454:	4488      	add	r8, r1
 8002456:	4645      	mov	r5, r8
 8002458:	9503      	str	r5, [sp, #12]
 800245a:	4655      	mov	r5, sl
 800245c:	042e      	lsls	r6, r5, #16
 800245e:	0c36      	lsrs	r6, r6, #16
 8002460:	0c2f      	lsrs	r7, r5, #16
 8002462:	0035      	movs	r5, r6
 8002464:	4345      	muls	r5, r0
 8002466:	4378      	muls	r0, r7
 8002468:	4681      	mov	r9, r0
 800246a:	0038      	movs	r0, r7
 800246c:	46a8      	mov	r8, r5
 800246e:	0c2d      	lsrs	r5, r5, #16
 8002470:	46aa      	mov	sl, r5
 8002472:	9a00      	ldr	r2, [sp, #0]
 8002474:	4350      	muls	r0, r2
 8002476:	4372      	muls	r2, r6
 8002478:	444a      	add	r2, r9
 800247a:	4452      	add	r2, sl
 800247c:	4591      	cmp	r9, r2
 800247e:	d903      	bls.n	8002488 <__aeabi_dmul+0x400>
 8002480:	2580      	movs	r5, #128	@ 0x80
 8002482:	026d      	lsls	r5, r5, #9
 8002484:	46a9      	mov	r9, r5
 8002486:	4448      	add	r0, r9
 8002488:	0c15      	lsrs	r5, r2, #16
 800248a:	46a9      	mov	r9, r5
 800248c:	4645      	mov	r5, r8
 800248e:	042d      	lsls	r5, r5, #16
 8002490:	0c2d      	lsrs	r5, r5, #16
 8002492:	46a8      	mov	r8, r5
 8002494:	4665      	mov	r5, ip
 8002496:	437d      	muls	r5, r7
 8002498:	0412      	lsls	r2, r2, #16
 800249a:	4448      	add	r0, r9
 800249c:	4490      	add	r8, r2
 800249e:	46a9      	mov	r9, r5
 80024a0:	0032      	movs	r2, r6
 80024a2:	4665      	mov	r5, ip
 80024a4:	4362      	muls	r2, r4
 80024a6:	436e      	muls	r6, r5
 80024a8:	437c      	muls	r4, r7
 80024aa:	0c17      	lsrs	r7, r2, #16
 80024ac:	1936      	adds	r6, r6, r4
 80024ae:	19bf      	adds	r7, r7, r6
 80024b0:	42bc      	cmp	r4, r7
 80024b2:	d903      	bls.n	80024bc <__aeabi_dmul+0x434>
 80024b4:	2480      	movs	r4, #128	@ 0x80
 80024b6:	0264      	lsls	r4, r4, #9
 80024b8:	46a4      	mov	ip, r4
 80024ba:	44e1      	add	r9, ip
 80024bc:	9c02      	ldr	r4, [sp, #8]
 80024be:	9e03      	ldr	r6, [sp, #12]
 80024c0:	46a4      	mov	ip, r4
 80024c2:	9d05      	ldr	r5, [sp, #20]
 80024c4:	4466      	add	r6, ip
 80024c6:	428e      	cmp	r6, r1
 80024c8:	4189      	sbcs	r1, r1
 80024ca:	46ac      	mov	ip, r5
 80024cc:	0412      	lsls	r2, r2, #16
 80024ce:	043c      	lsls	r4, r7, #16
 80024d0:	0c12      	lsrs	r2, r2, #16
 80024d2:	18a2      	adds	r2, r4, r2
 80024d4:	4462      	add	r2, ip
 80024d6:	4249      	negs	r1, r1
 80024d8:	1854      	adds	r4, r2, r1
 80024da:	4446      	add	r6, r8
 80024dc:	46a4      	mov	ip, r4
 80024de:	4546      	cmp	r6, r8
 80024e0:	41a4      	sbcs	r4, r4
 80024e2:	4682      	mov	sl, r0
 80024e4:	4264      	negs	r4, r4
 80024e6:	46a0      	mov	r8, r4
 80024e8:	42aa      	cmp	r2, r5
 80024ea:	4192      	sbcs	r2, r2
 80024ec:	458c      	cmp	ip, r1
 80024ee:	4189      	sbcs	r1, r1
 80024f0:	44e2      	add	sl, ip
 80024f2:	44d0      	add	r8, sl
 80024f4:	4249      	negs	r1, r1
 80024f6:	4252      	negs	r2, r2
 80024f8:	430a      	orrs	r2, r1
 80024fa:	45a0      	cmp	r8, r4
 80024fc:	41a4      	sbcs	r4, r4
 80024fe:	4582      	cmp	sl, r0
 8002500:	4189      	sbcs	r1, r1
 8002502:	4264      	negs	r4, r4
 8002504:	4249      	negs	r1, r1
 8002506:	430c      	orrs	r4, r1
 8002508:	4641      	mov	r1, r8
 800250a:	0c3f      	lsrs	r7, r7, #16
 800250c:	19d2      	adds	r2, r2, r7
 800250e:	1912      	adds	r2, r2, r4
 8002510:	0dcc      	lsrs	r4, r1, #23
 8002512:	9904      	ldr	r1, [sp, #16]
 8002514:	0270      	lsls	r0, r6, #9
 8002516:	4308      	orrs	r0, r1
 8002518:	1e41      	subs	r1, r0, #1
 800251a:	4188      	sbcs	r0, r1
 800251c:	4641      	mov	r1, r8
 800251e:	444a      	add	r2, r9
 8002520:	0df6      	lsrs	r6, r6, #23
 8002522:	0252      	lsls	r2, r2, #9
 8002524:	4330      	orrs	r0, r6
 8002526:	0249      	lsls	r1, r1, #9
 8002528:	4314      	orrs	r4, r2
 800252a:	4308      	orrs	r0, r1
 800252c:	01d2      	lsls	r2, r2, #7
 800252e:	d535      	bpl.n	800259c <__aeabi_dmul+0x514>
 8002530:	2201      	movs	r2, #1
 8002532:	0843      	lsrs	r3, r0, #1
 8002534:	4002      	ands	r2, r0
 8002536:	4313      	orrs	r3, r2
 8002538:	07e0      	lsls	r0, r4, #31
 800253a:	4318      	orrs	r0, r3
 800253c:	0864      	lsrs	r4, r4, #1
 800253e:	e634      	b.n	80021aa <__aeabi_dmul+0x122>
 8002540:	9b00      	ldr	r3, [sp, #0]
 8002542:	46a2      	mov	sl, r4
 8002544:	469b      	mov	fp, r3
 8002546:	4681      	mov	r9, r0
 8002548:	2480      	movs	r4, #128	@ 0x80
 800254a:	4653      	mov	r3, sl
 800254c:	0324      	lsls	r4, r4, #12
 800254e:	431c      	orrs	r4, r3
 8002550:	0324      	lsls	r4, r4, #12
 8002552:	464a      	mov	r2, r9
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <__aeabi_dmul+0x588>)
 8002556:	0b24      	lsrs	r4, r4, #12
 8002558:	e5ec      	b.n	8002134 <__aeabi_dmul+0xac>
 800255a:	f000 fca1 	bl	8002ea0 <__clzsi2>
 800255e:	2315      	movs	r3, #21
 8002560:	469c      	mov	ip, r3
 8002562:	4484      	add	ip, r0
 8002564:	0002      	movs	r2, r0
 8002566:	4663      	mov	r3, ip
 8002568:	3220      	adds	r2, #32
 800256a:	2b1c      	cmp	r3, #28
 800256c:	dc00      	bgt.n	8002570 <__aeabi_dmul+0x4e8>
 800256e:	e684      	b.n	800227a <__aeabi_dmul+0x1f2>
 8002570:	2300      	movs	r3, #0
 8002572:	4699      	mov	r9, r3
 8002574:	0023      	movs	r3, r4
 8002576:	3808      	subs	r0, #8
 8002578:	4083      	lsls	r3, r0
 800257a:	469a      	mov	sl, r3
 800257c:	e68e      	b.n	800229c <__aeabi_dmul+0x214>
 800257e:	f000 fc8f 	bl	8002ea0 <__clzsi2>
 8002582:	0002      	movs	r2, r0
 8002584:	0003      	movs	r3, r0
 8002586:	3215      	adds	r2, #21
 8002588:	3320      	adds	r3, #32
 800258a:	2a1c      	cmp	r2, #28
 800258c:	dc00      	bgt.n	8002590 <__aeabi_dmul+0x508>
 800258e:	e64e      	b.n	800222e <__aeabi_dmul+0x1a6>
 8002590:	0002      	movs	r2, r0
 8002592:	0034      	movs	r4, r6
 8002594:	3a08      	subs	r2, #8
 8002596:	2000      	movs	r0, #0
 8002598:	4094      	lsls	r4, r2
 800259a:	e652      	b.n	8002242 <__aeabi_dmul+0x1ba>
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	e604      	b.n	80021aa <__aeabi_dmul+0x122>
 80025a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <__aeabi_dmul+0x58c>)
 80025a2:	0021      	movs	r1, r4
 80025a4:	469c      	mov	ip, r3
 80025a6:	0003      	movs	r3, r0
 80025a8:	9d01      	ldr	r5, [sp, #4]
 80025aa:	40d3      	lsrs	r3, r2
 80025ac:	4465      	add	r5, ip
 80025ae:	40a9      	lsls	r1, r5
 80025b0:	4319      	orrs	r1, r3
 80025b2:	0003      	movs	r3, r0
 80025b4:	40ab      	lsls	r3, r5
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	4183      	sbcs	r3, r0
 80025ba:	4319      	orrs	r1, r3
 80025bc:	0008      	movs	r0, r1
 80025be:	40d4      	lsrs	r4, r2
 80025c0:	074b      	lsls	r3, r1, #29
 80025c2:	d009      	beq.n	80025d8 <__aeabi_dmul+0x550>
 80025c4:	230f      	movs	r3, #15
 80025c6:	400b      	ands	r3, r1
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d005      	beq.n	80025d8 <__aeabi_dmul+0x550>
 80025cc:	1d0b      	adds	r3, r1, #4
 80025ce:	428b      	cmp	r3, r1
 80025d0:	4180      	sbcs	r0, r0
 80025d2:	4240      	negs	r0, r0
 80025d4:	1824      	adds	r4, r4, r0
 80025d6:	0018      	movs	r0, r3
 80025d8:	0223      	lsls	r3, r4, #8
 80025da:	d400      	bmi.n	80025de <__aeabi_dmul+0x556>
 80025dc:	e6d6      	b.n	800238c <__aeabi_dmul+0x304>
 80025de:	2301      	movs	r3, #1
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	e5a6      	b.n	8002134 <__aeabi_dmul+0xac>
 80025e6:	290f      	cmp	r1, #15
 80025e8:	d1aa      	bne.n	8002540 <__aeabi_dmul+0x4b8>
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	4652      	mov	r2, sl
 80025ee:	031b      	lsls	r3, r3, #12
 80025f0:	421a      	tst	r2, r3
 80025f2:	d0a9      	beq.n	8002548 <__aeabi_dmul+0x4c0>
 80025f4:	421c      	tst	r4, r3
 80025f6:	d1a7      	bne.n	8002548 <__aeabi_dmul+0x4c0>
 80025f8:	431c      	orrs	r4, r3
 80025fa:	9b00      	ldr	r3, [sp, #0]
 80025fc:	0002      	movs	r2, r0
 80025fe:	469b      	mov	fp, r3
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <__aeabi_dmul+0x588>)
 8002602:	e597      	b.n	8002134 <__aeabi_dmul+0xac>
 8002604:	2400      	movs	r4, #0
 8002606:	e6c1      	b.n	800238c <__aeabi_dmul+0x304>
 8002608:	2400      	movs	r4, #0
 800260a:	4b01      	ldr	r3, [pc, #4]	@ (8002610 <__aeabi_dmul+0x588>)
 800260c:	0022      	movs	r2, r4
 800260e:	e591      	b.n	8002134 <__aeabi_dmul+0xac>
 8002610:	000007ff 	.word	0x000007ff
 8002614:	0000041e 	.word	0x0000041e

08002618 <__aeabi_dsub>:
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	464e      	mov	r6, r9
 800261c:	4645      	mov	r5, r8
 800261e:	46de      	mov	lr, fp
 8002620:	4657      	mov	r7, sl
 8002622:	b5e0      	push	{r5, r6, r7, lr}
 8002624:	b085      	sub	sp, #20
 8002626:	9000      	str	r0, [sp, #0]
 8002628:	9101      	str	r1, [sp, #4]
 800262a:	030c      	lsls	r4, r1, #12
 800262c:	004f      	lsls	r7, r1, #1
 800262e:	0fce      	lsrs	r6, r1, #31
 8002630:	0a61      	lsrs	r1, r4, #9
 8002632:	9c00      	ldr	r4, [sp, #0]
 8002634:	46b0      	mov	r8, r6
 8002636:	0f64      	lsrs	r4, r4, #29
 8002638:	430c      	orrs	r4, r1
 800263a:	9900      	ldr	r1, [sp, #0]
 800263c:	0d7f      	lsrs	r7, r7, #21
 800263e:	00c8      	lsls	r0, r1, #3
 8002640:	0011      	movs	r1, r2
 8002642:	001a      	movs	r2, r3
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	469c      	mov	ip, r3
 8002648:	9100      	str	r1, [sp, #0]
 800264a:	9201      	str	r2, [sp, #4]
 800264c:	0051      	lsls	r1, r2, #1
 800264e:	0d4b      	lsrs	r3, r1, #21
 8002650:	4699      	mov	r9, r3
 8002652:	9b01      	ldr	r3, [sp, #4]
 8002654:	9d00      	ldr	r5, [sp, #0]
 8002656:	0fd9      	lsrs	r1, r3, #31
 8002658:	4663      	mov	r3, ip
 800265a:	0f6a      	lsrs	r2, r5, #29
 800265c:	0a5b      	lsrs	r3, r3, #9
 800265e:	4313      	orrs	r3, r2
 8002660:	00ea      	lsls	r2, r5, #3
 8002662:	4694      	mov	ip, r2
 8002664:	4693      	mov	fp, r2
 8002666:	4ac1      	ldr	r2, [pc, #772]	@ (800296c <__aeabi_dsub+0x354>)
 8002668:	9003      	str	r0, [sp, #12]
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	4591      	cmp	r9, r2
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x5a>
 8002670:	e0cd      	b.n	800280e <__aeabi_dsub+0x1f6>
 8002672:	2501      	movs	r5, #1
 8002674:	4069      	eors	r1, r5
 8002676:	464d      	mov	r5, r9
 8002678:	1b7d      	subs	r5, r7, r5
 800267a:	46aa      	mov	sl, r5
 800267c:	428e      	cmp	r6, r1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x6a>
 8002680:	e080      	b.n	8002784 <__aeabi_dsub+0x16c>
 8002682:	2d00      	cmp	r5, #0
 8002684:	dc00      	bgt.n	8002688 <__aeabi_dsub+0x70>
 8002686:	e335      	b.n	8002cf4 <__aeabi_dsub+0x6dc>
 8002688:	4649      	mov	r1, r9
 800268a:	2900      	cmp	r1, #0
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x78>
 800268e:	e0df      	b.n	8002850 <__aeabi_dsub+0x238>
 8002690:	4297      	cmp	r7, r2
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x7e>
 8002694:	e194      	b.n	80029c0 <__aeabi_dsub+0x3a8>
 8002696:	4652      	mov	r2, sl
 8002698:	2501      	movs	r5, #1
 800269a:	2a38      	cmp	r2, #56	@ 0x38
 800269c:	dc19      	bgt.n	80026d2 <__aeabi_dsub+0xba>
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	9b02      	ldr	r3, [sp, #8]
 80026a2:	0412      	lsls	r2, r2, #16
 80026a4:	4313      	orrs	r3, r2
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	4652      	mov	r2, sl
 80026aa:	2a1f      	cmp	r2, #31
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dsub+0x98>
 80026ae:	e1e3      	b.n	8002a78 <__aeabi_dsub+0x460>
 80026b0:	4653      	mov	r3, sl
 80026b2:	2220      	movs	r2, #32
 80026b4:	4661      	mov	r1, ip
 80026b6:	9d02      	ldr	r5, [sp, #8]
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	4095      	lsls	r5, r2
 80026bc:	40d9      	lsrs	r1, r3
 80026be:	430d      	orrs	r5, r1
 80026c0:	4661      	mov	r1, ip
 80026c2:	4091      	lsls	r1, r2
 80026c4:	000a      	movs	r2, r1
 80026c6:	1e51      	subs	r1, r2, #1
 80026c8:	418a      	sbcs	r2, r1
 80026ca:	4315      	orrs	r5, r2
 80026cc:	9a02      	ldr	r2, [sp, #8]
 80026ce:	40da      	lsrs	r2, r3
 80026d0:	1aa4      	subs	r4, r4, r2
 80026d2:	1b45      	subs	r5, r0, r5
 80026d4:	42a8      	cmp	r0, r5
 80026d6:	4180      	sbcs	r0, r0
 80026d8:	4240      	negs	r0, r0
 80026da:	1a24      	subs	r4, r4, r0
 80026dc:	0223      	lsls	r3, r4, #8
 80026de:	d400      	bmi.n	80026e2 <__aeabi_dsub+0xca>
 80026e0:	e13d      	b.n	800295e <__aeabi_dsub+0x346>
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0a64      	lsrs	r4, r4, #9
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0xd4>
 80026ea:	e147      	b.n	800297c <__aeabi_dsub+0x364>
 80026ec:	0020      	movs	r0, r4
 80026ee:	f000 fbd7 	bl	8002ea0 <__clzsi2>
 80026f2:	0003      	movs	r3, r0
 80026f4:	3b08      	subs	r3, #8
 80026f6:	2120      	movs	r1, #32
 80026f8:	0028      	movs	r0, r5
 80026fa:	1aca      	subs	r2, r1, r3
 80026fc:	40d0      	lsrs	r0, r2
 80026fe:	409c      	lsls	r4, r3
 8002700:	0002      	movs	r2, r0
 8002702:	409d      	lsls	r5, r3
 8002704:	4322      	orrs	r2, r4
 8002706:	429f      	cmp	r7, r3
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0xf4>
 800270a:	e177      	b.n	80029fc <__aeabi_dsub+0x3e4>
 800270c:	1bd8      	subs	r0, r3, r7
 800270e:	3001      	adds	r0, #1
 8002710:	1a09      	subs	r1, r1, r0
 8002712:	002c      	movs	r4, r5
 8002714:	408d      	lsls	r5, r1
 8002716:	40c4      	lsrs	r4, r0
 8002718:	1e6b      	subs	r3, r5, #1
 800271a:	419d      	sbcs	r5, r3
 800271c:	0013      	movs	r3, r2
 800271e:	40c2      	lsrs	r2, r0
 8002720:	408b      	lsls	r3, r1
 8002722:	4325      	orrs	r5, r4
 8002724:	2700      	movs	r7, #0
 8002726:	0014      	movs	r4, r2
 8002728:	431d      	orrs	r5, r3
 800272a:	076b      	lsls	r3, r5, #29
 800272c:	d009      	beq.n	8002742 <__aeabi_dsub+0x12a>
 800272e:	230f      	movs	r3, #15
 8002730:	402b      	ands	r3, r5
 8002732:	2b04      	cmp	r3, #4
 8002734:	d005      	beq.n	8002742 <__aeabi_dsub+0x12a>
 8002736:	1d2b      	adds	r3, r5, #4
 8002738:	42ab      	cmp	r3, r5
 800273a:	41ad      	sbcs	r5, r5
 800273c:	426d      	negs	r5, r5
 800273e:	1964      	adds	r4, r4, r5
 8002740:	001d      	movs	r5, r3
 8002742:	0223      	lsls	r3, r4, #8
 8002744:	d400      	bmi.n	8002748 <__aeabi_dsub+0x130>
 8002746:	e140      	b.n	80029ca <__aeabi_dsub+0x3b2>
 8002748:	4a88      	ldr	r2, [pc, #544]	@ (800296c <__aeabi_dsub+0x354>)
 800274a:	3701      	adds	r7, #1
 800274c:	4297      	cmp	r7, r2
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x13a>
 8002750:	e101      	b.n	8002956 <__aeabi_dsub+0x33e>
 8002752:	2601      	movs	r6, #1
 8002754:	4643      	mov	r3, r8
 8002756:	4986      	ldr	r1, [pc, #536]	@ (8002970 <__aeabi_dsub+0x358>)
 8002758:	08ed      	lsrs	r5, r5, #3
 800275a:	4021      	ands	r1, r4
 800275c:	074a      	lsls	r2, r1, #29
 800275e:	432a      	orrs	r2, r5
 8002760:	057c      	lsls	r4, r7, #21
 8002762:	024d      	lsls	r5, r1, #9
 8002764:	0b2d      	lsrs	r5, r5, #12
 8002766:	0d64      	lsrs	r4, r4, #21
 8002768:	401e      	ands	r6, r3
 800276a:	0524      	lsls	r4, r4, #20
 800276c:	432c      	orrs	r4, r5
 800276e:	07f6      	lsls	r6, r6, #31
 8002770:	4334      	orrs	r4, r6
 8002772:	0010      	movs	r0, r2
 8002774:	0021      	movs	r1, r4
 8002776:	b005      	add	sp, #20
 8002778:	bcf0      	pop	{r4, r5, r6, r7}
 800277a:	46bb      	mov	fp, r7
 800277c:	46b2      	mov	sl, r6
 800277e:	46a9      	mov	r9, r5
 8002780:	46a0      	mov	r8, r4
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002784:	2d00      	cmp	r5, #0
 8002786:	dc00      	bgt.n	800278a <__aeabi_dsub+0x172>
 8002788:	e2d0      	b.n	8002d2c <__aeabi_dsub+0x714>
 800278a:	4649      	mov	r1, r9
 800278c:	2900      	cmp	r1, #0
 800278e:	d000      	beq.n	8002792 <__aeabi_dsub+0x17a>
 8002790:	e0d4      	b.n	800293c <__aeabi_dsub+0x324>
 8002792:	4661      	mov	r1, ip
 8002794:	9b02      	ldr	r3, [sp, #8]
 8002796:	4319      	orrs	r1, r3
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x184>
 800279a:	e12b      	b.n	80029f4 <__aeabi_dsub+0x3dc>
 800279c:	1e69      	subs	r1, r5, #1
 800279e:	2d01      	cmp	r5, #1
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x18c>
 80027a2:	e1d9      	b.n	8002b58 <__aeabi_dsub+0x540>
 80027a4:	4295      	cmp	r5, r2
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x192>
 80027a8:	e10a      	b.n	80029c0 <__aeabi_dsub+0x3a8>
 80027aa:	2501      	movs	r5, #1
 80027ac:	2938      	cmp	r1, #56	@ 0x38
 80027ae:	dc17      	bgt.n	80027e0 <__aeabi_dsub+0x1c8>
 80027b0:	468a      	mov	sl, r1
 80027b2:	4653      	mov	r3, sl
 80027b4:	2b1f      	cmp	r3, #31
 80027b6:	dd00      	ble.n	80027ba <__aeabi_dsub+0x1a2>
 80027b8:	e1e7      	b.n	8002b8a <__aeabi_dsub+0x572>
 80027ba:	2220      	movs	r2, #32
 80027bc:	1ad2      	subs	r2, r2, r3
 80027be:	9b02      	ldr	r3, [sp, #8]
 80027c0:	4661      	mov	r1, ip
 80027c2:	4093      	lsls	r3, r2
 80027c4:	001d      	movs	r5, r3
 80027c6:	4653      	mov	r3, sl
 80027c8:	40d9      	lsrs	r1, r3
 80027ca:	4663      	mov	r3, ip
 80027cc:	4093      	lsls	r3, r2
 80027ce:	001a      	movs	r2, r3
 80027d0:	430d      	orrs	r5, r1
 80027d2:	1e51      	subs	r1, r2, #1
 80027d4:	418a      	sbcs	r2, r1
 80027d6:	4653      	mov	r3, sl
 80027d8:	4315      	orrs	r5, r2
 80027da:	9a02      	ldr	r2, [sp, #8]
 80027dc:	40da      	lsrs	r2, r3
 80027de:	18a4      	adds	r4, r4, r2
 80027e0:	182d      	adds	r5, r5, r0
 80027e2:	4285      	cmp	r5, r0
 80027e4:	4180      	sbcs	r0, r0
 80027e6:	4240      	negs	r0, r0
 80027e8:	1824      	adds	r4, r4, r0
 80027ea:	0223      	lsls	r3, r4, #8
 80027ec:	d400      	bmi.n	80027f0 <__aeabi_dsub+0x1d8>
 80027ee:	e0b6      	b.n	800295e <__aeabi_dsub+0x346>
 80027f0:	4b5e      	ldr	r3, [pc, #376]	@ (800296c <__aeabi_dsub+0x354>)
 80027f2:	3701      	adds	r7, #1
 80027f4:	429f      	cmp	r7, r3
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x1e2>
 80027f8:	e0ad      	b.n	8002956 <__aeabi_dsub+0x33e>
 80027fa:	2101      	movs	r1, #1
 80027fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002970 <__aeabi_dsub+0x358>)
 80027fe:	086a      	lsrs	r2, r5, #1
 8002800:	401c      	ands	r4, r3
 8002802:	4029      	ands	r1, r5
 8002804:	430a      	orrs	r2, r1
 8002806:	07e5      	lsls	r5, r4, #31
 8002808:	4315      	orrs	r5, r2
 800280a:	0864      	lsrs	r4, r4, #1
 800280c:	e78d      	b.n	800272a <__aeabi_dsub+0x112>
 800280e:	4a59      	ldr	r2, [pc, #356]	@ (8002974 <__aeabi_dsub+0x35c>)
 8002810:	9b02      	ldr	r3, [sp, #8]
 8002812:	4692      	mov	sl, r2
 8002814:	4662      	mov	r2, ip
 8002816:	44ba      	add	sl, r7
 8002818:	431a      	orrs	r2, r3
 800281a:	d02c      	beq.n	8002876 <__aeabi_dsub+0x25e>
 800281c:	428e      	cmp	r6, r1
 800281e:	d02e      	beq.n	800287e <__aeabi_dsub+0x266>
 8002820:	4652      	mov	r2, sl
 8002822:	2a00      	cmp	r2, #0
 8002824:	d060      	beq.n	80028e8 <__aeabi_dsub+0x2d0>
 8002826:	2f00      	cmp	r7, #0
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x214>
 800282a:	e0db      	b.n	80029e4 <__aeabi_dsub+0x3cc>
 800282c:	4663      	mov	r3, ip
 800282e:	000e      	movs	r6, r1
 8002830:	9c02      	ldr	r4, [sp, #8]
 8002832:	08d8      	lsrs	r0, r3, #3
 8002834:	0762      	lsls	r2, r4, #29
 8002836:	4302      	orrs	r2, r0
 8002838:	08e4      	lsrs	r4, r4, #3
 800283a:	0013      	movs	r3, r2
 800283c:	4323      	orrs	r3, r4
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x22a>
 8002840:	e254      	b.n	8002cec <__aeabi_dsub+0x6d4>
 8002842:	2580      	movs	r5, #128	@ 0x80
 8002844:	032d      	lsls	r5, r5, #12
 8002846:	4325      	orrs	r5, r4
 8002848:	032d      	lsls	r5, r5, #12
 800284a:	4c48      	ldr	r4, [pc, #288]	@ (800296c <__aeabi_dsub+0x354>)
 800284c:	0b2d      	lsrs	r5, r5, #12
 800284e:	e78c      	b.n	800276a <__aeabi_dsub+0x152>
 8002850:	4661      	mov	r1, ip
 8002852:	9b02      	ldr	r3, [sp, #8]
 8002854:	4319      	orrs	r1, r3
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x242>
 8002858:	e0cc      	b.n	80029f4 <__aeabi_dsub+0x3dc>
 800285a:	0029      	movs	r1, r5
 800285c:	3901      	subs	r1, #1
 800285e:	2d01      	cmp	r5, #1
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x24c>
 8002862:	e188      	b.n	8002b76 <__aeabi_dsub+0x55e>
 8002864:	4295      	cmp	r5, r2
 8002866:	d100      	bne.n	800286a <__aeabi_dsub+0x252>
 8002868:	e0aa      	b.n	80029c0 <__aeabi_dsub+0x3a8>
 800286a:	2501      	movs	r5, #1
 800286c:	2938      	cmp	r1, #56	@ 0x38
 800286e:	dd00      	ble.n	8002872 <__aeabi_dsub+0x25a>
 8002870:	e72f      	b.n	80026d2 <__aeabi_dsub+0xba>
 8002872:	468a      	mov	sl, r1
 8002874:	e718      	b.n	80026a8 <__aeabi_dsub+0x90>
 8002876:	2201      	movs	r2, #1
 8002878:	4051      	eors	r1, r2
 800287a:	428e      	cmp	r6, r1
 800287c:	d1d0      	bne.n	8002820 <__aeabi_dsub+0x208>
 800287e:	4653      	mov	r3, sl
 8002880:	2b00      	cmp	r3, #0
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0x26e>
 8002884:	e0be      	b.n	8002a04 <__aeabi_dsub+0x3ec>
 8002886:	2f00      	cmp	r7, #0
 8002888:	d000      	beq.n	800288c <__aeabi_dsub+0x274>
 800288a:	e138      	b.n	8002afe <__aeabi_dsub+0x4e6>
 800288c:	46ca      	mov	sl, r9
 800288e:	0022      	movs	r2, r4
 8002890:	4302      	orrs	r2, r0
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x27e>
 8002894:	e1e2      	b.n	8002c5c <__aeabi_dsub+0x644>
 8002896:	4653      	mov	r3, sl
 8002898:	1e59      	subs	r1, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x288>
 800289e:	e20d      	b.n	8002cbc <__aeabi_dsub+0x6a4>
 80028a0:	4a32      	ldr	r2, [pc, #200]	@ (800296c <__aeabi_dsub+0x354>)
 80028a2:	4592      	cmp	sl, r2
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x290>
 80028a6:	e1d2      	b.n	8002c4e <__aeabi_dsub+0x636>
 80028a8:	2701      	movs	r7, #1
 80028aa:	2938      	cmp	r1, #56	@ 0x38
 80028ac:	dc13      	bgt.n	80028d6 <__aeabi_dsub+0x2be>
 80028ae:	291f      	cmp	r1, #31
 80028b0:	dd00      	ble.n	80028b4 <__aeabi_dsub+0x29c>
 80028b2:	e1ee      	b.n	8002c92 <__aeabi_dsub+0x67a>
 80028b4:	2220      	movs	r2, #32
 80028b6:	9b02      	ldr	r3, [sp, #8]
 80028b8:	1a52      	subs	r2, r2, r1
 80028ba:	0025      	movs	r5, r4
 80028bc:	0007      	movs	r7, r0
 80028be:	469a      	mov	sl, r3
 80028c0:	40cc      	lsrs	r4, r1
 80028c2:	4090      	lsls	r0, r2
 80028c4:	4095      	lsls	r5, r2
 80028c6:	40cf      	lsrs	r7, r1
 80028c8:	44a2      	add	sl, r4
 80028ca:	1e42      	subs	r2, r0, #1
 80028cc:	4190      	sbcs	r0, r2
 80028ce:	4653      	mov	r3, sl
 80028d0:	432f      	orrs	r7, r5
 80028d2:	4307      	orrs	r7, r0
 80028d4:	9302      	str	r3, [sp, #8]
 80028d6:	003d      	movs	r5, r7
 80028d8:	4465      	add	r5, ip
 80028da:	4565      	cmp	r5, ip
 80028dc:	4192      	sbcs	r2, r2
 80028de:	9b02      	ldr	r3, [sp, #8]
 80028e0:	4252      	negs	r2, r2
 80028e2:	464f      	mov	r7, r9
 80028e4:	18d4      	adds	r4, r2, r3
 80028e6:	e780      	b.n	80027ea <__aeabi_dsub+0x1d2>
 80028e8:	4a23      	ldr	r2, [pc, #140]	@ (8002978 <__aeabi_dsub+0x360>)
 80028ea:	1c7d      	adds	r5, r7, #1
 80028ec:	4215      	tst	r5, r2
 80028ee:	d000      	beq.n	80028f2 <__aeabi_dsub+0x2da>
 80028f0:	e0aa      	b.n	8002a48 <__aeabi_dsub+0x430>
 80028f2:	4662      	mov	r2, ip
 80028f4:	0025      	movs	r5, r4
 80028f6:	9b02      	ldr	r3, [sp, #8]
 80028f8:	4305      	orrs	r5, r0
 80028fa:	431a      	orrs	r2, r3
 80028fc:	2f00      	cmp	r7, #0
 80028fe:	d000      	beq.n	8002902 <__aeabi_dsub+0x2ea>
 8002900:	e0f5      	b.n	8002aee <__aeabi_dsub+0x4d6>
 8002902:	2d00      	cmp	r5, #0
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x2f0>
 8002906:	e16b      	b.n	8002be0 <__aeabi_dsub+0x5c8>
 8002908:	2a00      	cmp	r2, #0
 800290a:	d100      	bne.n	800290e <__aeabi_dsub+0x2f6>
 800290c:	e152      	b.n	8002bb4 <__aeabi_dsub+0x59c>
 800290e:	4663      	mov	r3, ip
 8002910:	1ac5      	subs	r5, r0, r3
 8002912:	9b02      	ldr	r3, [sp, #8]
 8002914:	1ae2      	subs	r2, r4, r3
 8002916:	42a8      	cmp	r0, r5
 8002918:	419b      	sbcs	r3, r3
 800291a:	425b      	negs	r3, r3
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	d400      	bmi.n	8002924 <__aeabi_dsub+0x30c>
 8002922:	e1d5      	b.n	8002cd0 <__aeabi_dsub+0x6b8>
 8002924:	4663      	mov	r3, ip
 8002926:	1a1d      	subs	r5, r3, r0
 8002928:	45ac      	cmp	ip, r5
 800292a:	4192      	sbcs	r2, r2
 800292c:	2601      	movs	r6, #1
 800292e:	9b02      	ldr	r3, [sp, #8]
 8002930:	4252      	negs	r2, r2
 8002932:	1b1c      	subs	r4, r3, r4
 8002934:	4688      	mov	r8, r1
 8002936:	1aa4      	subs	r4, r4, r2
 8002938:	400e      	ands	r6, r1
 800293a:	e6f6      	b.n	800272a <__aeabi_dsub+0x112>
 800293c:	4297      	cmp	r7, r2
 800293e:	d03f      	beq.n	80029c0 <__aeabi_dsub+0x3a8>
 8002940:	4652      	mov	r2, sl
 8002942:	2501      	movs	r5, #1
 8002944:	2a38      	cmp	r2, #56	@ 0x38
 8002946:	dd00      	ble.n	800294a <__aeabi_dsub+0x332>
 8002948:	e74a      	b.n	80027e0 <__aeabi_dsub+0x1c8>
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	9b02      	ldr	r3, [sp, #8]
 800294e:	0412      	lsls	r2, r2, #16
 8002950:	4313      	orrs	r3, r2
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	e72d      	b.n	80027b2 <__aeabi_dsub+0x19a>
 8002956:	003c      	movs	r4, r7
 8002958:	2500      	movs	r5, #0
 800295a:	2200      	movs	r2, #0
 800295c:	e705      	b.n	800276a <__aeabi_dsub+0x152>
 800295e:	2307      	movs	r3, #7
 8002960:	402b      	ands	r3, r5
 8002962:	2b00      	cmp	r3, #0
 8002964:	d000      	beq.n	8002968 <__aeabi_dsub+0x350>
 8002966:	e6e2      	b.n	800272e <__aeabi_dsub+0x116>
 8002968:	e06b      	b.n	8002a42 <__aeabi_dsub+0x42a>
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	000007ff 	.word	0x000007ff
 8002970:	ff7fffff 	.word	0xff7fffff
 8002974:	fffff801 	.word	0xfffff801
 8002978:	000007fe 	.word	0x000007fe
 800297c:	0028      	movs	r0, r5
 800297e:	f000 fa8f 	bl	8002ea0 <__clzsi2>
 8002982:	0003      	movs	r3, r0
 8002984:	3318      	adds	r3, #24
 8002986:	2b1f      	cmp	r3, #31
 8002988:	dc00      	bgt.n	800298c <__aeabi_dsub+0x374>
 800298a:	e6b4      	b.n	80026f6 <__aeabi_dsub+0xde>
 800298c:	002a      	movs	r2, r5
 800298e:	3808      	subs	r0, #8
 8002990:	4082      	lsls	r2, r0
 8002992:	429f      	cmp	r7, r3
 8002994:	dd00      	ble.n	8002998 <__aeabi_dsub+0x380>
 8002996:	e0b9      	b.n	8002b0c <__aeabi_dsub+0x4f4>
 8002998:	1bdb      	subs	r3, r3, r7
 800299a:	1c58      	adds	r0, r3, #1
 800299c:	281f      	cmp	r0, #31
 800299e:	dc00      	bgt.n	80029a2 <__aeabi_dsub+0x38a>
 80029a0:	e1a0      	b.n	8002ce4 <__aeabi_dsub+0x6cc>
 80029a2:	0015      	movs	r5, r2
 80029a4:	3b1f      	subs	r3, #31
 80029a6:	40dd      	lsrs	r5, r3
 80029a8:	2820      	cmp	r0, #32
 80029aa:	d005      	beq.n	80029b8 <__aeabi_dsub+0x3a0>
 80029ac:	2340      	movs	r3, #64	@ 0x40
 80029ae:	1a1b      	subs	r3, r3, r0
 80029b0:	409a      	lsls	r2, r3
 80029b2:	1e53      	subs	r3, r2, #1
 80029b4:	419a      	sbcs	r2, r3
 80029b6:	4315      	orrs	r5, r2
 80029b8:	2307      	movs	r3, #7
 80029ba:	2700      	movs	r7, #0
 80029bc:	402b      	ands	r3, r5
 80029be:	e7d0      	b.n	8002962 <__aeabi_dsub+0x34a>
 80029c0:	08c0      	lsrs	r0, r0, #3
 80029c2:	0762      	lsls	r2, r4, #29
 80029c4:	4302      	orrs	r2, r0
 80029c6:	08e4      	lsrs	r4, r4, #3
 80029c8:	e737      	b.n	800283a <__aeabi_dsub+0x222>
 80029ca:	08ea      	lsrs	r2, r5, #3
 80029cc:	0763      	lsls	r3, r4, #29
 80029ce:	431a      	orrs	r2, r3
 80029d0:	4bd3      	ldr	r3, [pc, #844]	@ (8002d20 <__aeabi_dsub+0x708>)
 80029d2:	08e4      	lsrs	r4, r4, #3
 80029d4:	429f      	cmp	r7, r3
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x3c2>
 80029d8:	e72f      	b.n	800283a <__aeabi_dsub+0x222>
 80029da:	0324      	lsls	r4, r4, #12
 80029dc:	0b25      	lsrs	r5, r4, #12
 80029de:	057c      	lsls	r4, r7, #21
 80029e0:	0d64      	lsrs	r4, r4, #21
 80029e2:	e6c2      	b.n	800276a <__aeabi_dsub+0x152>
 80029e4:	46ca      	mov	sl, r9
 80029e6:	0022      	movs	r2, r4
 80029e8:	4302      	orrs	r2, r0
 80029ea:	d158      	bne.n	8002a9e <__aeabi_dsub+0x486>
 80029ec:	4663      	mov	r3, ip
 80029ee:	000e      	movs	r6, r1
 80029f0:	9c02      	ldr	r4, [sp, #8]
 80029f2:	9303      	str	r3, [sp, #12]
 80029f4:	9b03      	ldr	r3, [sp, #12]
 80029f6:	4657      	mov	r7, sl
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	e7e7      	b.n	80029cc <__aeabi_dsub+0x3b4>
 80029fc:	4cc9      	ldr	r4, [pc, #804]	@ (8002d24 <__aeabi_dsub+0x70c>)
 80029fe:	1aff      	subs	r7, r7, r3
 8002a00:	4014      	ands	r4, r2
 8002a02:	e692      	b.n	800272a <__aeabi_dsub+0x112>
 8002a04:	4dc8      	ldr	r5, [pc, #800]	@ (8002d28 <__aeabi_dsub+0x710>)
 8002a06:	1c7a      	adds	r2, r7, #1
 8002a08:	422a      	tst	r2, r5
 8002a0a:	d000      	beq.n	8002a0e <__aeabi_dsub+0x3f6>
 8002a0c:	e084      	b.n	8002b18 <__aeabi_dsub+0x500>
 8002a0e:	0022      	movs	r2, r4
 8002a10:	4302      	orrs	r2, r0
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d000      	beq.n	8002a18 <__aeabi_dsub+0x400>
 8002a16:	e0ef      	b.n	8002bf8 <__aeabi_dsub+0x5e0>
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x406>
 8002a1c:	e0e5      	b.n	8002bea <__aeabi_dsub+0x5d2>
 8002a1e:	4662      	mov	r2, ip
 8002a20:	9902      	ldr	r1, [sp, #8]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x410>
 8002a26:	e0c5      	b.n	8002bb4 <__aeabi_dsub+0x59c>
 8002a28:	4663      	mov	r3, ip
 8002a2a:	18c5      	adds	r5, r0, r3
 8002a2c:	468c      	mov	ip, r1
 8002a2e:	4285      	cmp	r5, r0
 8002a30:	4180      	sbcs	r0, r0
 8002a32:	4464      	add	r4, ip
 8002a34:	4240      	negs	r0, r0
 8002a36:	1824      	adds	r4, r4, r0
 8002a38:	0223      	lsls	r3, r4, #8
 8002a3a:	d502      	bpl.n	8002a42 <__aeabi_dsub+0x42a>
 8002a3c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d24 <__aeabi_dsub+0x70c>)
 8002a3e:	3701      	adds	r7, #1
 8002a40:	401c      	ands	r4, r3
 8002a42:	46ba      	mov	sl, r7
 8002a44:	9503      	str	r5, [sp, #12]
 8002a46:	e7d5      	b.n	80029f4 <__aeabi_dsub+0x3dc>
 8002a48:	4662      	mov	r2, ip
 8002a4a:	1a85      	subs	r5, r0, r2
 8002a4c:	42a8      	cmp	r0, r5
 8002a4e:	4192      	sbcs	r2, r2
 8002a50:	4252      	negs	r2, r2
 8002a52:	4691      	mov	r9, r2
 8002a54:	9b02      	ldr	r3, [sp, #8]
 8002a56:	1ae3      	subs	r3, r4, r3
 8002a58:	001a      	movs	r2, r3
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	0013      	movs	r3, r2
 8002a60:	4691      	mov	r9, r2
 8002a62:	021a      	lsls	r2, r3, #8
 8002a64:	d46c      	bmi.n	8002b40 <__aeabi_dsub+0x528>
 8002a66:	464a      	mov	r2, r9
 8002a68:	464c      	mov	r4, r9
 8002a6a:	432a      	orrs	r2, r5
 8002a6c:	d000      	beq.n	8002a70 <__aeabi_dsub+0x458>
 8002a6e:	e63a      	b.n	80026e6 <__aeabi_dsub+0xce>
 8002a70:	2600      	movs	r6, #0
 8002a72:	2400      	movs	r4, #0
 8002a74:	2500      	movs	r5, #0
 8002a76:	e678      	b.n	800276a <__aeabi_dsub+0x152>
 8002a78:	9902      	ldr	r1, [sp, #8]
 8002a7a:	4653      	mov	r3, sl
 8002a7c:	000d      	movs	r5, r1
 8002a7e:	3a20      	subs	r2, #32
 8002a80:	40d5      	lsrs	r5, r2
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d006      	beq.n	8002a94 <__aeabi_dsub+0x47c>
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	1ad2      	subs	r2, r2, r3
 8002a8a:	000b      	movs	r3, r1
 8002a8c:	4093      	lsls	r3, r2
 8002a8e:	4662      	mov	r2, ip
 8002a90:	431a      	orrs	r2, r3
 8002a92:	4693      	mov	fp, r2
 8002a94:	465b      	mov	r3, fp
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	4193      	sbcs	r3, r2
 8002a9a:	431d      	orrs	r5, r3
 8002a9c:	e619      	b.n	80026d2 <__aeabi_dsub+0xba>
 8002a9e:	4653      	mov	r3, sl
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x490>
 8002aa6:	e0c6      	b.n	8002c36 <__aeabi_dsub+0x61e>
 8002aa8:	4e9d      	ldr	r6, [pc, #628]	@ (8002d20 <__aeabi_dsub+0x708>)
 8002aaa:	45b2      	cmp	sl, r6
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x498>
 8002aae:	e6bd      	b.n	800282c <__aeabi_dsub+0x214>
 8002ab0:	4688      	mov	r8, r1
 8002ab2:	000e      	movs	r6, r1
 8002ab4:	2501      	movs	r5, #1
 8002ab6:	2a38      	cmp	r2, #56	@ 0x38
 8002ab8:	dc10      	bgt.n	8002adc <__aeabi_dsub+0x4c4>
 8002aba:	2a1f      	cmp	r2, #31
 8002abc:	dc7f      	bgt.n	8002bbe <__aeabi_dsub+0x5a6>
 8002abe:	2120      	movs	r1, #32
 8002ac0:	0025      	movs	r5, r4
 8002ac2:	1a89      	subs	r1, r1, r2
 8002ac4:	0007      	movs	r7, r0
 8002ac6:	4088      	lsls	r0, r1
 8002ac8:	408d      	lsls	r5, r1
 8002aca:	40d7      	lsrs	r7, r2
 8002acc:	40d4      	lsrs	r4, r2
 8002ace:	1e41      	subs	r1, r0, #1
 8002ad0:	4188      	sbcs	r0, r1
 8002ad2:	9b02      	ldr	r3, [sp, #8]
 8002ad4:	433d      	orrs	r5, r7
 8002ad6:	1b1b      	subs	r3, r3, r4
 8002ad8:	4305      	orrs	r5, r0
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	4662      	mov	r2, ip
 8002ade:	1b55      	subs	r5, r2, r5
 8002ae0:	45ac      	cmp	ip, r5
 8002ae2:	4192      	sbcs	r2, r2
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	4252      	negs	r2, r2
 8002ae8:	464f      	mov	r7, r9
 8002aea:	1a9c      	subs	r4, r3, r2
 8002aec:	e5f6      	b.n	80026dc <__aeabi_dsub+0xc4>
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x4dc>
 8002af2:	e0b7      	b.n	8002c64 <__aeabi_dsub+0x64c>
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	d100      	bne.n	8002afa <__aeabi_dsub+0x4e2>
 8002af8:	e0f0      	b.n	8002cdc <__aeabi_dsub+0x6c4>
 8002afa:	2601      	movs	r6, #1
 8002afc:	400e      	ands	r6, r1
 8002afe:	4663      	mov	r3, ip
 8002b00:	9802      	ldr	r0, [sp, #8]
 8002b02:	08d9      	lsrs	r1, r3, #3
 8002b04:	0742      	lsls	r2, r0, #29
 8002b06:	430a      	orrs	r2, r1
 8002b08:	08c4      	lsrs	r4, r0, #3
 8002b0a:	e696      	b.n	800283a <__aeabi_dsub+0x222>
 8002b0c:	4c85      	ldr	r4, [pc, #532]	@ (8002d24 <__aeabi_dsub+0x70c>)
 8002b0e:	1aff      	subs	r7, r7, r3
 8002b10:	4014      	ands	r4, r2
 8002b12:	0762      	lsls	r2, r4, #29
 8002b14:	08e4      	lsrs	r4, r4, #3
 8002b16:	e760      	b.n	80029da <__aeabi_dsub+0x3c2>
 8002b18:	4981      	ldr	r1, [pc, #516]	@ (8002d20 <__aeabi_dsub+0x708>)
 8002b1a:	428a      	cmp	r2, r1
 8002b1c:	d100      	bne.n	8002b20 <__aeabi_dsub+0x508>
 8002b1e:	e0c9      	b.n	8002cb4 <__aeabi_dsub+0x69c>
 8002b20:	4663      	mov	r3, ip
 8002b22:	18c1      	adds	r1, r0, r3
 8002b24:	4281      	cmp	r1, r0
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	9b02      	ldr	r3, [sp, #8]
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	18e3      	adds	r3, r4, r3
 8002b2e:	181b      	adds	r3, r3, r0
 8002b30:	07dd      	lsls	r5, r3, #31
 8002b32:	085c      	lsrs	r4, r3, #1
 8002b34:	2307      	movs	r3, #7
 8002b36:	0849      	lsrs	r1, r1, #1
 8002b38:	430d      	orrs	r5, r1
 8002b3a:	0017      	movs	r7, r2
 8002b3c:	402b      	ands	r3, r5
 8002b3e:	e710      	b.n	8002962 <__aeabi_dsub+0x34a>
 8002b40:	4663      	mov	r3, ip
 8002b42:	1a1d      	subs	r5, r3, r0
 8002b44:	45ac      	cmp	ip, r5
 8002b46:	4192      	sbcs	r2, r2
 8002b48:	2601      	movs	r6, #1
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	4252      	negs	r2, r2
 8002b4e:	1b1c      	subs	r4, r3, r4
 8002b50:	4688      	mov	r8, r1
 8002b52:	1aa4      	subs	r4, r4, r2
 8002b54:	400e      	ands	r6, r1
 8002b56:	e5c6      	b.n	80026e6 <__aeabi_dsub+0xce>
 8002b58:	4663      	mov	r3, ip
 8002b5a:	18c5      	adds	r5, r0, r3
 8002b5c:	9b02      	ldr	r3, [sp, #8]
 8002b5e:	4285      	cmp	r5, r0
 8002b60:	4180      	sbcs	r0, r0
 8002b62:	469c      	mov	ip, r3
 8002b64:	4240      	negs	r0, r0
 8002b66:	4464      	add	r4, ip
 8002b68:	1824      	adds	r4, r4, r0
 8002b6a:	2701      	movs	r7, #1
 8002b6c:	0223      	lsls	r3, r4, #8
 8002b6e:	d400      	bmi.n	8002b72 <__aeabi_dsub+0x55a>
 8002b70:	e6f5      	b.n	800295e <__aeabi_dsub+0x346>
 8002b72:	2702      	movs	r7, #2
 8002b74:	e641      	b.n	80027fa <__aeabi_dsub+0x1e2>
 8002b76:	4663      	mov	r3, ip
 8002b78:	1ac5      	subs	r5, r0, r3
 8002b7a:	42a8      	cmp	r0, r5
 8002b7c:	4180      	sbcs	r0, r0
 8002b7e:	9b02      	ldr	r3, [sp, #8]
 8002b80:	4240      	negs	r0, r0
 8002b82:	1ae4      	subs	r4, r4, r3
 8002b84:	2701      	movs	r7, #1
 8002b86:	1a24      	subs	r4, r4, r0
 8002b88:	e5a8      	b.n	80026dc <__aeabi_dsub+0xc4>
 8002b8a:	9d02      	ldr	r5, [sp, #8]
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	002b      	movs	r3, r5
 8002b90:	3a20      	subs	r2, #32
 8002b92:	40d3      	lsrs	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	4653      	mov	r3, sl
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d006      	beq.n	8002baa <__aeabi_dsub+0x592>
 8002b9c:	2240      	movs	r2, #64	@ 0x40
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	002b      	movs	r3, r5
 8002ba2:	4093      	lsls	r3, r2
 8002ba4:	4662      	mov	r2, ip
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	4693      	mov	fp, r2
 8002baa:	465d      	mov	r5, fp
 8002bac:	1e6b      	subs	r3, r5, #1
 8002bae:	419d      	sbcs	r5, r3
 8002bb0:	430d      	orrs	r5, r1
 8002bb2:	e615      	b.n	80027e0 <__aeabi_dsub+0x1c8>
 8002bb4:	0762      	lsls	r2, r4, #29
 8002bb6:	08c0      	lsrs	r0, r0, #3
 8002bb8:	4302      	orrs	r2, r0
 8002bba:	08e4      	lsrs	r4, r4, #3
 8002bbc:	e70d      	b.n	80029da <__aeabi_dsub+0x3c2>
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0027      	movs	r7, r4
 8002bc2:	3920      	subs	r1, #32
 8002bc4:	40cf      	lsrs	r7, r1
 8002bc6:	2a20      	cmp	r2, #32
 8002bc8:	d005      	beq.n	8002bd6 <__aeabi_dsub+0x5be>
 8002bca:	2140      	movs	r1, #64	@ 0x40
 8002bcc:	1a8a      	subs	r2, r1, r2
 8002bce:	4094      	lsls	r4, r2
 8002bd0:	0025      	movs	r5, r4
 8002bd2:	4305      	orrs	r5, r0
 8002bd4:	9503      	str	r5, [sp, #12]
 8002bd6:	9d03      	ldr	r5, [sp, #12]
 8002bd8:	1e6a      	subs	r2, r5, #1
 8002bda:	4195      	sbcs	r5, r2
 8002bdc:	433d      	orrs	r5, r7
 8002bde:	e77d      	b.n	8002adc <__aeabi_dsub+0x4c4>
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d100      	bne.n	8002be6 <__aeabi_dsub+0x5ce>
 8002be4:	e744      	b.n	8002a70 <__aeabi_dsub+0x458>
 8002be6:	2601      	movs	r6, #1
 8002be8:	400e      	ands	r6, r1
 8002bea:	4663      	mov	r3, ip
 8002bec:	08d9      	lsrs	r1, r3, #3
 8002bee:	9b02      	ldr	r3, [sp, #8]
 8002bf0:	075a      	lsls	r2, r3, #29
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	08dc      	lsrs	r4, r3, #3
 8002bf6:	e6f0      	b.n	80029da <__aeabi_dsub+0x3c2>
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	d028      	beq.n	8002c4e <__aeabi_dsub+0x636>
 8002bfc:	4662      	mov	r2, ip
 8002bfe:	9f02      	ldr	r7, [sp, #8]
 8002c00:	08c0      	lsrs	r0, r0, #3
 8002c02:	433a      	orrs	r2, r7
 8002c04:	d100      	bne.n	8002c08 <__aeabi_dsub+0x5f0>
 8002c06:	e6dc      	b.n	80029c2 <__aeabi_dsub+0x3aa>
 8002c08:	0762      	lsls	r2, r4, #29
 8002c0a:	4310      	orrs	r0, r2
 8002c0c:	2280      	movs	r2, #128	@ 0x80
 8002c0e:	08e4      	lsrs	r4, r4, #3
 8002c10:	0312      	lsls	r2, r2, #12
 8002c12:	4214      	tst	r4, r2
 8002c14:	d009      	beq.n	8002c2a <__aeabi_dsub+0x612>
 8002c16:	08fd      	lsrs	r5, r7, #3
 8002c18:	4215      	tst	r5, r2
 8002c1a:	d106      	bne.n	8002c2a <__aeabi_dsub+0x612>
 8002c1c:	4663      	mov	r3, ip
 8002c1e:	2601      	movs	r6, #1
 8002c20:	002c      	movs	r4, r5
 8002c22:	08d8      	lsrs	r0, r3, #3
 8002c24:	077b      	lsls	r3, r7, #29
 8002c26:	4318      	orrs	r0, r3
 8002c28:	400e      	ands	r6, r1
 8002c2a:	0f42      	lsrs	r2, r0, #29
 8002c2c:	00c0      	lsls	r0, r0, #3
 8002c2e:	08c0      	lsrs	r0, r0, #3
 8002c30:	0752      	lsls	r2, r2, #29
 8002c32:	4302      	orrs	r2, r0
 8002c34:	e601      	b.n	800283a <__aeabi_dsub+0x222>
 8002c36:	4663      	mov	r3, ip
 8002c38:	1a1d      	subs	r5, r3, r0
 8002c3a:	45ac      	cmp	ip, r5
 8002c3c:	4192      	sbcs	r2, r2
 8002c3e:	9b02      	ldr	r3, [sp, #8]
 8002c40:	4252      	negs	r2, r2
 8002c42:	1b1c      	subs	r4, r3, r4
 8002c44:	000e      	movs	r6, r1
 8002c46:	4688      	mov	r8, r1
 8002c48:	2701      	movs	r7, #1
 8002c4a:	1aa4      	subs	r4, r4, r2
 8002c4c:	e546      	b.n	80026dc <__aeabi_dsub+0xc4>
 8002c4e:	4663      	mov	r3, ip
 8002c50:	08d9      	lsrs	r1, r3, #3
 8002c52:	9b02      	ldr	r3, [sp, #8]
 8002c54:	075a      	lsls	r2, r3, #29
 8002c56:	430a      	orrs	r2, r1
 8002c58:	08dc      	lsrs	r4, r3, #3
 8002c5a:	e5ee      	b.n	800283a <__aeabi_dsub+0x222>
 8002c5c:	4663      	mov	r3, ip
 8002c5e:	9c02      	ldr	r4, [sp, #8]
 8002c60:	9303      	str	r3, [sp, #12]
 8002c62:	e6c7      	b.n	80029f4 <__aeabi_dsub+0x3dc>
 8002c64:	08c0      	lsrs	r0, r0, #3
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d100      	bne.n	8002c6c <__aeabi_dsub+0x654>
 8002c6a:	e6aa      	b.n	80029c2 <__aeabi_dsub+0x3aa>
 8002c6c:	0762      	lsls	r2, r4, #29
 8002c6e:	4310      	orrs	r0, r2
 8002c70:	2280      	movs	r2, #128	@ 0x80
 8002c72:	08e4      	lsrs	r4, r4, #3
 8002c74:	0312      	lsls	r2, r2, #12
 8002c76:	4214      	tst	r4, r2
 8002c78:	d0d7      	beq.n	8002c2a <__aeabi_dsub+0x612>
 8002c7a:	9f02      	ldr	r7, [sp, #8]
 8002c7c:	08fd      	lsrs	r5, r7, #3
 8002c7e:	4215      	tst	r5, r2
 8002c80:	d1d3      	bne.n	8002c2a <__aeabi_dsub+0x612>
 8002c82:	4663      	mov	r3, ip
 8002c84:	2601      	movs	r6, #1
 8002c86:	08d8      	lsrs	r0, r3, #3
 8002c88:	077b      	lsls	r3, r7, #29
 8002c8a:	002c      	movs	r4, r5
 8002c8c:	4318      	orrs	r0, r3
 8002c8e:	400e      	ands	r6, r1
 8002c90:	e7cb      	b.n	8002c2a <__aeabi_dsub+0x612>
 8002c92:	000a      	movs	r2, r1
 8002c94:	0027      	movs	r7, r4
 8002c96:	3a20      	subs	r2, #32
 8002c98:	40d7      	lsrs	r7, r2
 8002c9a:	2920      	cmp	r1, #32
 8002c9c:	d005      	beq.n	8002caa <__aeabi_dsub+0x692>
 8002c9e:	2240      	movs	r2, #64	@ 0x40
 8002ca0:	1a52      	subs	r2, r2, r1
 8002ca2:	4094      	lsls	r4, r2
 8002ca4:	0025      	movs	r5, r4
 8002ca6:	4305      	orrs	r5, r0
 8002ca8:	9503      	str	r5, [sp, #12]
 8002caa:	9d03      	ldr	r5, [sp, #12]
 8002cac:	1e6a      	subs	r2, r5, #1
 8002cae:	4195      	sbcs	r5, r2
 8002cb0:	432f      	orrs	r7, r5
 8002cb2:	e610      	b.n	80028d6 <__aeabi_dsub+0x2be>
 8002cb4:	0014      	movs	r4, r2
 8002cb6:	2500      	movs	r5, #0
 8002cb8:	2200      	movs	r2, #0
 8002cba:	e556      	b.n	800276a <__aeabi_dsub+0x152>
 8002cbc:	9b02      	ldr	r3, [sp, #8]
 8002cbe:	4460      	add	r0, ip
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	4560      	cmp	r0, ip
 8002cc4:	4192      	sbcs	r2, r2
 8002cc6:	444c      	add	r4, r9
 8002cc8:	4252      	negs	r2, r2
 8002cca:	0005      	movs	r5, r0
 8002ccc:	18a4      	adds	r4, r4, r2
 8002cce:	e74c      	b.n	8002b6a <__aeabi_dsub+0x552>
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	001c      	movs	r4, r3
 8002cd4:	432a      	orrs	r2, r5
 8002cd6:	d000      	beq.n	8002cda <__aeabi_dsub+0x6c2>
 8002cd8:	e6b3      	b.n	8002a42 <__aeabi_dsub+0x42a>
 8002cda:	e6c9      	b.n	8002a70 <__aeabi_dsub+0x458>
 8002cdc:	2480      	movs	r4, #128	@ 0x80
 8002cde:	2600      	movs	r6, #0
 8002ce0:	0324      	lsls	r4, r4, #12
 8002ce2:	e5ae      	b.n	8002842 <__aeabi_dsub+0x22a>
 8002ce4:	2120      	movs	r1, #32
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	1a09      	subs	r1, r1, r0
 8002cea:	e517      	b.n	800271c <__aeabi_dsub+0x104>
 8002cec:	2200      	movs	r2, #0
 8002cee:	2500      	movs	r5, #0
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8002d20 <__aeabi_dsub+0x708>)
 8002cf2:	e53a      	b.n	800276a <__aeabi_dsub+0x152>
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	d100      	bne.n	8002cfa <__aeabi_dsub+0x6e2>
 8002cf8:	e5f6      	b.n	80028e8 <__aeabi_dsub+0x2d0>
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1bda      	subs	r2, r3, r7
 8002cfe:	4692      	mov	sl, r2
 8002d00:	2f00      	cmp	r7, #0
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x6ee>
 8002d04:	e66f      	b.n	80029e6 <__aeabi_dsub+0x3ce>
 8002d06:	2a38      	cmp	r2, #56	@ 0x38
 8002d08:	dc05      	bgt.n	8002d16 <__aeabi_dsub+0x6fe>
 8002d0a:	2680      	movs	r6, #128	@ 0x80
 8002d0c:	0436      	lsls	r6, r6, #16
 8002d0e:	4334      	orrs	r4, r6
 8002d10:	4688      	mov	r8, r1
 8002d12:	000e      	movs	r6, r1
 8002d14:	e6d1      	b.n	8002aba <__aeabi_dsub+0x4a2>
 8002d16:	4688      	mov	r8, r1
 8002d18:	000e      	movs	r6, r1
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	e6de      	b.n	8002adc <__aeabi_dsub+0x4c4>
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	000007ff 	.word	0x000007ff
 8002d24:	ff7fffff 	.word	0xff7fffff
 8002d28:	000007fe 	.word	0x000007fe
 8002d2c:	2d00      	cmp	r5, #0
 8002d2e:	d100      	bne.n	8002d32 <__aeabi_dsub+0x71a>
 8002d30:	e668      	b.n	8002a04 <__aeabi_dsub+0x3ec>
 8002d32:	464b      	mov	r3, r9
 8002d34:	1bd9      	subs	r1, r3, r7
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d101      	bne.n	8002d3e <__aeabi_dsub+0x726>
 8002d3a:	468a      	mov	sl, r1
 8002d3c:	e5a7      	b.n	800288e <__aeabi_dsub+0x276>
 8002d3e:	2701      	movs	r7, #1
 8002d40:	2938      	cmp	r1, #56	@ 0x38
 8002d42:	dd00      	ble.n	8002d46 <__aeabi_dsub+0x72e>
 8002d44:	e5c7      	b.n	80028d6 <__aeabi_dsub+0x2be>
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	0412      	lsls	r2, r2, #16
 8002d4a:	4314      	orrs	r4, r2
 8002d4c:	e5af      	b.n	80028ae <__aeabi_dsub+0x296>
 8002d4e:	46c0      	nop			@ (mov r8, r8)

08002d50 <__aeabi_d2iz>:
 8002d50:	000b      	movs	r3, r1
 8002d52:	0002      	movs	r2, r0
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	4d16      	ldr	r5, [pc, #88]	@ (8002db0 <__aeabi_d2iz+0x60>)
 8002d58:	030c      	lsls	r4, r1, #12
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	0049      	lsls	r1, r1, #1
 8002d5e:	2000      	movs	r0, #0
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	0b24      	lsrs	r4, r4, #12
 8002d66:	0d49      	lsrs	r1, r1, #21
 8002d68:	0fde      	lsrs	r6, r3, #31
 8002d6a:	42a9      	cmp	r1, r5
 8002d6c:	dd04      	ble.n	8002d78 <__aeabi_d2iz+0x28>
 8002d6e:	4811      	ldr	r0, [pc, #68]	@ (8002db4 <__aeabi_d2iz+0x64>)
 8002d70:	4281      	cmp	r1, r0
 8002d72:	dd03      	ble.n	8002d7c <__aeabi_d2iz+0x2c>
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <__aeabi_d2iz+0x68>)
 8002d76:	18f0      	adds	r0, r6, r3
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	2080      	movs	r0, #128	@ 0x80
 8002d7e:	0340      	lsls	r0, r0, #13
 8002d80:	4320      	orrs	r0, r4
 8002d82:	4c0e      	ldr	r4, [pc, #56]	@ (8002dbc <__aeabi_d2iz+0x6c>)
 8002d84:	1a64      	subs	r4, r4, r1
 8002d86:	2c1f      	cmp	r4, #31
 8002d88:	dd08      	ble.n	8002d9c <__aeabi_d2iz+0x4c>
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <__aeabi_d2iz+0x70>)
 8002d8c:	1a5b      	subs	r3, r3, r1
 8002d8e:	40d8      	lsrs	r0, r3
 8002d90:	0003      	movs	r3, r0
 8002d92:	4258      	negs	r0, r3
 8002d94:	2e00      	cmp	r6, #0
 8002d96:	d1ef      	bne.n	8002d78 <__aeabi_d2iz+0x28>
 8002d98:	0018      	movs	r0, r3
 8002d9a:	e7ed      	b.n	8002d78 <__aeabi_d2iz+0x28>
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <__aeabi_d2iz+0x74>)
 8002d9e:	9a00      	ldr	r2, [sp, #0]
 8002da0:	469c      	mov	ip, r3
 8002da2:	0003      	movs	r3, r0
 8002da4:	4461      	add	r1, ip
 8002da6:	408b      	lsls	r3, r1
 8002da8:	40e2      	lsrs	r2, r4
 8002daa:	4313      	orrs	r3, r2
 8002dac:	e7f1      	b.n	8002d92 <__aeabi_d2iz+0x42>
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	000003fe 	.word	0x000003fe
 8002db4:	0000041d 	.word	0x0000041d
 8002db8:	7fffffff 	.word	0x7fffffff
 8002dbc:	00000433 	.word	0x00000433
 8002dc0:	00000413 	.word	0x00000413
 8002dc4:	fffffbed 	.word	0xfffffbed

08002dc8 <__aeabi_i2d>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d016      	beq.n	8002dfc <__aeabi_i2d+0x34>
 8002dce:	17c3      	asrs	r3, r0, #31
 8002dd0:	18c5      	adds	r5, r0, r3
 8002dd2:	405d      	eors	r5, r3
 8002dd4:	0fc4      	lsrs	r4, r0, #31
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 f862 	bl	8002ea0 <__clzsi2>
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <__aeabi_i2d+0x58>)
 8002dde:	1a1b      	subs	r3, r3, r0
 8002de0:	055b      	lsls	r3, r3, #21
 8002de2:	0d5b      	lsrs	r3, r3, #21
 8002de4:	280a      	cmp	r0, #10
 8002de6:	dc14      	bgt.n	8002e12 <__aeabi_i2d+0x4a>
 8002de8:	0002      	movs	r2, r0
 8002dea:	002e      	movs	r6, r5
 8002dec:	3215      	adds	r2, #21
 8002dee:	4096      	lsls	r6, r2
 8002df0:	220b      	movs	r2, #11
 8002df2:	1a12      	subs	r2, r2, r0
 8002df4:	40d5      	lsrs	r5, r2
 8002df6:	032d      	lsls	r5, r5, #12
 8002df8:	0b2d      	lsrs	r5, r5, #12
 8002dfa:	e003      	b.n	8002e04 <__aeabi_i2d+0x3c>
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2500      	movs	r5, #0
 8002e02:	2600      	movs	r6, #0
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	432b      	orrs	r3, r5
 8002e08:	07e4      	lsls	r4, r4, #31
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	0030      	movs	r0, r6
 8002e0e:	0019      	movs	r1, r3
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	380b      	subs	r0, #11
 8002e14:	4085      	lsls	r5, r0
 8002e16:	032d      	lsls	r5, r5, #12
 8002e18:	2600      	movs	r6, #0
 8002e1a:	0b2d      	lsrs	r5, r5, #12
 8002e1c:	e7f2      	b.n	8002e04 <__aeabi_i2d+0x3c>
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	0000041e 	.word	0x0000041e

08002e24 <__aeabi_cdrcmple>:
 8002e24:	4684      	mov	ip, r0
 8002e26:	0010      	movs	r0, r2
 8002e28:	4662      	mov	r2, ip
 8002e2a:	468c      	mov	ip, r1
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	4663      	mov	r3, ip
 8002e30:	e000      	b.n	8002e34 <__aeabi_cdcmpeq>
 8002e32:	46c0      	nop			@ (mov r8, r8)

08002e34 <__aeabi_cdcmpeq>:
 8002e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e36:	f000 f909 	bl	800304c <__ledf2>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d401      	bmi.n	8002e42 <__aeabi_cdcmpeq+0xe>
 8002e3e:	2100      	movs	r1, #0
 8002e40:	42c8      	cmn	r0, r1
 8002e42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002e44 <__aeabi_dcmpeq>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	f000 f849 	bl	8002edc <__eqdf2>
 8002e4a:	4240      	negs	r0, r0
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	bd10      	pop	{r4, pc}

08002e50 <__aeabi_dcmplt>:
 8002e50:	b510      	push	{r4, lr}
 8002e52:	f000 f8fb 	bl	800304c <__ledf2>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	db01      	blt.n	8002e5e <__aeabi_dcmplt+0xe>
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	2001      	movs	r0, #1
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	46c0      	nop			@ (mov r8, r8)

08002e64 <__aeabi_dcmple>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	f000 f8f1 	bl	800304c <__ledf2>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	dd01      	ble.n	8002e72 <__aeabi_dcmple+0xe>
 8002e6e:	2000      	movs	r0, #0
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	2001      	movs	r0, #1
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)

08002e78 <__aeabi_dcmpgt>:
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	f000 f873 	bl	8002f64 <__gedf2>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	dc01      	bgt.n	8002e86 <__aeabi_dcmpgt+0xe>
 8002e82:	2000      	movs	r0, #0
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	2001      	movs	r0, #1
 8002e88:	bd10      	pop	{r4, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)

08002e8c <__aeabi_dcmpge>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	f000 f869 	bl	8002f64 <__gedf2>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	da01      	bge.n	8002e9a <__aeabi_dcmpge+0xe>
 8002e96:	2000      	movs	r0, #0
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)

08002ea0 <__clzsi2>:
 8002ea0:	211c      	movs	r1, #28
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	4298      	cmp	r0, r3
 8002ea8:	d301      	bcc.n	8002eae <__clzsi2+0xe>
 8002eaa:	0c00      	lsrs	r0, r0, #16
 8002eac:	3910      	subs	r1, #16
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	4298      	cmp	r0, r3
 8002eb2:	d301      	bcc.n	8002eb8 <__clzsi2+0x18>
 8002eb4:	0a00      	lsrs	r0, r0, #8
 8002eb6:	3908      	subs	r1, #8
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	4298      	cmp	r0, r3
 8002ebc:	d301      	bcc.n	8002ec2 <__clzsi2+0x22>
 8002ebe:	0900      	lsrs	r0, r0, #4
 8002ec0:	3904      	subs	r1, #4
 8002ec2:	a202      	add	r2, pc, #8	@ (adr r2, 8002ecc <__clzsi2+0x2c>)
 8002ec4:	5c10      	ldrb	r0, [r2, r0]
 8002ec6:	1840      	adds	r0, r0, r1
 8002ec8:	4770      	bx	lr
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	02020304 	.word	0x02020304
 8002ed0:	01010101 	.word	0x01010101
	...

08002edc <__eqdf2>:
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	4657      	mov	r7, sl
 8002ee0:	46de      	mov	lr, fp
 8002ee2:	464e      	mov	r6, r9
 8002ee4:	4645      	mov	r5, r8
 8002ee6:	b5e0      	push	{r5, r6, r7, lr}
 8002ee8:	000d      	movs	r5, r1
 8002eea:	0004      	movs	r4, r0
 8002eec:	0fe8      	lsrs	r0, r5, #31
 8002eee:	4683      	mov	fp, r0
 8002ef0:	0309      	lsls	r1, r1, #12
 8002ef2:	0fd8      	lsrs	r0, r3, #31
 8002ef4:	0b09      	lsrs	r1, r1, #12
 8002ef6:	4682      	mov	sl, r0
 8002ef8:	4819      	ldr	r0, [pc, #100]	@ (8002f60 <__eqdf2+0x84>)
 8002efa:	468c      	mov	ip, r1
 8002efc:	031f      	lsls	r7, r3, #12
 8002efe:	0069      	lsls	r1, r5, #1
 8002f00:	005e      	lsls	r6, r3, #1
 8002f02:	0d49      	lsrs	r1, r1, #21
 8002f04:	0b3f      	lsrs	r7, r7, #12
 8002f06:	0d76      	lsrs	r6, r6, #21
 8002f08:	4281      	cmp	r1, r0
 8002f0a:	d018      	beq.n	8002f3e <__eqdf2+0x62>
 8002f0c:	4286      	cmp	r6, r0
 8002f0e:	d00f      	beq.n	8002f30 <__eqdf2+0x54>
 8002f10:	2001      	movs	r0, #1
 8002f12:	42b1      	cmp	r1, r6
 8002f14:	d10d      	bne.n	8002f32 <__eqdf2+0x56>
 8002f16:	45bc      	cmp	ip, r7
 8002f18:	d10b      	bne.n	8002f32 <__eqdf2+0x56>
 8002f1a:	4294      	cmp	r4, r2
 8002f1c:	d109      	bne.n	8002f32 <__eqdf2+0x56>
 8002f1e:	45d3      	cmp	fp, sl
 8002f20:	d01c      	beq.n	8002f5c <__eqdf2+0x80>
 8002f22:	2900      	cmp	r1, #0
 8002f24:	d105      	bne.n	8002f32 <__eqdf2+0x56>
 8002f26:	4660      	mov	r0, ip
 8002f28:	4320      	orrs	r0, r4
 8002f2a:	1e43      	subs	r3, r0, #1
 8002f2c:	4198      	sbcs	r0, r3
 8002f2e:	e000      	b.n	8002f32 <__eqdf2+0x56>
 8002f30:	2001      	movs	r0, #1
 8002f32:	bcf0      	pop	{r4, r5, r6, r7}
 8002f34:	46bb      	mov	fp, r7
 8002f36:	46b2      	mov	sl, r6
 8002f38:	46a9      	mov	r9, r5
 8002f3a:	46a0      	mov	r8, r4
 8002f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3e:	2001      	movs	r0, #1
 8002f40:	428e      	cmp	r6, r1
 8002f42:	d1f6      	bne.n	8002f32 <__eqdf2+0x56>
 8002f44:	4661      	mov	r1, ip
 8002f46:	4339      	orrs	r1, r7
 8002f48:	000f      	movs	r7, r1
 8002f4a:	4317      	orrs	r7, r2
 8002f4c:	4327      	orrs	r7, r4
 8002f4e:	d1f0      	bne.n	8002f32 <__eqdf2+0x56>
 8002f50:	465b      	mov	r3, fp
 8002f52:	4652      	mov	r2, sl
 8002f54:	1a98      	subs	r0, r3, r2
 8002f56:	1e43      	subs	r3, r0, #1
 8002f58:	4198      	sbcs	r0, r3
 8002f5a:	e7ea      	b.n	8002f32 <__eqdf2+0x56>
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e7e8      	b.n	8002f32 <__eqdf2+0x56>
 8002f60:	000007ff 	.word	0x000007ff

08002f64 <__gedf2>:
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	4657      	mov	r7, sl
 8002f68:	464e      	mov	r6, r9
 8002f6a:	4645      	mov	r5, r8
 8002f6c:	46de      	mov	lr, fp
 8002f6e:	b5e0      	push	{r5, r6, r7, lr}
 8002f70:	000d      	movs	r5, r1
 8002f72:	030f      	lsls	r7, r1, #12
 8002f74:	0b39      	lsrs	r1, r7, #12
 8002f76:	b083      	sub	sp, #12
 8002f78:	0004      	movs	r4, r0
 8002f7a:	4680      	mov	r8, r0
 8002f7c:	9101      	str	r1, [sp, #4]
 8002f7e:	0058      	lsls	r0, r3, #1
 8002f80:	0fe9      	lsrs	r1, r5, #31
 8002f82:	4f31      	ldr	r7, [pc, #196]	@ (8003048 <__gedf2+0xe4>)
 8002f84:	0d40      	lsrs	r0, r0, #21
 8002f86:	468c      	mov	ip, r1
 8002f88:	006e      	lsls	r6, r5, #1
 8002f8a:	0319      	lsls	r1, r3, #12
 8002f8c:	4682      	mov	sl, r0
 8002f8e:	4691      	mov	r9, r2
 8002f90:	0d76      	lsrs	r6, r6, #21
 8002f92:	0b09      	lsrs	r1, r1, #12
 8002f94:	0fd8      	lsrs	r0, r3, #31
 8002f96:	42be      	cmp	r6, r7
 8002f98:	d01f      	beq.n	8002fda <__gedf2+0x76>
 8002f9a:	45ba      	cmp	sl, r7
 8002f9c:	d00f      	beq.n	8002fbe <__gedf2+0x5a>
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	d12f      	bne.n	8003002 <__gedf2+0x9e>
 8002fa2:	4655      	mov	r5, sl
 8002fa4:	9e01      	ldr	r6, [sp, #4]
 8002fa6:	4334      	orrs	r4, r6
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	d127      	bne.n	8002ffc <__gedf2+0x98>
 8002fac:	430a      	orrs	r2, r1
 8002fae:	d03a      	beq.n	8003026 <__gedf2+0xc2>
 8002fb0:	2c00      	cmp	r4, #0
 8002fb2:	d145      	bne.n	8003040 <__gedf2+0xdc>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d11a      	bne.n	8002fee <__gedf2+0x8a>
 8002fb8:	2001      	movs	r0, #1
 8002fba:	4240      	negs	r0, r0
 8002fbc:	e017      	b.n	8002fee <__gedf2+0x8a>
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	d13b      	bne.n	800303a <__gedf2+0xd6>
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	d102      	bne.n	8002fcc <__gedf2+0x68>
 8002fc6:	9f01      	ldr	r7, [sp, #4]
 8002fc8:	4327      	orrs	r7, r4
 8002fca:	d0f3      	beq.n	8002fb4 <__gedf2+0x50>
 8002fcc:	4584      	cmp	ip, r0
 8002fce:	d109      	bne.n	8002fe4 <__gedf2+0x80>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <__gedf2+0x54>
 8002fd6:	4660      	mov	r0, ip
 8002fd8:	e009      	b.n	8002fee <__gedf2+0x8a>
 8002fda:	9f01      	ldr	r7, [sp, #4]
 8002fdc:	4327      	orrs	r7, r4
 8002fde:	d12c      	bne.n	800303a <__gedf2+0xd6>
 8002fe0:	45b2      	cmp	sl, r6
 8002fe2:	d024      	beq.n	800302e <__gedf2+0xca>
 8002fe4:	4663      	mov	r3, ip
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	4018      	ands	r0, r3
 8002fec:	3801      	subs	r0, #1
 8002fee:	b003      	add	sp, #12
 8002ff0:	bcf0      	pop	{r4, r5, r6, r7}
 8002ff2:	46bb      	mov	fp, r7
 8002ff4:	46b2      	mov	sl, r6
 8002ff6:	46a9      	mov	r9, r5
 8002ff8:	46a0      	mov	r8, r4
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffc:	2c00      	cmp	r4, #0
 8002ffe:	d0d9      	beq.n	8002fb4 <__gedf2+0x50>
 8003000:	e7e4      	b.n	8002fcc <__gedf2+0x68>
 8003002:	4654      	mov	r4, sl
 8003004:	2c00      	cmp	r4, #0
 8003006:	d0ed      	beq.n	8002fe4 <__gedf2+0x80>
 8003008:	4584      	cmp	ip, r0
 800300a:	d1eb      	bne.n	8002fe4 <__gedf2+0x80>
 800300c:	4556      	cmp	r6, sl
 800300e:	dce9      	bgt.n	8002fe4 <__gedf2+0x80>
 8003010:	dbde      	blt.n	8002fd0 <__gedf2+0x6c>
 8003012:	9b01      	ldr	r3, [sp, #4]
 8003014:	428b      	cmp	r3, r1
 8003016:	d8e5      	bhi.n	8002fe4 <__gedf2+0x80>
 8003018:	d1da      	bne.n	8002fd0 <__gedf2+0x6c>
 800301a:	45c8      	cmp	r8, r9
 800301c:	d8e2      	bhi.n	8002fe4 <__gedf2+0x80>
 800301e:	2000      	movs	r0, #0
 8003020:	45c8      	cmp	r8, r9
 8003022:	d2e4      	bcs.n	8002fee <__gedf2+0x8a>
 8003024:	e7d4      	b.n	8002fd0 <__gedf2+0x6c>
 8003026:	2000      	movs	r0, #0
 8003028:	2c00      	cmp	r4, #0
 800302a:	d0e0      	beq.n	8002fee <__gedf2+0x8a>
 800302c:	e7da      	b.n	8002fe4 <__gedf2+0x80>
 800302e:	4311      	orrs	r1, r2
 8003030:	d103      	bne.n	800303a <__gedf2+0xd6>
 8003032:	4584      	cmp	ip, r0
 8003034:	d1d6      	bne.n	8002fe4 <__gedf2+0x80>
 8003036:	2000      	movs	r0, #0
 8003038:	e7d9      	b.n	8002fee <__gedf2+0x8a>
 800303a:	2002      	movs	r0, #2
 800303c:	4240      	negs	r0, r0
 800303e:	e7d6      	b.n	8002fee <__gedf2+0x8a>
 8003040:	4584      	cmp	ip, r0
 8003042:	d0e6      	beq.n	8003012 <__gedf2+0xae>
 8003044:	e7ce      	b.n	8002fe4 <__gedf2+0x80>
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	000007ff 	.word	0x000007ff

0800304c <__ledf2>:
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	4657      	mov	r7, sl
 8003050:	464e      	mov	r6, r9
 8003052:	4645      	mov	r5, r8
 8003054:	46de      	mov	lr, fp
 8003056:	b5e0      	push	{r5, r6, r7, lr}
 8003058:	000d      	movs	r5, r1
 800305a:	030f      	lsls	r7, r1, #12
 800305c:	0004      	movs	r4, r0
 800305e:	4680      	mov	r8, r0
 8003060:	0fe8      	lsrs	r0, r5, #31
 8003062:	0b39      	lsrs	r1, r7, #12
 8003064:	4684      	mov	ip, r0
 8003066:	b083      	sub	sp, #12
 8003068:	0058      	lsls	r0, r3, #1
 800306a:	4f30      	ldr	r7, [pc, #192]	@ (800312c <__ledf2+0xe0>)
 800306c:	0d40      	lsrs	r0, r0, #21
 800306e:	9101      	str	r1, [sp, #4]
 8003070:	031e      	lsls	r6, r3, #12
 8003072:	0069      	lsls	r1, r5, #1
 8003074:	4682      	mov	sl, r0
 8003076:	4691      	mov	r9, r2
 8003078:	0d49      	lsrs	r1, r1, #21
 800307a:	0b36      	lsrs	r6, r6, #12
 800307c:	0fd8      	lsrs	r0, r3, #31
 800307e:	42b9      	cmp	r1, r7
 8003080:	d020      	beq.n	80030c4 <__ledf2+0x78>
 8003082:	45ba      	cmp	sl, r7
 8003084:	d00f      	beq.n	80030a6 <__ledf2+0x5a>
 8003086:	2900      	cmp	r1, #0
 8003088:	d12b      	bne.n	80030e2 <__ledf2+0x96>
 800308a:	9901      	ldr	r1, [sp, #4]
 800308c:	430c      	orrs	r4, r1
 800308e:	4651      	mov	r1, sl
 8003090:	2900      	cmp	r1, #0
 8003092:	d137      	bne.n	8003104 <__ledf2+0xb8>
 8003094:	4332      	orrs	r2, r6
 8003096:	d038      	beq.n	800310a <__ledf2+0xbe>
 8003098:	2c00      	cmp	r4, #0
 800309a:	d144      	bne.n	8003126 <__ledf2+0xda>
 800309c:	2800      	cmp	r0, #0
 800309e:	d119      	bne.n	80030d4 <__ledf2+0x88>
 80030a0:	2001      	movs	r0, #1
 80030a2:	4240      	negs	r0, r0
 80030a4:	e016      	b.n	80030d4 <__ledf2+0x88>
 80030a6:	4316      	orrs	r6, r2
 80030a8:	d113      	bne.n	80030d2 <__ledf2+0x86>
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d102      	bne.n	80030b4 <__ledf2+0x68>
 80030ae:	9f01      	ldr	r7, [sp, #4]
 80030b0:	4327      	orrs	r7, r4
 80030b2:	d0f3      	beq.n	800309c <__ledf2+0x50>
 80030b4:	4584      	cmp	ip, r0
 80030b6:	d020      	beq.n	80030fa <__ledf2+0xae>
 80030b8:	4663      	mov	r3, ip
 80030ba:	2002      	movs	r0, #2
 80030bc:	3b01      	subs	r3, #1
 80030be:	4018      	ands	r0, r3
 80030c0:	3801      	subs	r0, #1
 80030c2:	e007      	b.n	80030d4 <__ledf2+0x88>
 80030c4:	9f01      	ldr	r7, [sp, #4]
 80030c6:	4327      	orrs	r7, r4
 80030c8:	d103      	bne.n	80030d2 <__ledf2+0x86>
 80030ca:	458a      	cmp	sl, r1
 80030cc:	d1f4      	bne.n	80030b8 <__ledf2+0x6c>
 80030ce:	4316      	orrs	r6, r2
 80030d0:	d01f      	beq.n	8003112 <__ledf2+0xc6>
 80030d2:	2002      	movs	r0, #2
 80030d4:	b003      	add	sp, #12
 80030d6:	bcf0      	pop	{r4, r5, r6, r7}
 80030d8:	46bb      	mov	fp, r7
 80030da:	46b2      	mov	sl, r6
 80030dc:	46a9      	mov	r9, r5
 80030de:	46a0      	mov	r8, r4
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e2:	4654      	mov	r4, sl
 80030e4:	2c00      	cmp	r4, #0
 80030e6:	d0e7      	beq.n	80030b8 <__ledf2+0x6c>
 80030e8:	4584      	cmp	ip, r0
 80030ea:	d1e5      	bne.n	80030b8 <__ledf2+0x6c>
 80030ec:	4551      	cmp	r1, sl
 80030ee:	dce3      	bgt.n	80030b8 <__ledf2+0x6c>
 80030f0:	db03      	blt.n	80030fa <__ledf2+0xae>
 80030f2:	9b01      	ldr	r3, [sp, #4]
 80030f4:	42b3      	cmp	r3, r6
 80030f6:	d8df      	bhi.n	80030b8 <__ledf2+0x6c>
 80030f8:	d00f      	beq.n	800311a <__ledf2+0xce>
 80030fa:	4663      	mov	r3, ip
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0cf      	beq.n	80030a0 <__ledf2+0x54>
 8003100:	4660      	mov	r0, ip
 8003102:	e7e7      	b.n	80030d4 <__ledf2+0x88>
 8003104:	2c00      	cmp	r4, #0
 8003106:	d0c9      	beq.n	800309c <__ledf2+0x50>
 8003108:	e7d4      	b.n	80030b4 <__ledf2+0x68>
 800310a:	2000      	movs	r0, #0
 800310c:	2c00      	cmp	r4, #0
 800310e:	d0e1      	beq.n	80030d4 <__ledf2+0x88>
 8003110:	e7d2      	b.n	80030b8 <__ledf2+0x6c>
 8003112:	4584      	cmp	ip, r0
 8003114:	d1d0      	bne.n	80030b8 <__ledf2+0x6c>
 8003116:	2000      	movs	r0, #0
 8003118:	e7dc      	b.n	80030d4 <__ledf2+0x88>
 800311a:	45c8      	cmp	r8, r9
 800311c:	d8cc      	bhi.n	80030b8 <__ledf2+0x6c>
 800311e:	2000      	movs	r0, #0
 8003120:	45c8      	cmp	r8, r9
 8003122:	d2d7      	bcs.n	80030d4 <__ledf2+0x88>
 8003124:	e7e9      	b.n	80030fa <__ledf2+0xae>
 8003126:	4584      	cmp	ip, r0
 8003128:	d0e3      	beq.n	80030f2 <__ledf2+0xa6>
 800312a:	e7c5      	b.n	80030b8 <__ledf2+0x6c>
 800312c:	000007ff 	.word	0x000007ff

08003130 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800313e:	4a0b      	ldr	r2, [pc, #44]	@ (800316c <LL_DMA_EnableChannel+0x3c>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	18d3      	adds	r3, r2, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	001a      	movs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4907      	ldr	r1, [pc, #28]	@ (800316c <LL_DMA_EnableChannel+0x3c>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	18cb      	adds	r3, r1, r3
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	0019      	movs	r1, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	18cb      	adds	r3, r1, r3
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	08007908 	.word	0x08007908

08003170 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003180:	4a0b      	ldr	r2, [pc, #44]	@ (80031b0 <LL_DMA_SetDataLength+0x40>)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	18d3      	adds	r3, r2, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	001a      	movs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	0419      	lsls	r1, r3, #16
 8003194:	4a06      	ldr	r2, [pc, #24]	@ (80031b0 <LL_DMA_SetDataLength+0x40>)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	001a      	movs	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	18d3      	adds	r3, r2, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 80031a8:	46c0      	nop			@ (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b006      	add	sp, #24
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	08007908 	.word	0x08007908

080031b4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80031c4:	4a06      	ldr	r2, [pc, #24]	@ (80031e0 <LL_DMA_SetMemoryAddress+0x2c>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	18d3      	adds	r3, r2, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	18d3      	adds	r3, r2, r3
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	60da      	str	r2, [r3, #12]
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b006      	add	sp, #24
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	08007908 	.word	0x08007908

080031e4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80031f4:	4a06      	ldr	r2, [pc, #24]	@ (8003210 <LL_DMA_SetPeriphAddress+0x2c>)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	001a      	movs	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	18d3      	adds	r3, r2, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]
}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b006      	add	sp, #24
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	08007908 	.word	0x08007908

08003214 <LL_DMA_ClearFlag_GI5>:
  * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	0252      	lsls	r2, r2, #9
 8003222:	605a      	str	r2, [r3, #4]
}
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	0292      	lsls	r2, r2, #10
 800323a:	605a      	str	r2, [r3, #4]
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}

08003244 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8003252:	4a0b      	ldr	r2, [pc, #44]	@ (8003280 <LL_DMA_EnableIT_TC+0x3c>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	18d3      	adds	r3, r2, r3
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	001a      	movs	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	18d3      	adds	r3, r2, r3
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4907      	ldr	r1, [pc, #28]	@ (8003280 <LL_DMA_EnableIT_TC+0x3c>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	18cb      	adds	r3, r1, r3
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0019      	movs	r1, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	18cb      	adds	r3, r1, r3
 8003270:	2102      	movs	r1, #2
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	08007908 	.word	0x08007908

08003284 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	601a      	str	r2, [r3, #0]
}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <LL_TIM_CC_SetDMAReqTrigger>:
  *         @arg @ref LL_TIM_CCDMAREQUEST_CC
  *         @arg @ref LL_TIM_CCDMAREQUEST_UPDATE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCDS, DMAReqTrigger);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2208      	movs	r2, #8
 80032b0:	4393      	bics	r3, r2
 80032b2:	001a      	movs	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	605a      	str	r2, [r3, #4]
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	0212      	lsls	r2, r2, #8
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}

08003300 <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2280      	movs	r2, #128	@ 0x80
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60da      	str	r2, [r3, #12]
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}

0800331e <rgb_init>:

/*二维数组存放最终PWM输出数组，每一行24个
 数据代表一个LED，最后一行24个0代表RESET码*/
static uint8_t rgb_buf[RGB_NUM + 1][24];

void rgb_init(void) {
 800331e:	b580      	push	{r7, lr}
 8003320:	af00      	add	r7, sp, #0
	activate_tim1_dma();
 8003322:	f000 f805 	bl	8003330 <activate_tim1_dma>
	rgb_close_all();
 8003326:	f000 f9c5 	bl	80036b4 <rgb_close_all>
}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <activate_tim1_dma>:

// DMA初始化
void activate_tim1_dma(void) {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, (RGB_NUM + 1) * 24); // 设置dma数据传输个数/长度
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <activate_tim1_dma+0x6c>)
 8003336:	2260      	movs	r2, #96	@ 0x60
 8003338:	2104      	movs	r1, #4
 800333a:	0018      	movs	r0, r3
 800333c:	f7ff ff18 	bl	8003170 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t) rgb_buf); // 设置内存地址，也就是设置buffer地址
 8003340:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <activate_tim1_dma+0x70>)
 8003342:	4816      	ldr	r0, [pc, #88]	@ (800339c <activate_tim1_dma+0x6c>)
 8003344:	001a      	movs	r2, r3
 8003346:	2104      	movs	r1, #4
 8003348:	f7ff ff34 	bl	80031b4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t) &(TIM17->CCR1)); // 设置外设地址
 800334c:	4a15      	ldr	r2, [pc, #84]	@ (80033a4 <activate_tim1_dma+0x74>)
 800334e:	4b13      	ldr	r3, [pc, #76]	@ (800339c <activate_tim1_dma+0x6c>)
 8003350:	2104      	movs	r1, #4
 8003352:	0018      	movs	r0, r3
 8003354:	f7ff ff46 	bl	80031e4 <LL_DMA_SetPeriphAddress>
	LL_DMA_ClearFlag_GI5(DMA1); // 清除中断标志
 8003358:	4b10      	ldr	r3, [pc, #64]	@ (800339c <activate_tim1_dma+0x6c>)
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff5a 	bl	8003214 <LL_DMA_ClearFlag_GI5>
	LL_DMA_ClearFlag_TC5(DMA1); // 清除中断标志
 8003360:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <activate_tim1_dma+0x6c>)
 8003362:	0018      	movs	r0, r3
 8003364:	f7ff ff62 	bl	800322c <LL_DMA_ClearFlag_TC5>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5); // 使能传送完成中断
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <activate_tim1_dma+0x6c>)
 800336a:	2104      	movs	r1, #4
 800336c:	0018      	movs	r0, r3
 800336e:	f7ff ff69 	bl	8003244 <LL_DMA_EnableIT_TC>
	LL_TIM_EnableDMAReq_CC1(TIM17);
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <activate_tim1_dma+0x78>)
 8003374:	0018      	movs	r0, r3
 8003376:	f7ff ffc3 	bl	8003300 <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_EnableAllOutputs(TIM17);		        // 使能TIM的输出
 800337a:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <activate_tim1_dma+0x78>)
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff ffb0 	bl	80032e2 <LL_TIM_EnableAllOutputs>
	LL_TIM_CC_SetDMAReqTrigger(TIM1, LL_TIM_CCDMAREQUEST_CC); // 设置TIM17 DMA请求触发器
 8003382:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <activate_tim1_dma+0x7c>)
 8003384:	2100      	movs	r1, #0
 8003386:	0018      	movs	r0, r3
 8003388:	f7ff ff8a 	bl	80032a0 <LL_TIM_CC_SetDMAReqTrigger>
	LL_TIM_CC_EnableChannel(TIM17, LL_TIM_CHANNEL_CH1);        // 使能TIM17的通道1
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <activate_tim1_dma+0x78>)
 800338e:	2101      	movs	r1, #1
 8003390:	0018      	movs	r0, r3
 8003392:	f7ff ff97 	bl	80032c4 <LL_TIM_CC_EnableChannel>
}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40020000 	.word	0x40020000
 80033a0:	20000170 	.word	0x20000170
 80033a4:	40014834 	.word	0x40014834
 80033a8:	40014800 	.word	0x40014800
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <set_rgb_color>:
 * @brief  设定单个RGB LED的颜色，把结构体中RGB的24BIT转换为0码和1码
 * @param  led_id 为LED序号
 * @param  color 要设置的颜色
 * @retval 无
 */
void set_rgb_color(uint8_t led_id, RGB_Color_TypeDef color) {
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	0002      	movs	r2, r0
 80033b8:	003b      	movs	r3, r7
 80033ba:	6019      	str	r1, [r3, #0]
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	color.R = color.R * (rgb_light_reg / 100.0); // 设置亮度
 80033c0:	003b      	movs	r3, r7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff fcff 	bl	8002dc8 <__aeabi_i2d>
 80033ca:	0004      	movs	r4, r0
 80033cc:	000d      	movs	r5, r1
 80033ce:	4b71      	ldr	r3, [pc, #452]	@ (8003594 <set_rgb_color+0x1e4>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff fcf7 	bl	8002dc8 <__aeabi_i2d>
 80033da:	2200      	movs	r2, #0
 80033dc:	4b6e      	ldr	r3, [pc, #440]	@ (8003598 <set_rgb_color+0x1e8>)
 80033de:	f7fe fb39 	bl	8001a54 <__aeabi_ddiv>
 80033e2:	0002      	movs	r2, r0
 80033e4:	000b      	movs	r3, r1
 80033e6:	0020      	movs	r0, r4
 80033e8:	0029      	movs	r1, r5
 80033ea:	f7fe fe4d 	bl	8002088 <__aeabi_dmul>
 80033ee:	0002      	movs	r2, r0
 80033f0:	000b      	movs	r3, r1
 80033f2:	0010      	movs	r0, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	f7fe fb0f 	bl	8001a18 <__aeabi_d2uiz>
 80033fa:	0003      	movs	r3, r0
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	003b      	movs	r3, r7
 8003400:	701a      	strb	r2, [r3, #0]
	color.G = color.G * (rgb_light_reg / 100.0);
 8003402:	003b      	movs	r3, r7
 8003404:	785b      	ldrb	r3, [r3, #1]
 8003406:	0018      	movs	r0, r3
 8003408:	f7ff fcde 	bl	8002dc8 <__aeabi_i2d>
 800340c:	0004      	movs	r4, r0
 800340e:	000d      	movs	r5, r1
 8003410:	4b60      	ldr	r3, [pc, #384]	@ (8003594 <set_rgb_color+0x1e4>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fcd6 	bl	8002dc8 <__aeabi_i2d>
 800341c:	2200      	movs	r2, #0
 800341e:	4b5e      	ldr	r3, [pc, #376]	@ (8003598 <set_rgb_color+0x1e8>)
 8003420:	f7fe fb18 	bl	8001a54 <__aeabi_ddiv>
 8003424:	0002      	movs	r2, r0
 8003426:	000b      	movs	r3, r1
 8003428:	0020      	movs	r0, r4
 800342a:	0029      	movs	r1, r5
 800342c:	f7fe fe2c 	bl	8002088 <__aeabi_dmul>
 8003430:	0002      	movs	r2, r0
 8003432:	000b      	movs	r3, r1
 8003434:	0010      	movs	r0, r2
 8003436:	0019      	movs	r1, r3
 8003438:	f7fe faee 	bl	8001a18 <__aeabi_d2uiz>
 800343c:	0003      	movs	r3, r0
 800343e:	b2da      	uxtb	r2, r3
 8003440:	003b      	movs	r3, r7
 8003442:	705a      	strb	r2, [r3, #1]
	color.B = color.B * (rgb_light_reg / 100.0);
 8003444:	003b      	movs	r3, r7
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff fcbd 	bl	8002dc8 <__aeabi_i2d>
 800344e:	0004      	movs	r4, r0
 8003450:	000d      	movs	r5, r1
 8003452:	4b50      	ldr	r3, [pc, #320]	@ (8003594 <set_rgb_color+0x1e4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff fcb5 	bl	8002dc8 <__aeabi_i2d>
 800345e:	2200      	movs	r2, #0
 8003460:	4b4d      	ldr	r3, [pc, #308]	@ (8003598 <set_rgb_color+0x1e8>)
 8003462:	f7fe faf7 	bl	8001a54 <__aeabi_ddiv>
 8003466:	0002      	movs	r2, r0
 8003468:	000b      	movs	r3, r1
 800346a:	0020      	movs	r0, r4
 800346c:	0029      	movs	r1, r5
 800346e:	f7fe fe0b 	bl	8002088 <__aeabi_dmul>
 8003472:	0002      	movs	r2, r0
 8003474:	000b      	movs	r3, r1
 8003476:	0010      	movs	r0, r2
 8003478:	0019      	movs	r1, r3
 800347a:	f7fe facd 	bl	8001a18 <__aeabi_d2uiz>
 800347e:	0003      	movs	r3, r0
 8003480:	b2da      	uxtb	r2, r3
 8003482:	003b      	movs	r3, r7
 8003484:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < 8; i++)
 8003486:	230f      	movs	r3, #15
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e021      	b.n	80034d4 <set_rgb_color+0x124>
		rgb_buf[led_id][i] = ((color.G & (1 << (7 - i))) ? (CODE_1) : CODE_0); // 数组某一行0~7转化存放G
 8003490:	003b      	movs	r3, r7
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	0019      	movs	r1, r3
 8003496:	230f      	movs	r3, #15
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2207      	movs	r2, #7
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	4119      	asrs	r1, r3
 80034a2:	000b      	movs	r3, r1
 80034a4:	2201      	movs	r2, #1
 80034a6:	4013      	ands	r3, r2
 80034a8:	d001      	beq.n	80034ae <set_rgb_color+0xfe>
 80034aa:	2434      	movs	r4, #52	@ 0x34
 80034ac:	e000      	b.n	80034b0 <set_rgb_color+0x100>
 80034ae:	2419      	movs	r4, #25
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	250f      	movs	r5, #15
 80034b6:	197b      	adds	r3, r7, r5
 80034b8:	7819      	ldrb	r1, [r3, #0]
 80034ba:	4838      	ldr	r0, [pc, #224]	@ (800359c <set_rgb_color+0x1ec>)
 80034bc:	0013      	movs	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	18c3      	adds	r3, r0, r3
 80034c6:	1c22      	adds	r2, r4, #0
 80034c8:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < 8; i++)
 80034ca:	197b      	adds	r3, r7, r5
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	197b      	adds	r3, r7, r5
 80034d0:	3201      	adds	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	220f      	movs	r2, #15
 80034d6:	18bb      	adds	r3, r7, r2
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b07      	cmp	r3, #7
 80034dc:	d9d8      	bls.n	8003490 <set_rgb_color+0xe0>
	for (i = 8; i < 16; i++)
 80034de:	18bb      	adds	r3, r7, r2
 80034e0:	2208      	movs	r2, #8
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e021      	b.n	800352a <set_rgb_color+0x17a>
		rgb_buf[led_id][i] = ((color.R & (1 << (15 - i))) ? (CODE_1) : CODE_0); // 数组某一行8~15转化存放R
 80034e6:	003b      	movs	r3, r7
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	0019      	movs	r1, r3
 80034ec:	230f      	movs	r3, #15
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	220f      	movs	r2, #15
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	4119      	asrs	r1, r3
 80034f8:	000b      	movs	r3, r1
 80034fa:	2201      	movs	r2, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	d001      	beq.n	8003504 <set_rgb_color+0x154>
 8003500:	2434      	movs	r4, #52	@ 0x34
 8003502:	e000      	b.n	8003506 <set_rgb_color+0x156>
 8003504:	2419      	movs	r4, #25
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	250f      	movs	r5, #15
 800350c:	197b      	adds	r3, r7, r5
 800350e:	7819      	ldrb	r1, [r3, #0]
 8003510:	4822      	ldr	r0, [pc, #136]	@ (800359c <set_rgb_color+0x1ec>)
 8003512:	0013      	movs	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	189b      	adds	r3, r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	18c3      	adds	r3, r0, r3
 800351c:	1c22      	adds	r2, r4, #0
 800351e:	545a      	strb	r2, [r3, r1]
	for (i = 8; i < 16; i++)
 8003520:	197b      	adds	r3, r7, r5
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	197b      	adds	r3, r7, r5
 8003526:	3201      	adds	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	220f      	movs	r2, #15
 800352c:	18bb      	adds	r3, r7, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d9d8      	bls.n	80034e6 <set_rgb_color+0x136>
	for (i = 16; i < 24; i++)
 8003534:	18bb      	adds	r3, r7, r2
 8003536:	2210      	movs	r2, #16
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e021      	b.n	8003580 <set_rgb_color+0x1d0>
		rgb_buf[led_id][i] = ((color.B & (1 << (23 - i))) ? (CODE_1) : CODE_0); // 数组某一行16~23转化存放B
 800353c:	003b      	movs	r3, r7
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	0019      	movs	r1, r3
 8003542:	230f      	movs	r3, #15
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2217      	movs	r2, #23
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	4119      	asrs	r1, r3
 800354e:	000b      	movs	r3, r1
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d001      	beq.n	800355a <set_rgb_color+0x1aa>
 8003556:	2434      	movs	r4, #52	@ 0x34
 8003558:	e000      	b.n	800355c <set_rgb_color+0x1ac>
 800355a:	2419      	movs	r4, #25
 800355c:	1dfb      	adds	r3, r7, #7
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	250f      	movs	r5, #15
 8003562:	197b      	adds	r3, r7, r5
 8003564:	7819      	ldrb	r1, [r3, #0]
 8003566:	480d      	ldr	r0, [pc, #52]	@ (800359c <set_rgb_color+0x1ec>)
 8003568:	0013      	movs	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	189b      	adds	r3, r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	18c3      	adds	r3, r0, r3
 8003572:	1c22      	adds	r2, r4, #0
 8003574:	545a      	strb	r2, [r3, r1]
	for (i = 16; i < 24; i++)
 8003576:	197b      	adds	r3, r7, r5
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	197b      	adds	r3, r7, r5
 800357c:	3201      	adds	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	230f      	movs	r3, #15
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b17      	cmp	r3, #23
 8003588:	d9d8      	bls.n	800353c <set_rgb_color+0x18c>
}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46c0      	nop			@ (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bdb0      	pop	{r4, r5, r7, pc}
 8003594:	20000697 	.word	0x20000697
 8003598:	40590000 	.word	0x40590000
 800359c:	20000170 	.word	0x20000170

080035a0 <rgb_update>:
/**
 * @brief  rgb状态更新
 * @param  无
 * @retval 无
 */
void rgb_update(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
	set_rgb_color(RGB_LED_1, rgb_reg[0]);
 80035a4:	4b26      	ldr	r3, [pc, #152]	@ (8003640 <rgb_update+0xa0>)
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	7859      	ldrb	r1, [r3, #1]
 80035ac:	b2c9      	uxtb	r1, r1
 80035ae:	0209      	lsls	r1, r1, #8
 80035b0:	430a      	orrs	r2, r1
 80035b2:	789b      	ldrb	r3, [r3, #2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	431a      	orrs	r2, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	0212      	lsls	r2, r2, #8
 80035be:	0a12      	lsrs	r2, r2, #8
 80035c0:	0e1b      	lsrs	r3, r3, #24
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	4313      	orrs	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7ff fef1 	bl	80033b0 <set_rgb_color>
	set_rgb_color(RGB_LED_2, rgb_reg[1]);
 80035ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003640 <rgb_update+0xa0>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	5c99      	ldrb	r1, [r3, r2]
 80035d4:	b2c9      	uxtb	r1, r1
 80035d6:	1898      	adds	r0, r3, r2
 80035d8:	7840      	ldrb	r0, [r0, #1]
 80035da:	b2c0      	uxtb	r0, r0
 80035dc:	0200      	lsls	r0, r0, #8
 80035de:	4301      	orrs	r1, r0
 80035e0:	189b      	adds	r3, r3, r2
 80035e2:	789b      	ldrb	r3, [r3, #2]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	430b      	orrs	r3, r1
 80035ea:	001a      	movs	r2, r3
 80035ec:	2300      	movs	r3, #0
 80035ee:	0212      	lsls	r2, r2, #8
 80035f0:	0a12      	lsrs	r2, r2, #8
 80035f2:	0e1b      	lsrs	r3, r3, #24
 80035f4:	061b      	lsls	r3, r3, #24
 80035f6:	4313      	orrs	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff fed8 	bl	80033b0 <set_rgb_color>
	set_rgb_color(RGB_LED_3, rgb_reg[2]);
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <rgb_update+0xa0>)
 8003602:	2206      	movs	r2, #6
 8003604:	5c99      	ldrb	r1, [r3, r2]
 8003606:	b2c9      	uxtb	r1, r1
 8003608:	1898      	adds	r0, r3, r2
 800360a:	7840      	ldrb	r0, [r0, #1]
 800360c:	b2c0      	uxtb	r0, r0
 800360e:	0200      	lsls	r0, r0, #8
 8003610:	4301      	orrs	r1, r0
 8003612:	189b      	adds	r3, r3, r2
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	430b      	orrs	r3, r1
 800361c:	001a      	movs	r2, r3
 800361e:	2300      	movs	r3, #0
 8003620:	0212      	lsls	r2, r2, #8
 8003622:	0a12      	lsrs	r2, r2, #8
 8003624:	0e1b      	lsrs	r3, r3, #24
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	4313      	orrs	r3, r2
 800362a:	0019      	movs	r1, r3
 800362c:	2002      	movs	r0, #2
 800362e:	f7ff febf 	bl	80033b0 <set_rgb_color>
	reset_load();
 8003632:	f000 f807 	bl	8003644 <reset_load>
	rgb_send_array();
 8003636:	f000 f825 	bl	8003684 <rgb_send_array>
}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000698 	.word	0x20000698

08003644 <reset_load>:
/**
 * @brief  最后一行装在24个0，输出24个周期占空比为0的PWM波，作为最后reset延时，这里总时长为24*1.2=30us > 24us(要求大于24us)
 * @param  无
 * @retval 无
 */
void reset_load(void) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 24; i++) {
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e00c      	b.n	800366c <reset_load+0x28>
		rgb_buf[RGB_NUM][i] = 0;
 8003652:	1dfb      	adds	r3, r7, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <reset_load+0x3c>)
 8003658:	2148      	movs	r1, #72	@ 0x48
 800365a:	18d3      	adds	r3, r2, r3
 800365c:	185b      	adds	r3, r3, r1
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 24; i++) {
 8003662:	1dfb      	adds	r3, r7, #7
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	3201      	adds	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b17      	cmp	r3, #23
 8003672:	d9ee      	bls.n	8003652 <reset_load+0xe>
	}
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	20000170 	.word	0x20000170

08003684 <rgb_send_array>:
/**
 * @brief  发送数组
 * @param  无
 * @retval 无
 */
void rgb_send_array(void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, (RGB_NUM + 1) * 24);
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <rgb_send_array+0x28>)
 800368a:	2260      	movs	r2, #96	@ 0x60
 800368c:	2104      	movs	r1, #4
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff fd6e 	bl	8003170 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <rgb_send_array+0x28>)
 8003696:	2104      	movs	r1, #4
 8003698:	0018      	movs	r0, r3
 800369a:	f7ff fd49 	bl	8003130 <LL_DMA_EnableChannel>
	LL_TIM_EnableCounter(TIM17);
 800369e:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <rgb_send_array+0x2c>)
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff fdef 	bl	8003284 <LL_TIM_EnableCounter>
}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40020000 	.word	0x40020000
 80036b0:	40014800 	.word	0x40014800

080036b4 <rgb_close_all>:
/**
 * @brief  关闭所有RGB灯
 * @param  无
 * @retval 无
 */
void rgb_close_all(void) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < RGB_NUM; i++) {
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e00b      	b.n	80036da <rgb_close_all+0x26>
		set_rgb_color(i, BLACK);
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <rgb_close_all+0x44>)
 80036c4:	1dfa      	adds	r2, r7, #7
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	0010      	movs	r0, r2
 80036cc:	f7ff fe70 	bl	80033b0 <set_rgb_color>
	for (uint8_t i = 0; i < RGB_NUM; i++) {
 80036d0:	1dfb      	adds	r3, r7, #7
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	1dfb      	adds	r3, r7, #7
 80036d6:	3201      	adds	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d9ef      	bls.n	80036c2 <rgb_close_all+0xe>
	}
	reset_load();
 80036e2:	f7ff ffaf 	bl	8003644 <reset_load>
	rgb_send_array();
 80036e6:	f7ff ffcd 	bl	8003684 <rgb_send_array>
	HAL_Delay(0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f002 f85e 	bl	80057ac <HAL_Delay>
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	08007910 	.word	0x08007910

080036fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <MX_DMA_Init+0x38>)
 8003704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003706:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <MX_DMA_Init+0x38>)
 8003708:	2101      	movs	r1, #1
 800370a:	430a      	orrs	r2, r1
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
 800370e:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <MX_DMA_Init+0x38>)
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 1, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2101      	movs	r1, #1
 800371e:	200b      	movs	r0, #11
 8003720:	f002 f914 	bl	800594c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 8003724:	200b      	movs	r0, #11
 8003726:	f002 f926 	bl	8005976 <HAL_NVIC_EnableIRQ>

}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	40021000 	.word	0x40021000

08003738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b089      	sub	sp, #36	@ 0x24
 800373c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373e:	240c      	movs	r4, #12
 8003740:	193b      	adds	r3, r7, r4
 8003742:	0018      	movs	r0, r3
 8003744:	2314      	movs	r3, #20
 8003746:	001a      	movs	r2, r3
 8003748:	2100      	movs	r1, #0
 800374a:	f004 f873 	bl	8007834 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	4b37      	ldr	r3, [pc, #220]	@ (800382c <MX_GPIO_Init+0xf4>)
 8003750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003752:	4b36      	ldr	r3, [pc, #216]	@ (800382c <MX_GPIO_Init+0xf4>)
 8003754:	2102      	movs	r1, #2
 8003756:	430a      	orrs	r2, r1
 8003758:	635a      	str	r2, [r3, #52]	@ 0x34
 800375a:	4b34      	ldr	r3, [pc, #208]	@ (800382c <MX_GPIO_Init+0xf4>)
 800375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375e:	2202      	movs	r2, #2
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	4b31      	ldr	r3, [pc, #196]	@ (800382c <MX_GPIO_Init+0xf4>)
 8003768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376a:	4b30      	ldr	r3, [pc, #192]	@ (800382c <MX_GPIO_Init+0xf4>)
 800376c:	2101      	movs	r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34
 8003772:	4b2e      	ldr	r3, [pc, #184]	@ (800382c <MX_GPIO_Init+0xf4>)
 8003774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIN_MIC_PU_EN_GPIO_Port, LIN_MIC_PU_EN_Pin, GPIO_PIN_SET);
 800377e:	4b2c      	ldr	r3, [pc, #176]	@ (8003830 <MX_GPIO_Init+0xf8>)
 8003780:	2201      	movs	r2, #1
 8003782:	2180      	movs	r1, #128	@ 0x80
 8003784:	0018      	movs	r0, r3
 8003786:	f002 fc3a 	bl	8005ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HP_MODE_SET_GPIO_Port, HP_MODE_SET_Pin, GPIO_PIN_RESET);
 800378a:	23a0      	movs	r3, #160	@ 0xa0
 800378c:	05db      	lsls	r3, r3, #23
 800378e:	2200      	movs	r2, #0
 8003790:	2104      	movs	r1, #4
 8003792:	0018      	movs	r0, r3
 8003794:	f002 fc33 	bl	8005ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIN_MIC_PU_EN_Pin;
 8003798:	193b      	adds	r3, r7, r4
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	2201      	movs	r2, #1
 80037a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	2201      	movs	r2, #1
 80037a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	2202      	movs	r2, #2
 80037ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIN_MIC_PU_EN_GPIO_Port, &GPIO_InitStruct);
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003830 <MX_GPIO_Init+0xf8>)
 80037b4:	0019      	movs	r1, r3
 80037b6:	0010      	movs	r0, r2
 80037b8:	f002 faa0 	bl	8005cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HP_DET_Pin;
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	2202      	movs	r2, #2
 80037c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode =  GPIO_MODE_IT_RISING;
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	2288      	movs	r2, #136	@ 0x88
 80037c6:	0352      	lsls	r2, r2, #13
 80037c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	2201      	movs	r2, #1
 80037ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HP_DET_GPIO_Port, &GPIO_InitStruct);
 80037d0:	193a      	adds	r2, r7, r4
 80037d2:	23a0      	movs	r3, #160	@ 0xa0
 80037d4:	05db      	lsls	r3, r3, #23
 80037d6:	0011      	movs	r1, r2
 80037d8:	0018      	movs	r0, r3
 80037da:	f002 fa8f 	bl	8005cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HP_MODE_SET_Pin;
 80037de:	0021      	movs	r1, r4
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2204      	movs	r2, #4
 80037e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	2201      	movs	r2, #1
 80037ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2202      	movs	r2, #2
 80037f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2202      	movs	r2, #2
 80037f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HP_MODE_SET_GPIO_Port, &GPIO_InitStruct);
 80037f8:	187a      	adds	r2, r7, r1
 80037fa:	23a0      	movs	r3, #160	@ 0xa0
 80037fc:	05db      	lsls	r3, r3, #23
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f002 fa7b 	bl	8005cfc <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003806:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <MX_GPIO_Init+0xfc>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <MX_GPIO_Init+0xfc>)
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	0289      	lsls	r1, r1, #10
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2101      	movs	r1, #1
 8003818:	2005      	movs	r0, #5
 800381a:	f002 f897 	bl	800594c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800381e:	2005      	movs	r0, #5
 8003820:	f002 f8a9 	bl	8005976 <HAL_NVIC_EnableIRQ>

}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b009      	add	sp, #36	@ 0x24
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	50000400 	.word	0x50000400
 8003834:	40010000 	.word	0x40010000

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	0002      	movs	r2, r0
 8003840:	1dfb      	adds	r3, r7, #7
 8003842:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b7f      	cmp	r3, #127	@ 0x7f
 800384a:	d809      	bhi.n	8003860 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	001a      	movs	r2, r3
 8003852:	231f      	movs	r3, #31
 8003854:	401a      	ands	r2, r3
 8003856:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <__NVIC_EnableIRQ+0x30>)
 8003858:	2101      	movs	r1, #1
 800385a:	4091      	lsls	r1, r2
 800385c:	000a      	movs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	0002      	movs	r2, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003880:	d828      	bhi.n	80038d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003882:	4a2f      	ldr	r2, [pc, #188]	@ (8003940 <__NVIC_SetPriority+0xd4>)
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b25b      	sxtb	r3, r3
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	33c0      	adds	r3, #192	@ 0xc0
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	589b      	ldr	r3, [r3, r2]
 8003892:	1dfa      	adds	r2, r7, #7
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	0011      	movs	r1, r2
 8003898:	2203      	movs	r2, #3
 800389a:	400a      	ands	r2, r1
 800389c:	00d2      	lsls	r2, r2, #3
 800389e:	21ff      	movs	r1, #255	@ 0xff
 80038a0:	4091      	lsls	r1, r2
 80038a2:	000a      	movs	r2, r1
 80038a4:	43d2      	mvns	r2, r2
 80038a6:	401a      	ands	r2, r3
 80038a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	22ff      	movs	r2, #255	@ 0xff
 80038b0:	401a      	ands	r2, r3
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	0018      	movs	r0, r3
 80038b8:	2303      	movs	r3, #3
 80038ba:	4003      	ands	r3, r0
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038c0:	481f      	ldr	r0, [pc, #124]	@ (8003940 <__NVIC_SetPriority+0xd4>)
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b25b      	sxtb	r3, r3
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	430a      	orrs	r2, r1
 80038cc:	33c0      	adds	r3, #192	@ 0xc0
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038d2:	e031      	b.n	8003938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <__NVIC_SetPriority+0xd8>)
 80038d6:	1dfb      	adds	r3, r7, #7
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	0019      	movs	r1, r3
 80038dc:	230f      	movs	r3, #15
 80038de:	400b      	ands	r3, r1
 80038e0:	3b08      	subs	r3, #8
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	3306      	adds	r3, #6
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	18d3      	adds	r3, r2, r3
 80038ea:	3304      	adds	r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1dfa      	adds	r2, r7, #7
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	0011      	movs	r1, r2
 80038f4:	2203      	movs	r2, #3
 80038f6:	400a      	ands	r2, r1
 80038f8:	00d2      	lsls	r2, r2, #3
 80038fa:	21ff      	movs	r1, #255	@ 0xff
 80038fc:	4091      	lsls	r1, r2
 80038fe:	000a      	movs	r2, r1
 8003900:	43d2      	mvns	r2, r2
 8003902:	401a      	ands	r2, r3
 8003904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	22ff      	movs	r2, #255	@ 0xff
 800390c:	401a      	ands	r2, r3
 800390e:	1dfb      	adds	r3, r7, #7
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	0018      	movs	r0, r3
 8003914:	2303      	movs	r3, #3
 8003916:	4003      	ands	r3, r0
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800391c:	4809      	ldr	r0, [pc, #36]	@ (8003944 <__NVIC_SetPriority+0xd8>)
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	001c      	movs	r4, r3
 8003924:	230f      	movs	r3, #15
 8003926:	4023      	ands	r3, r4
 8003928:	3b08      	subs	r3, #8
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	430a      	orrs	r2, r1
 800392e:	3306      	adds	r3, #6
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	18c3      	adds	r3, r0, r3
 8003934:	3304      	adds	r3, #4
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b003      	add	sp, #12
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a03      	ldr	r2, [pc, #12]	@ (8003964 <LL_I2C_EnableClockStretching+0x1c>)
 8003956:	401a      	ands	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	601a      	str	r2, [r3, #0]
}
 800395c:	46c0      	nop			@ (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}
 8003964:	fffdffff 	.word	0xfffdffff

08003968 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a03      	ldr	r2, [pc, #12]	@ (8003984 <LL_I2C_DisableGeneralCall+0x1c>)
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fff7ffff 	.word	0xfff7ffff

08003988 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a05      	ldr	r2, [pc, #20]	@ (80039b0 <LL_I2C_SetOwnAddress2+0x28>)
 800399a:	401a      	ands	r2, r3
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	60da      	str	r2, [r3, #12]
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	fffff801 	.word	0xfffff801

080039b4 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a03      	ldr	r2, [pc, #12]	@ (80039d0 <LL_I2C_DisableOwnAddress2+0x1c>)
 80039c2:	401a      	ands	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	ffff7fff 	.word	0xffff7fff

080039d4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2280      	movs	r2, #128	@ 0x80
 80039e2:	0492      	lsls	r2, r2, #18
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	605a      	str	r2, [r3, #4]
}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b002      	add	sp, #8
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80039fc:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <LL_APB1_GRP1_EnableClock+0x28>)
 80039fe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003a00:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <LL_APB1_GRP1_EnableClock+0x28>)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8003a08:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <LL_APB1_GRP1_EnableClock+0x28>)
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000

08003a20 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8003a28:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <LL_IOP_GRP1_EnableClock+0x28>)
 8003a2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <LL_IOP_GRP1_EnableClock+0x28>)
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <LL_IOP_GRP1_EnableClock+0x28>)
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	46c0      	nop			@ (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000

08003a4c <user_i2c_init>:
  /* USER CODE END I2C2_Init 2 */

}

/* USER CODE BEGIN 1 */
void user_i2c_init(void) {
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b08f      	sub	sp, #60	@ 0x3c
 8003a50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C2_Init 0 */

	/* USER CODE END I2C2_Init 0 */

	LL_I2C_InitTypeDef I2C_InitStruct = { 0 };
 8003a52:	241c      	movs	r4, #28
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	0018      	movs	r0, r3
 8003a58:	231c      	movs	r3, #28
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	f003 fee9 	bl	8007834 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	0018      	movs	r0, r3
 8003a66:	2318      	movs	r3, #24
 8003a68:	001a      	movs	r2, r3
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f003 fee2 	bl	8007834 <memset>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7ff ffd5 	bl	8003a20 <LL_IOP_GRP1_EnableClock>
	/**I2C2 GPIO Configuration
	 PA11 [PA9]   ------> I2C2_SCL
	 PA12 [PA10]   ------> I2C2_SDA
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	2202      	movs	r2, #2
 8003a82:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	2202      	movs	r2, #2
 8003a88:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	2201      	movs	r2, #1
 8003a94:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2206      	movs	r2, #6
 8003a9a:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	1d3a      	adds	r2, r7, #4
 8003a9e:	23a0      	movs	r3, #160	@ 0xa0
 8003aa0:	05db      	lsls	r3, r3, #23
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f003 f88e 	bl	8006bc6 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	0152      	lsls	r2, r2, #5
 8003ab0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	2202      	movs	r2, #2
 8003abc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	2206      	movs	r2, #6
 8003ace:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	1d3a      	adds	r2, r7, #4
 8003ad2:	23a0      	movs	r3, #160	@ 0xa0
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	0011      	movs	r1, r2
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f003 f874 	bl	8006bc6 <LL_GPIO_Init>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	03db      	lsls	r3, r3, #15
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7ff ff86 	bl	80039f4 <LL_APB1_GRP1_EnableClock>

	/* I2C2 interrupt Init */
	NVIC_SetPriority(I2C2_IRQn, 0);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	2018      	movs	r0, #24
 8003aec:	f7ff febe 	bl	800386c <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C2_IRQn);
 8003af0:	2018      	movs	r0, #24
 8003af2:	f7ff fea1 	bl	8003838 <__NVIC_EnableIRQ>

	/* USER CODE END I2C2_Init 1 */

	/** I2C Initialization
	 */
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003af6:	0021      	movs	r1, r4
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
	I2C_InitStruct.Timing = 0x00C12166;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <user_i2c_init+0x128>)
 8003b02:	605a      	str	r2, [r3, #4]
	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
	I2C_InitStruct.DigitalFilter = 0;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
	I2C_InitStruct.OwnAddress1 = i2c_addr_reg << 1;
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <user_i2c_init+0x12c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	005a      	lsls	r2, r3, #1
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	611a      	str	r2, [r3, #16]
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	2200      	movs	r2, #0
 8003b20:	615a      	str	r2, [r3, #20]
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
	LL_I2C_Init(I2C2, &I2C_InitStruct);
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <user_i2c_init+0x130>)
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	0010      	movs	r0, r2
 8003b30:	f003 f99a 	bl	8006e68 <LL_I2C_Init>
	LL_I2C_EnableAutoEndMode(I2C2);
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <user_i2c_init+0x130>)
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff ff4c 	bl	80039d4 <LL_I2C_EnableAutoEndMode>
	LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b7c <user_i2c_init+0x130>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff ff20 	bl	8003988 <LL_I2C_SetOwnAddress2>
	LL_I2C_DisableOwnAddress2(I2C2);
 8003b48:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <user_i2c_init+0x130>)
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7ff ff32 	bl	80039b4 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C2);
 8003b50:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <user_i2c_init+0x130>)
 8003b52:	0018      	movs	r0, r3
 8003b54:	f7ff ff08 	bl	8003968 <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C2);
 8003b58:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <user_i2c_init+0x130>)
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff fef4 	bl	8003948 <LL_I2C_EnableClockStretching>
	/* USER CODE BEGIN I2C2_Init 2 */
	set_i2c_slave_address(i2c_addr_reg);
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <user_i2c_init+0x12c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 f998 	bl	8003e9c <set_i2c_slave_address>
	/* USER CODE END I2C2_Init 2 */

}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b00f      	add	sp, #60	@ 0x3c
 8003b72:	bd90      	pop	{r4, r7, pc}
 8003b74:	00c12166 	.word	0x00c12166
 8003b78:	200006a2 	.word	0x200006a2
 8003b7c:	40005800 	.word	0x40005800

08003b80 <LL_I2C_Enable>:
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <LL_I2C_Disable>:
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4393      	bics	r3, r2
 8003bac:	001a      	movs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <LL_I2C_EnableIT_TX>:
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <LL_I2C_EnableIT_RX>:
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2204      	movs	r2, #4
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b002      	add	sp, #8
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <LL_I2C_EnableIT_ADDR>:
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2208      	movs	r2, #8
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	601a      	str	r2, [r3, #0]
}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b002      	add	sp, #8
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <LL_I2C_DisableIT_ADDR>:
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	001a      	movs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	601a      	str	r2, [r3, #0]
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <LL_I2C_EnableIT_NACK>:
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <LL_I2C_DisableIT_NACK>:
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2210      	movs	r2, #16
 8003c56:	4393      	bics	r3, r2
 8003c58:	001a      	movs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	601a      	str	r2, [r3, #0]
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <LL_I2C_EnableIT_STOP>:
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2220      	movs	r2, #32
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <LL_I2C_DisableIT_STOP>:
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	4393      	bics	r3, r2
 8003c92:	001a      	movs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <LL_I2C_EnableIT_ERR>:
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <LL_I2C_DisableIT_ERR>:
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2280      	movs	r2, #128	@ 0x80
 8003cca:	4393      	bics	r3, r2
 8003ccc:	001a      	movs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <LL_I2C_IsActiveFlag_TXE>:
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <LL_I2C_IsActiveFlag_TXE+0x18>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <LL_I2C_IsActiveFlag_TXIS>:
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d101      	bne.n	8003d14 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <LL_I2C_IsActiveFlag_RXNE>:
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d101      	bne.n	8003d36 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <LL_I2C_IsActiveFlag_ADDR>:
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d101      	bne.n	8003d58 <LL_I2C_IsActiveFlag_ADDR+0x18>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <LL_I2C_IsActiveFlag_ADDR+0x1a>
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <LL_I2C_IsActiveFlag_NACK>:
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2210      	movs	r2, #16
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d101      	bne.n	8003d7a <LL_I2C_IsActiveFlag_NACK+0x18>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_I2C_IsActiveFlag_NACK+0x1a>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <LL_I2C_IsActiveFlag_STOP>:
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2220      	movs	r2, #32
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d101      	bne.n	8003d9c <LL_I2C_IsActiveFlag_STOP+0x18>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <LL_I2C_IsActiveFlag_STOP+0x1a>
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b002      	add	sp, #8
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <LL_I2C_ClearFlag_ADDR>:
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2208      	movs	r2, #8
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	61da      	str	r2, [r3, #28]
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <LL_I2C_ClearFlag_NACK>:
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	61da      	str	r2, [r3, #28]
}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <LL_I2C_ClearFlag_STOP>:
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2220      	movs	r2, #32
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	61da      	str	r2, [r3, #28]
}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b002      	add	sp, #8
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <LL_I2C_ClearFlag_TXE>:
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	619a      	str	r2, [r3, #24]
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <LL_I2C_DisableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_DisableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a03      	ldr	r2, [pc, #12]	@ (8003e2c <LL_I2C_DisableAutoEndMode+0x1c>)
 8003e1e:	401a      	ands	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fdffffff 	.word	0xfdffffff

08003e30 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(const I2C_TypeDef *I2Cx)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	2380      	movs	r3, #128	@ 0x80
 8003e3e:	025b      	lsls	r3, r3, #9
 8003e40:	4013      	ands	r3, r2
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b002      	add	sp, #8
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <LL_I2C_GetAddressMatchCode>:
  * @rmtoll ISR          ADDCODE       LL_I2C_GetAddressMatchCode
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0x3F
  */
__STATIC_INLINE uint32_t LL_I2C_GetAddressMatchCode(const I2C_TypeDef *I2Cx)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	0c5b      	lsrs	r3, r3, #17
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	22fe      	movs	r2, #254	@ 0xfe
 8003e5c:	4013      	ands	r3, r2
}
 8003e5e:	0018      	movs	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2db      	uxtb	r3, r3
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	000a      	movs	r2, r1
 8003e86:	1cfb      	adds	r3, r7, #3
 8003e88:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8003e8a:	1cfb      	adds	r3, r7, #3
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <set_i2c_slave_address>:
volatile uint16_t tx_len = 0;
volatile uint32_t i2c_timeout_counter = 0;
volatile uint32_t i2c_stop_timeout_flag = 0;
volatile uint32_t i2c_stop_timeout_counter = 0;

void set_i2c_slave_address(uint8_t addr) { i2c_addr = (addr << 1); }
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	1dfb      	adds	r3, r7, #7
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	18db      	adds	r3, r3, r3
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	4b02      	ldr	r3, [pc, #8]	@ (8003ebc <set_i2c_slave_address+0x20>)
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000682 	.word	0x20000682

08003ec0 <i2c2_it_enable>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(rx_data);
  UNUSED(len);
}

void i2c2_it_enable(void) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  LL_I2C_Enable(I2C2);
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <i2c2_it_enable+0x34>)
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff fe5a 	bl	8003b80 <LL_I2C_Enable>
  LL_I2C_EnableIT_ADDR(I2C2);
 8003ecc:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <i2c2_it_enable+0x34>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7ff fe8f 	bl	8003bf2 <LL_I2C_EnableIT_ADDR>
  LL_I2C_EnableIT_NACK(I2C2);
 8003ed4:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <i2c2_it_enable+0x34>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff fea8 	bl	8003c2c <LL_I2C_EnableIT_NACK>
  LL_I2C_EnableIT_ERR(I2C2);
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <i2c2_it_enable+0x34>)
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7ff fede 	bl	8003ca0 <LL_I2C_EnableIT_ERR>
  LL_I2C_EnableIT_STOP(I2C2);
 8003ee4:	4b03      	ldr	r3, [pc, #12]	@ (8003ef4 <i2c2_it_enable+0x34>)
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff febd 	bl	8003c66 <LL_I2C_EnableIT_STOP>
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	40005800 	.word	0x40005800

08003ef8 <i2c2_it_disable>:

void i2c2_it_disable(void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  LL_I2C_DisableIT_ADDR(I2C2);
 8003efc:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <i2c2_it_disable+0x2c>)
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fe85 	bl	8003c0e <LL_I2C_DisableIT_ADDR>
  LL_I2C_DisableIT_NACK(I2C2);
 8003f04:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <i2c2_it_disable+0x2c>)
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7ff fe9e 	bl	8003c48 <LL_I2C_DisableIT_NACK>
  LL_I2C_DisableIT_ERR(I2C2);
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <i2c2_it_disable+0x2c>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff fed4 	bl	8003cbc <LL_I2C_DisableIT_ERR>
  LL_I2C_DisableIT_STOP(I2C2);
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <i2c2_it_disable+0x2c>)
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7ff feb3 	bl	8003c82 <LL_I2C_DisableIT_STOP>
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	40005800 	.word	0x40005800

08003f28 <Error_Callback>:

void Error_Callback(void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  // i2c2_it_enable();
  // LL_I2C_AcknowledgeNextData(I2C2, LL_I2C_NACK);
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <i2c2_set_send_data>:

void i2c2_set_send_data(uint8_t *tx_ptr, uint16_t len) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	000a      	movs	r2, r1
 8003f3e:	1cbb      	adds	r3, r7, #2
 8003f40:	801a      	strh	r2, [r3, #0]
  if (len > I2C_RECEIVE_BUFFER_LEN) {
 8003f42:	1cbb      	adds	r3, r7, #2
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	2396      	movs	r3, #150	@ 0x96
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d903      	bls.n	8003f56 <i2c2_set_send_data+0x22>
    len = I2C_RECEIVE_BUFFER_LEN;
 8003f4e:	1cbb      	adds	r3, r7, #2
 8003f50:	2296      	movs	r2, #150	@ 0x96
 8003f52:	0092      	lsls	r2, r2, #2
 8003f54:	801a      	strh	r2, [r3, #0]
  }

  if (len == 0 || tx_ptr == NULL) {
 8003f56:	1cbb      	adds	r3, r7, #2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d011      	beq.n	8003f82 <i2c2_set_send_data+0x4e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <i2c2_set_send_data+0x4e>
    return;
  }
  memcpy((void *)tx_buffer, tx_ptr, len);
 8003f64:	1cbb      	adds	r3, r7, #2
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <i2c2_set_send_data+0x58>)
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f003 fc8d 	bl	800788c <memcpy>
  tx_buffer_index = 0;
 8003f72:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <i2c2_set_send_data+0x5c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	801a      	strh	r2, [r3, #0]
  tx_len = len;
 8003f78:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <i2c2_set_send_data+0x60>)
 8003f7a:	1cba      	adds	r2, r7, #2
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	e000      	b.n	8003f84 <i2c2_set_send_data+0x50>
    return;
 8003f82:	46c0      	nop			@ (mov r8, r8)
}
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	20000428 	.word	0x20000428
 8003f90:	20000684 	.word	0x20000684
 8003f94:	20000686 	.word	0x20000686

08003f98 <Slave_Reception_Callback>:

void Slave_Reception_Callback(void) {
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <Slave_Reception_Callback+0x2c>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	b291      	uxth	r1, r2
 8003fa6:	4a07      	ldr	r2, [pc, #28]	@ (8003fc4 <Slave_Reception_Callback+0x2c>)
 8003fa8:	8011      	strh	r1, [r2, #0]
 8003faa:	001c      	movs	r4, r3
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <Slave_Reception_Callback+0x30>)
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff ff59 	bl	8003e66 <LL_I2C_ReceiveData8>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <Slave_Reception_Callback+0x34>)
 8003fba:	551a      	strb	r2, [r3, r4]
}
 8003fbc:	46c0      	nop			@ (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	20000680 	.word	0x20000680
 8003fc8:	40005800 	.word	0x40005800
 8003fcc:	200001d0 	.word	0x200001d0

08003fd0 <Slave_Ready_To_Transmit_Callback>:

void Slave_Ready_To_Transmit_Callback(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  LL_I2C_TransmitData8(I2C2, tx_buffer[tx_buffer_index]);
 8003fd4:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <Slave_Ready_To_Transmit_Callback+0x48>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	001a      	movs	r2, r3
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <Slave_Ready_To_Transmit_Callback+0x4c>)
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8004020 <Slave_Ready_To_Transmit_Callback+0x50>)
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	0010      	movs	r0, r2
 8003fe8:	f7ff ff48 	bl	8003e7c <LL_I2C_TransmitData8>
  tx_buffer_index++;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <Slave_Ready_To_Transmit_Callback+0x48>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	4b08      	ldr	r3, [pc, #32]	@ (8004018 <Slave_Ready_To_Transmit_Callback+0x48>)
 8003ff8:	801a      	strh	r2, [r3, #0]
  if (tx_buffer_index >= tx_len) {
 8003ffa:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <Slave_Ready_To_Transmit_Callback+0x48>)
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <Slave_Ready_To_Transmit_Callback+0x54>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <Slave_Ready_To_Transmit_Callback+0x40>
    tx_buffer_index = 0;
 800400a:	4b03      	ldr	r3, [pc, #12]	@ (8004018 <Slave_Ready_To_Transmit_Callback+0x48>)
 800400c:	2200      	movs	r2, #0
 800400e:	801a      	strh	r2, [r3, #0]
  }
}
 8004010:	46c0      	nop			@ (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	20000684 	.word	0x20000684
 800401c:	20000428 	.word	0x20000428
 8004020:	40005800 	.word	0x40005800
 8004024:	20000686 	.word	0x20000686

08004028 <I2C2_IRQHandler>:

void I2C2_IRQHandler(void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */
  i2c_timeout_counter++;
 800402c:	4b64      	ldr	r3, [pc, #400]	@ (80041c0 <I2C2_IRQHandler+0x198>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	4b63      	ldr	r3, [pc, #396]	@ (80041c0 <I2C2_IRQHandler+0x198>)
 8004034:	601a      	str	r2, [r3, #0]
  if (i2c_timeout_counter > 1000) {
 8004036:	4b62      	ldr	r3, [pc, #392]	@ (80041c0 <I2C2_IRQHandler+0x198>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	23fa      	movs	r3, #250	@ 0xfa
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	429a      	cmp	r2, r3
 8004040:	d916      	bls.n	8004070 <I2C2_IRQHandler+0x48>
    LL_I2C_DeInit(I2C2);
 8004042:	4b60      	ldr	r3, [pc, #384]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004044:	0018      	movs	r0, r3
 8004046:	f002 fed9 	bl	8006dfc <LL_I2C_DeInit>
    LL_I2C_DisableAutoEndMode(I2C2);
 800404a:	4b5e      	ldr	r3, [pc, #376]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff fedf 	bl	8003e10 <LL_I2C_DisableAutoEndMode>
    LL_I2C_Disable(I2C2);
 8004052:	4b5c      	ldr	r3, [pc, #368]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fda1 	bl	8003b9c <LL_I2C_Disable>
    LL_I2C_DisableIT_ADDR(I2C2);
 800405a:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fdd6 	bl	8003c0e <LL_I2C_DisableIT_ADDR>
    user_i2c_init();
 8004062:	f7ff fcf3 	bl	8003a4c <user_i2c_init>
    i2c2_it_enable();
 8004066:	f7ff ff2b 	bl	8003ec0 <i2c2_it_enable>
    i2c_timeout_counter = 0;
 800406a:	4b55      	ldr	r3, [pc, #340]	@ (80041c0 <I2C2_IRQHandler+0x198>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
  }
  /* Check ADDR flag value in ISR register */
  if (LL_I2C_IsActiveFlag_ADDR(I2C2)) {
 8004070:	4b54      	ldr	r3, [pc, #336]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004072:	0018      	movs	r0, r3
 8004074:	f7ff fe64 	bl	8003d40 <LL_I2C_IsActiveFlag_ADDR>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d04f      	beq.n	800411c <I2C2_IRQHandler+0xf4>
    /* Verify the Address Match with the OWN Slave address */
    if (LL_I2C_GetAddressMatchCode(I2C2) == i2c_addr) {
 800407c:	4b51      	ldr	r3, [pc, #324]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 800407e:	0018      	movs	r0, r3
 8004080:	f7ff fee3 	bl	8003e4a <LL_I2C_GetAddressMatchCode>
 8004084:	0002      	movs	r2, r0
 8004086:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <I2C2_IRQHandler+0x1a0>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	429a      	cmp	r2, r3
 800408e:	d13e      	bne.n	800410e <I2C2_IRQHandler+0xe6>
      if (ubReceiveIndex) {
 8004090:	4b4e      	ldr	r3, [pc, #312]	@ (80041cc <I2C2_IRQHandler+0x1a4>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <I2C2_IRQHandler+0x90>
        i2c2_it_disable();
 800409a:	f7ff ff2d 	bl	8003ef8 <i2c2_it_disable>
        Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 800409e:	4b4b      	ldr	r3, [pc, #300]	@ (80041cc <I2C2_IRQHandler+0x1a4>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <I2C2_IRQHandler+0x1a8>)
 80040a6:	0011      	movs	r1, r2
 80040a8:	0018      	movs	r0, r3
 80040aa:	f000 fa69 	bl	8004580 <Slave_Complete_Callback>
        ubReceiveIndex = 0;
 80040ae:	4b47      	ldr	r3, [pc, #284]	@ (80041cc <I2C2_IRQHandler+0x1a4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	801a      	strh	r2, [r3, #0]
        i2c2_it_enable();
 80040b4:	f7ff ff04 	bl	8003ec0 <i2c2_it_enable>
      }
      /* Verify the transfer direction, a write direction, Slave enters receiver
       * mode */
      if (LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_WRITE) {
 80040b8:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff feb8 	bl	8003e30 <LL_I2C_GetTransferDirection>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d10b      	bne.n	80040dc <I2C2_IRQHandler+0xb4>
        /* Clear ADDR flag value in ISR register */
        LL_I2C_ClearFlag_ADDR(I2C2);
 80040c4:	4b3f      	ldr	r3, [pc, #252]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f7ff fe6d 	bl	8003da6 <LL_I2C_ClearFlag_ADDR>

        /* Enable Receive Interrupt */
        LL_I2C_EnableIT_RX(I2C2);
 80040cc:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7ff fd81 	bl	8003bd6 <LL_I2C_EnableIT_RX>
        i2c_stop_timeout_flag = 1;
 80040d4:	4b3f      	ldr	r3, [pc, #252]	@ (80041d4 <I2C2_IRQHandler+0x1ac>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C2_IRQn 0 */

  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80040da:	e06e      	b.n	80041ba <I2C2_IRQHandler+0x192>
      else if (LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_READ) {
 80040dc:	4b39      	ldr	r3, [pc, #228]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f7ff fea6 	bl	8003e30 <LL_I2C_GetTransferDirection>
 80040e4:	0002      	movs	r2, r0
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	025b      	lsls	r3, r3, #9
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d108      	bne.n	8004100 <I2C2_IRQHandler+0xd8>
        LL_I2C_ClearFlag_ADDR(I2C2);
 80040ee:	4b35      	ldr	r3, [pc, #212]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fe58 	bl	8003da6 <LL_I2C_ClearFlag_ADDR>
        LL_I2C_EnableIT_TX(I2C2);
 80040f6:	4b33      	ldr	r3, [pc, #204]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7ff fd5e 	bl	8003bba <LL_I2C_EnableIT_TX>
}
 80040fe:	e05c      	b.n	80041ba <I2C2_IRQHandler+0x192>
        LL_I2C_ClearFlag_ADDR(I2C2);
 8004100:	4b30      	ldr	r3, [pc, #192]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004102:	0018      	movs	r0, r3
 8004104:	f7ff fe4f 	bl	8003da6 <LL_I2C_ClearFlag_ADDR>
        Error_Callback();
 8004108:	f7ff ff0e 	bl	8003f28 <Error_Callback>
}
 800410c:	e055      	b.n	80041ba <I2C2_IRQHandler+0x192>
      LL_I2C_ClearFlag_ADDR(I2C2);
 800410e:	4b2d      	ldr	r3, [pc, #180]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004110:	0018      	movs	r0, r3
 8004112:	f7ff fe48 	bl	8003da6 <LL_I2C_ClearFlag_ADDR>
      Error_Callback();
 8004116:	f7ff ff07 	bl	8003f28 <Error_Callback>
}
 800411a:	e04e      	b.n	80041ba <I2C2_IRQHandler+0x192>
  else if (LL_I2C_IsActiveFlag_NACK(I2C2)) {
 800411c:	4b29      	ldr	r3, [pc, #164]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 800411e:	0018      	movs	r0, r3
 8004120:	f7ff fe1f 	bl	8003d62 <LL_I2C_IsActiveFlag_NACK>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d004      	beq.n	8004132 <I2C2_IRQHandler+0x10a>
    LL_I2C_ClearFlag_NACK(I2C2);
 8004128:	4b26      	ldr	r3, [pc, #152]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 800412a:	0018      	movs	r0, r3
 800412c:	f7ff fe49 	bl	8003dc2 <LL_I2C_ClearFlag_NACK>
}
 8004130:	e043      	b.n	80041ba <I2C2_IRQHandler+0x192>
  else if (LL_I2C_IsActiveFlag_TXIS(I2C2)) {
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fde1 	bl	8003cfc <LL_I2C_IsActiveFlag_TXIS>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d002      	beq.n	8004144 <I2C2_IRQHandler+0x11c>
    Slave_Ready_To_Transmit_Callback();
 800413e:	f7ff ff47 	bl	8003fd0 <Slave_Ready_To_Transmit_Callback>
}
 8004142:	e03a      	b.n	80041ba <I2C2_IRQHandler+0x192>
  else if (LL_I2C_IsActiveFlag_RXNE(I2C2)) {
 8004144:	4b1f      	ldr	r3, [pc, #124]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004146:	0018      	movs	r0, r3
 8004148:	f7ff fde9 	bl	8003d1e <LL_I2C_IsActiveFlag_RXNE>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d002      	beq.n	8004156 <I2C2_IRQHandler+0x12e>
    Slave_Reception_Callback();
 8004150:	f7ff ff22 	bl	8003f98 <Slave_Reception_Callback>
}
 8004154:	e031      	b.n	80041ba <I2C2_IRQHandler+0x192>
  else if (LL_I2C_IsActiveFlag_STOP(I2C2)) {
 8004156:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff fe13 	bl	8003d84 <LL_I2C_IsActiveFlag_STOP>
 800415e:	1e03      	subs	r3, r0, #0
 8004160:	d023      	beq.n	80041aa <I2C2_IRQHandler+0x182>
    LL_I2C_ClearFlag_STOP(I2C2);
 8004162:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff fe3a 	bl	8003dde <LL_I2C_ClearFlag_STOP>
    if (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 800416a:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff fdb4 	bl	8003cda <LL_I2C_IsActiveFlag_TXE>
 8004172:	1e03      	subs	r3, r0, #0
 8004174:	d103      	bne.n	800417e <I2C2_IRQHandler+0x156>
      LL_I2C_ClearFlag_TXE(I2C2);
 8004176:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 8004178:	0018      	movs	r0, r3
 800417a:	f7ff fe3e 	bl	8003dfa <LL_I2C_ClearFlag_TXE>
    i2c2_it_disable();
 800417e:	f7ff febb 	bl	8003ef8 <i2c2_it_disable>
    Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 8004182:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <I2C2_IRQHandler+0x1a4>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29a      	uxth	r2, r3
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <I2C2_IRQHandler+0x1a8>)
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f000 f9f7 	bl	8004580 <Slave_Complete_Callback>
    ubReceiveIndex = 0;
 8004192:	4b0e      	ldr	r3, [pc, #56]	@ (80041cc <I2C2_IRQHandler+0x1a4>)
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
    i2c2_it_enable();
 8004198:	f7ff fe92 	bl	8003ec0 <i2c2_it_enable>
    i2c_stop_timeout_flag = 0;
 800419c:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <I2C2_IRQHandler+0x1ac>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
    i2c_stop_timeout_counter = 0;
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <I2C2_IRQHandler+0x1b0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
}
 80041a8:	e007      	b.n	80041ba <I2C2_IRQHandler+0x192>
  else if (!LL_I2C_IsActiveFlag_TXE(I2C2)) {
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <I2C2_IRQHandler+0x19c>)
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff fd94 	bl	8003cda <LL_I2C_IsActiveFlag_TXE>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d001      	beq.n	80041ba <I2C2_IRQHandler+0x192>
    Error_Callback();
 80041b6:	f7ff feb7 	bl	8003f28 <Error_Callback>
}
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000688 	.word	0x20000688
 80041c4:	40005800 	.word	0x40005800
 80041c8:	20000682 	.word	0x20000682
 80041cc:	20000680 	.word	0x20000680
 80041d0:	200001d0 	.word	0x200001d0
 80041d4:	2000068c 	.word	0x2000068c
 80041d8:	20000690 	.word	0x20000690

080041dc <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a03      	ldr	r2, [pc, #12]	@ (80041f4 <LL_IWDG_Enable+0x18>)
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b002      	add	sp, #8
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	0000cccc 	.word	0x0000cccc

080041f8 <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a03      	ldr	r2, [pc, #12]	@ (8004210 <LL_IWDG_ReloadCounter+0x18>)
 8004204:	601a      	str	r2, [r3, #0]
}
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	0000aaaa 	.word	0x0000aaaa

08004214 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a03      	ldr	r2, [pc, #12]	@ (800422c <LL_IWDG_EnableWriteAccess+0x18>)
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b002      	add	sp, #8
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	00005555 	.word	0x00005555

08004230 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2207      	movs	r2, #7
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	605a      	str	r2, [r3, #4]
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	051b      	lsls	r3, r3, #20
 800425a:	0d1a      	lsrs	r2, r3, #20
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	46c0      	nop			@ (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b002      	add	sp, #8
 8004266:	bd80      	pop	{r7, pc}

08004268 <LL_IWDG_IsReady>:
  *         SR           WVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2207      	movs	r2, #7
 8004276:	4013      	ands	r3, r2
 8004278:	d101      	bne.n	800427e <LL_IWDG_IsReady+0x16>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_IWDG_IsReady+0x18>
 800427e:	2300      	movs	r3, #0
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}

08004288 <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <MX_IWDG_Init+0x48>)
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff ffa4 	bl	80041dc <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8004294:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <MX_IWDG_Init+0x48>)
 8004296:	0018      	movs	r0, r3
 8004298:	f7ff ffbc 	bl	8004214 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_16);
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <MX_IWDG_Init+0x48>)
 800429e:	2102      	movs	r1, #2
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7ff ffc5 	bl	8004230 <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4095);
 80042a6:	4a0b      	ldr	r2, [pc, #44]	@ (80042d4 <MX_IWDG_Init+0x4c>)
 80042a8:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <MX_IWDG_Init+0x48>)
 80042aa:	0011      	movs	r1, r2
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff ffcd 	bl	800424c <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <MX_IWDG_Init+0x48>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff ffd6 	bl	8004268 <LL_IWDG_IsReady>
 80042bc:	0003      	movs	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d1f8      	bne.n	80042b4 <MX_IWDG_Init+0x2c>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 80042c2:	4b03      	ldr	r3, [pc, #12]	@ (80042d0 <MX_IWDG_Init+0x48>)
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff ff97 	bl	80041f8 <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40003000 	.word	0x40003000
 80042d4:	00000fff 	.word	0x00000fff

080042d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042dc:	f3bf 8f4f 	dsb	sy
}
 80042e0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e2:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <__NVIC_SystemReset+0x1c>)
 80042e4:	4a04      	ldr	r2, [pc, #16]	@ (80042f8 <__NVIC_SystemReset+0x20>)
 80042e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042e8:	f3bf 8f4f 	dsb	sy
}
 80042ec:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	e7fd      	b.n	80042ee <__NVIC_SystemReset+0x16>
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	05fa0004 	.word	0x05fa0004

080042fc <LL_IWDG_ReloadCounter>:
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a03      	ldr	r2, [pc, #12]	@ (8004314 <LL_IWDG_ReloadCounter+0x18>)
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	0000aaaa 	.word	0x0000aaaa

08004318 <iap_set>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void iap_set() {
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t *pVecTab = (uint32_t*) (0x20000000);
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	059b      	lsls	r3, r3, #22
 8004322:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 48; i++) {
 8004324:	230f      	movs	r3, #15
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e011      	b.n	8004352 <iap_set+0x3a>
		*(pVecTab++) = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
 800432e:	200f      	movs	r0, #15
 8004330:	183b      	adds	r3, r7, r0
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a14      	ldr	r2, [pc, #80]	@ (8004388 <iap_set+0x70>)
 8004338:	4694      	mov	ip, r2
 800433a:	4463      	add	r3, ip
 800433c:	001a      	movs	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1d19      	adds	r1, r3, #4
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 48; i++) {
 8004348:	183b      	adds	r3, r7, r0
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	183b      	adds	r3, r7, r0
 800434e:	3201      	adds	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	230f      	movs	r3, #15
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b2f      	cmp	r3, #47	@ 0x2f
 800435a:	d9e8      	bls.n	800432e <iap_set+0x16>
	}
#if 1 // STM32
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <iap_set+0x74>)
 800435e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004360:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <iap_set+0x74>)
 8004362:	2101      	movs	r1, #1
 8004364:	430a      	orrs	r2, r1
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40
 8004368:	4b08      	ldr	r3, [pc, #32]	@ (800438c <iap_set+0x74>)
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	2201      	movs	r2, #1
 800436e:	4013      	ands	r3, r2
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]

	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 8004374:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <iap_set+0x78>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <iap_set+0x78>)
 800437a:	2103      	movs	r1, #3
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
	RCM_EnableAPB2PeriphClock(RCM_APB2_PERIPH_SYSCFG);
	/* Remap SRAM at 0x00000000 */
	SYSCFG->CFG1_B.MMSEL = SYSCFG_MemoryRemap_SRAM;
#endif

}
 8004380:	46c0      	nop			@ (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}
 8004388:	08001800 	.word	0x08001800
 800438c:	40021000 	.word	0x40021000
 8004390:	40010000 	.word	0x40010000

08004394 <lin_mic_pc_enable>:

void lin_mic_pc_enable(void) {
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIN_MIC_PU_EN_GPIO_Port, LIN_MIC_PU_EN_Pin, GPIO_PIN_SET);
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <lin_mic_pc_enable+0x1c>)
 800439a:	2201      	movs	r2, #1
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	0018      	movs	r0, r3
 80043a0:	f001 fe2d 	bl	8005ffe <HAL_GPIO_WritePin>
	lin_mic_pc_en_reg = MICROPHONE_ON;
 80043a4:	4b03      	ldr	r3, [pc, #12]	@ (80043b4 <lin_mic_pc_enable+0x20>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	50000400 	.word	0x50000400
 80043b4:	20000694 	.word	0x20000694

080043b8 <lin_mic_pc_disable>:

void lin_mic_pc_disable(void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIN_MIC_PU_EN_GPIO_Port, LIN_MIC_PU_EN_Pin,
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <lin_mic_pc_disable+0x1c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	2180      	movs	r1, #128	@ 0x80
 80043c2:	0018      	movs	r0, r3
 80043c4:	f001 fe1b 	bl	8005ffe <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	lin_mic_pc_en_reg = MICROPHONE_OFF;
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <lin_mic_pc_disable+0x20>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	50000400 	.word	0x50000400
 80043d8:	20000694 	.word	0x20000694

080043dc <set_national_hp_mode>:

void set_national_hp_mode(void) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HP_MODE_SET_GPIO_Port, HP_MODE_SET_Pin, GPIO_PIN_RESET);
 80043e0:	23a0      	movs	r3, #160	@ 0xa0
 80043e2:	05db      	lsls	r3, r3, #23
 80043e4:	2200      	movs	r2, #0
 80043e6:	2104      	movs	r1, #4
 80043e8:	0018      	movs	r0, r3
 80043ea:	f001 fe08 	bl	8005ffe <HAL_GPIO_WritePin>
	hp_mode_reg = NATIONAL_STANDARD;
 80043ee:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <set_national_hp_mode+0x20>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	20000695 	.word	0x20000695

08004400 <set_americal_hp_mode>:
void set_americal_hp_mode(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HP_MODE_SET_GPIO_Port, HP_MODE_SET_Pin, GPIO_PIN_SET);
 8004404:	23a0      	movs	r3, #160	@ 0xa0
 8004406:	05db      	lsls	r3, r3, #23
 8004408:	2201      	movs	r2, #1
 800440a:	2104      	movs	r1, #4
 800440c:	0018      	movs	r0, r3
 800440e:	f001 fdf6 	bl	8005ffe <HAL_GPIO_WritePin>
	hp_mode_reg = AMERICA_STANDARD;
 8004412:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <set_americal_hp_mode+0x20>)
 8004414:	2201      	movs	r2, #1
 8004416:	701a      	strb	r2, [r3, #0]
}
 8004418:	46c0      	nop			@ (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	20000695 	.word	0x20000695

08004424 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	0002      	movs	r2, r0
 800442c:	1dbb      	adds	r3, r7, #6
 800442e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == HP_DET_Pin) {
 8004430:	1dbb      	adds	r3, r7, #6
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d102      	bne.n	800443e <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		hp_det_reg = HEADPHONE_INSERTION;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
	}
}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	20000696 	.word	0x20000696

0800444c <reg_init>:

void reg_init(void) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8004452:	1dfb      	adds	r3, r7, #7
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
	// 麦克风状态初始化
	if (get_lin_mic_pc_en_status() == 0xFF) {
 8004458:	f000 fcac 	bl	8004db4 <get_lin_mic_pc_en_status>
 800445c:	0003      	movs	r3, r0
 800445e:	2bff      	cmp	r3, #255	@ 0xff
 8004460:	d108      	bne.n	8004474 <reg_init+0x28>
		lin_mic_pc_en_reg = MICROPHONE_ON;
 8004462:	4b41      	ldr	r3, [pc, #260]	@ (8004568 <reg_init+0x11c>)
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
//		set_lin_mic_pc_en_status(MICROPHONE_ON);
		flag++;
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	3201      	adds	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e005      	b.n	8004480 <reg_init+0x34>
	} else {
		lin_mic_pc_en_reg = get_lin_mic_pc_en_status();
 8004474:	f000 fc9e 	bl	8004db4 <get_lin_mic_pc_en_status>
 8004478:	0003      	movs	r3, r0
 800447a:	001a      	movs	r2, r3
 800447c:	4b3a      	ldr	r3, [pc, #232]	@ (8004568 <reg_init+0x11c>)
 800447e:	701a      	strb	r2, [r3, #0]
	}
	if (lin_mic_pc_en_reg == MICROPHONE_ON) {
 8004480:	4b39      	ldr	r3, [pc, #228]	@ (8004568 <reg_init+0x11c>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <reg_init+0x44>
		lin_mic_pc_enable();
 800448a:	f7ff ff83 	bl	8004394 <lin_mic_pc_enable>
 800448e:	e001      	b.n	8004494 <reg_init+0x48>
	} else {
		lin_mic_pc_disable();
 8004490:	f7ff ff92 	bl	80043b8 <lin_mic_pc_disable>
	}
	// 耳机模式初始化
	if (get_hp_mode_status() == 0xFF) {
 8004494:	f000 fc98 	bl	8004dc8 <get_hp_mode_status>
 8004498:	0003      	movs	r3, r0
 800449a:	2bff      	cmp	r3, #255	@ 0xff
 800449c:	d108      	bne.n	80044b0 <reg_init+0x64>
		hp_mode_reg = NATIONAL_STANDARD;
 800449e:	4b33      	ldr	r3, [pc, #204]	@ (800456c <reg_init+0x120>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
//		set_hp_mode_status(NATIONAL_STANDARD);
		flag++;
 80044a4:	1dfb      	adds	r3, r7, #7
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	3201      	adds	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e005      	b.n	80044bc <reg_init+0x70>
	} else {
		hp_mode_reg = get_hp_mode_status();
 80044b0:	f000 fc8a 	bl	8004dc8 <get_hp_mode_status>
 80044b4:	0003      	movs	r3, r0
 80044b6:	001a      	movs	r2, r3
 80044b8:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <reg_init+0x120>)
 80044ba:	701a      	strb	r2, [r3, #0]
	}
	if (hp_mode_reg == NATIONAL_STANDARD) {
 80044bc:	4b2b      	ldr	r3, [pc, #172]	@ (800456c <reg_init+0x120>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <reg_init+0x80>
		set_national_hp_mode();
 80044c6:	f7ff ff89 	bl	80043dc <set_national_hp_mode>
 80044ca:	e001      	b.n	80044d0 <reg_init+0x84>
	} else {
		set_americal_hp_mode();
 80044cc:	f7ff ff98 	bl	8004400 <set_americal_hp_mode>
	}
	// 检测是否有耳机插入
	if (HAL_GPIO_ReadPin(HP_DET_GPIO_Port, HP_DET_Pin) == GPIO_PIN_RESET) {
 80044d0:	23a0      	movs	r3, #160	@ 0xa0
 80044d2:	05db      	lsls	r3, r3, #23
 80044d4:	2102      	movs	r1, #2
 80044d6:	0018      	movs	r0, r3
 80044d8:	f001 fd74 	bl	8005fc4 <HAL_GPIO_ReadPin>
 80044dc:	1e03      	subs	r3, r0, #0
 80044de:	d103      	bne.n	80044e8 <reg_init+0x9c>
		hp_det_reg = HEADPHONE_UNPLUG;
 80044e0:	4b23      	ldr	r3, [pc, #140]	@ (8004570 <reg_init+0x124>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e002      	b.n	80044ee <reg_init+0xa2>
	} else {
		hp_det_reg = HEADPHONE_INSERTION;
 80044e8:	4b21      	ldr	r3, [pc, #132]	@ (8004570 <reg_init+0x124>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
	}
	// rgb_reg亮度初始化
	if (get_rgb_light_status() == 0xFF) {
 80044ee:	f000 fc75 	bl	8004ddc <get_rgb_light_status>
 80044f2:	0003      	movs	r3, r0
 80044f4:	2bff      	cmp	r3, #255	@ 0xff
 80044f6:	d108      	bne.n	800450a <reg_init+0xbe>
		rgb_light_reg = rgb_reg_LIGHT_BASE;
 80044f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <reg_init+0x128>)
 80044fa:	220a      	movs	r2, #10
 80044fc:	701a      	strb	r2, [r3, #0]
//		set_rgb_light_status(rgb_reg_LIGHT_BASE);
		flag++;
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	3201      	adds	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e005      	b.n	8004516 <reg_init+0xca>
	} else {
		rgb_light_reg = get_rgb_light_status();
 800450a:	f000 fc67 	bl	8004ddc <get_rgb_light_status>
 800450e:	0003      	movs	r3, r0
 8004510:	001a      	movs	r2, r3
 8004512:	4b18      	ldr	r3, [pc, #96]	@ (8004574 <reg_init+0x128>)
 8004514:	701a      	strb	r2, [r3, #0]
	}
	if(flag!=0){
 8004516:	1dfb      	adds	r3, r7, #7
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <reg_init+0xea>
		write_flash(lin_mic_pc_en_reg, hp_mode_reg, rgb_light_reg);
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <reg_init+0x11c>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b2d8      	uxtb	r0, r3
 8004524:	4b11      	ldr	r3, [pc, #68]	@ (800456c <reg_init+0x120>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2d9      	uxtb	r1, r3
 800452a:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <reg_init+0x128>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	001a      	movs	r2, r3
 8004532:	f000 fc67 	bl	8004e04 <write_flash>
	}
	// 软件版本初始化
	sw_ver_reg = FIRMWARE_VERSION;
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <reg_init+0x12c>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
	// I2C地址初始化
	if (get_i2c_addr() == 0xFF) {
 800453c:	f000 fc58 	bl	8004df0 <get_i2c_addr>
 8004540:	0003      	movs	r3, r0
 8004542:	2bff      	cmp	r3, #255	@ 0xff
 8004544:	d106      	bne.n	8004554 <reg_init+0x108>
		i2c_addr_reg = I2C1_ADDR_BASE;
 8004546:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <reg_init+0x130>)
 8004548:	2233      	movs	r2, #51	@ 0x33
 800454a:	701a      	strb	r2, [r3, #0]
		set_i2c_addr(I2C1_ADDR_BASE);
 800454c:	2033      	movs	r0, #51	@ 0x33
 800454e:	f000 fbf3 	bl	8004d38 <set_i2c_addr>
	} else {
		i2c_addr_reg = get_i2c_addr();
	}
}
 8004552:	e005      	b.n	8004560 <reg_init+0x114>
		i2c_addr_reg = get_i2c_addr();
 8004554:	f000 fc4c 	bl	8004df0 <get_i2c_addr>
 8004558:	0003      	movs	r3, r0
 800455a:	001a      	movs	r2, r3
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <reg_init+0x130>)
 800455e:	701a      	strb	r2, [r3, #0]
}
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000694 	.word	0x20000694
 800456c:	20000695 	.word	0x20000695
 8004570:	20000696 	.word	0x20000696
 8004574:	20000697 	.word	0x20000697
 8004578:	200006a1 	.word	0x200006a1
 800457c:	200006a2 	.word	0x200006a2

08004580 <Slave_Complete_Callback>:

void Slave_Complete_Callback(uint8_t *rx_data, uint16_t len) {
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	b095      	sub	sp, #84	@ 0x54
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	000a      	movs	r2, r1
 800458a:	1cbb      	adds	r3, r7, #2
 800458c:	801a      	strh	r2, [r3, #0]
	uint8_t rx_buf[16];
	uint8_t tx_buf[32];
	uint8_t rx_mark[16] = { 0 };
 800458e:	2308      	movs	r3, #8
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	220c      	movs	r2, #12
 800459a:	2100      	movs	r1, #0
 800459c:	0018      	movs	r0, r3
 800459e:	f003 f949 	bl	8007834 <memset>
	if (len > 1) {
 80045a2:	1cbb      	adds	r3, r7, #2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d800      	bhi.n	80045ac <Slave_Complete_Callback+0x2c>
 80045aa:	e18c      	b.n	80048c6 <Slave_Complete_Callback+0x346>
		if (rx_data[0] == 0x00 && len == 2) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d126      	bne.n	8004602 <Slave_Complete_Callback+0x82>
 80045b4:	1cbb      	adds	r3, r7, #2
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d122      	bne.n	8004602 <Slave_Complete_Callback+0x82>
			if (rx_data[1] == MICROPHONE_OFF || rx_data[1] == MICROPHONE_ON) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3301      	adds	r3, #1
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <Slave_Complete_Callback+0x52>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3301      	adds	r3, #1
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d000      	beq.n	80045d2 <Slave_Complete_Callback+0x52>
 80045d0:	e172      	b.n	80048b8 <Slave_Complete_Callback+0x338>
				if(lin_mic_pc_en_reg != rx_data[1]){
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3301      	adds	r3, #1
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	4bc9      	ldr	r3, [pc, #804]	@ (8004900 <Slave_Complete_Callback+0x380>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	429a      	cmp	r2, r3
 80045e0:	d100      	bne.n	80045e4 <Slave_Complete_Callback+0x64>
 80045e2:	e169      	b.n	80048b8 <Slave_Complete_Callback+0x338>
					lin_mic_pc_en_reg = rx_data[1];
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	785a      	ldrb	r2, [r3, #1]
 80045e8:	4bc5      	ldr	r3, [pc, #788]	@ (8004900 <Slave_Complete_Callback+0x380>)
 80045ea:	701a      	strb	r2, [r3, #0]
//					set_lin_mic_pc_en_status(rx_data[1]);
					if (lin_mic_pc_en_reg == MICROPHONE_ON) {
 80045ec:	4bc4      	ldr	r3, [pc, #784]	@ (8004900 <Slave_Complete_Callback+0x380>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d102      	bne.n	80045fc <Slave_Complete_Callback+0x7c>
						lin_mic_pc_enable();
 80045f6:	f7ff fecd 	bl	8004394 <lin_mic_pc_enable>
			if (rx_data[1] == MICROPHONE_OFF || rx_data[1] == MICROPHONE_ON) {
 80045fa:	e15d      	b.n	80048b8 <Slave_Complete_Callback+0x338>
					} else {
						lin_mic_pc_disable();
 80045fc:	f7ff fedc 	bl	80043b8 <lin_mic_pc_disable>
			if (rx_data[1] == MICROPHONE_OFF || rx_data[1] == MICROPHONE_ON) {
 8004600:	e15a      	b.n	80048b8 <Slave_Complete_Callback+0x338>
					}
				}
			}
		} else if (rx_data[0] == 0x10 && len == 2) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b10      	cmp	r3, #16
 8004608:	d126      	bne.n	8004658 <Slave_Complete_Callback+0xd8>
 800460a:	1cbb      	adds	r3, r7, #2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d122      	bne.n	8004658 <Slave_Complete_Callback+0xd8>
			if (rx_data[1] == NATIONAL_STANDARD
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3301      	adds	r3, #1
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <Slave_Complete_Callback+0xa8>
					|| rx_data[1] == AMERICA_STANDARD) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3301      	adds	r3, #1
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d000      	beq.n	8004628 <Slave_Complete_Callback+0xa8>
 8004626:	e149      	b.n	80048bc <Slave_Complete_Callback+0x33c>
				if(hp_mode_reg != rx_data[1]){
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3301      	adds	r3, #1
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	4bb5      	ldr	r3, [pc, #724]	@ (8004904 <Slave_Complete_Callback+0x384>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	429a      	cmp	r2, r3
 8004636:	d100      	bne.n	800463a <Slave_Complete_Callback+0xba>
 8004638:	e140      	b.n	80048bc <Slave_Complete_Callback+0x33c>
					hp_mode_reg = rx_data[1];
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	785a      	ldrb	r2, [r3, #1]
 800463e:	4bb1      	ldr	r3, [pc, #708]	@ (8004904 <Slave_Complete_Callback+0x384>)
 8004640:	701a      	strb	r2, [r3, #0]
//					set_hp_mode_status(rx_data[1]);
					if (hp_mode_reg == NATIONAL_STANDARD) {
 8004642:	4bb0      	ldr	r3, [pc, #704]	@ (8004904 <Slave_Complete_Callback+0x384>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <Slave_Complete_Callback+0xd2>
						set_national_hp_mode();
 800464c:	f7ff fec6 	bl	80043dc <set_national_hp_mode>
			if (rx_data[1] == NATIONAL_STANDARD
 8004650:	e134      	b.n	80048bc <Slave_Complete_Callback+0x33c>
					} else {
						set_americal_hp_mode();
 8004652:	f7ff fed5 	bl	8004400 <set_americal_hp_mode>
			if (rx_data[1] == NATIONAL_STANDARD
 8004656:	e131      	b.n	80048bc <Slave_Complete_Callback+0x33c>
					}
				}

			}
		} else if (rx_data[0] == 0x30 && len == 2) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b30      	cmp	r3, #48	@ 0x30
 800465e:	d119      	bne.n	8004694 <Slave_Complete_Callback+0x114>
 8004660:	1cbb      	adds	r3, r7, #2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d115      	bne.n	8004694 <Slave_Complete_Callback+0x114>
			if (rx_data[1] >= 0 && rx_data[1] <= 100) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3301      	adds	r3, #1
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b64      	cmp	r3, #100	@ 0x64
 8004670:	d900      	bls.n	8004674 <Slave_Complete_Callback+0xf4>
 8004672:	e125      	b.n	80048c0 <Slave_Complete_Callback+0x340>
				if(rgb_light_reg != rx_data[1]){
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3301      	adds	r3, #1
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	4ba3      	ldr	r3, [pc, #652]	@ (8004908 <Slave_Complete_Callback+0x388>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	429a      	cmp	r2, r3
 8004682:	d100      	bne.n	8004686 <Slave_Complete_Callback+0x106>
 8004684:	e11c      	b.n	80048c0 <Slave_Complete_Callback+0x340>
					rgb_light_reg = rx_data[1];
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	785a      	ldrb	r2, [r3, #1]
 800468a:	4b9f      	ldr	r3, [pc, #636]	@ (8004908 <Slave_Complete_Callback+0x388>)
 800468c:	701a      	strb	r2, [r3, #0]
//					set_rgb_light_status(rx_data[1]);
					rgb_update();
 800468e:	f7fe ff87 	bl	80035a0 <rgb_update>
			if (rx_data[1] >= 0 && rx_data[1] <= 100) {
 8004692:	e115      	b.n	80048c0 <Slave_Complete_Callback+0x340>
				}
			}
		} else if (rx_data[0] >= 0x40 && rx_data[0] <= 0x48 && len <= 10) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b3f      	cmp	r3, #63	@ 0x3f
 800469a:	d800      	bhi.n	800469e <Slave_Complete_Callback+0x11e>
 800469c:	e0a5      	b.n	80047ea <Slave_Complete_Callback+0x26a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b48      	cmp	r3, #72	@ 0x48
 80046a4:	d900      	bls.n	80046a8 <Slave_Complete_Callback+0x128>
 80046a6:	e0a0      	b.n	80047ea <Slave_Complete_Callback+0x26a>
 80046a8:	1cbb      	adds	r3, r7, #2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	2b0a      	cmp	r3, #10
 80046ae:	d900      	bls.n	80046b2 <Slave_Complete_Callback+0x132>
 80046b0:	e09b      	b.n	80047ea <Slave_Complete_Callback+0x26a>
			uint8_t led_index = 0;
 80046b2:	234a      	movs	r3, #74	@ 0x4a
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
			uint8_t led_rgb = 0;
 80046ba:	2349      	movs	r3, #73	@ 0x49
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < len - 1; i++) {
 80046c2:	2300      	movs	r3, #0
 80046c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c6:	e01b      	b.n	8004700 <Slave_Complete_Callback+0x180>
				rx_buf[rx_data[0] + i - 0x40] = rx_data[1 + i];
 80046c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ca:	3301      	adds	r3, #1
 80046cc:	001a      	movs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	189a      	adds	r2, r3, r2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	0019      	movs	r1, r3
 80046d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046da:	18cb      	adds	r3, r1, r3
 80046dc:	3b40      	subs	r3, #64	@ 0x40
 80046de:	7811      	ldrb	r1, [r2, #0]
 80046e0:	2238      	movs	r2, #56	@ 0x38
 80046e2:	18ba      	adds	r2, r7, r2
 80046e4:	54d1      	strb	r1, [r2, r3]
				rx_mark[rx_data[0] + i - 0x40] = 1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	001a      	movs	r2, r3
 80046ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ee:	18d3      	adds	r3, r2, r3
 80046f0:	3b40      	subs	r3, #64	@ 0x40
 80046f2:	2208      	movs	r2, #8
 80046f4:	18ba      	adds	r2, r7, r2
 80046f6:	2101      	movs	r1, #1
 80046f8:	54d1      	strb	r1, [r2, r3]
			for (int i = 0; i < len - 1; i++) {
 80046fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046fc:	3301      	adds	r3, #1
 80046fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004700:	1cbb      	adds	r3, r7, #2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004708:	429a      	cmp	r2, r3
 800470a:	dbdd      	blt.n	80046c8 <Slave_Complete_Callback+0x148>
			}
			for (uint8_t i = 0; i < 9; i++) {
 800470c:	234b      	movs	r3, #75	@ 0x4b
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e061      	b.n	80047da <Slave_Complete_Callback+0x25a>
				if (rx_mark[i]) {
 8004716:	254b      	movs	r5, #75	@ 0x4b
 8004718:	197b      	adds	r3, r7, r5
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	18ba      	adds	r2, r7, r2
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d053      	beq.n	80047ce <Slave_Complete_Callback+0x24e>
					led_index = i / 3;
 8004726:	264a      	movs	r6, #74	@ 0x4a
 8004728:	19bc      	adds	r4, r7, r6
 800472a:	197b      	adds	r3, r7, r5
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2103      	movs	r1, #3
 8004730:	0018      	movs	r0, r3
 8004732:	f7fd f8e5 	bl	8001900 <__udivsi3>
 8004736:	0003      	movs	r3, r0
 8004738:	7023      	strb	r3, [r4, #0]
					led_rgb = i % 3;
 800473a:	2349      	movs	r3, #73	@ 0x49
 800473c:	18fc      	adds	r4, r7, r3
 800473e:	197b      	adds	r3, r7, r5
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2103      	movs	r1, #3
 8004744:	0018      	movs	r0, r3
 8004746:	f7fd f961 	bl	8001a0c <__aeabi_uidivmod>
 800474a:	000b      	movs	r3, r1
 800474c:	7023      	strb	r3, [r4, #0]
					if (led_rgb == 0) {
 800474e:	2349      	movs	r3, #73	@ 0x49
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <Slave_Complete_Callback+0x1f4>
						rgb_reg[led_index].R = rx_buf[i];
 8004758:	197b      	adds	r3, r7, r5
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	19ba      	adds	r2, r7, r6
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	2138      	movs	r1, #56	@ 0x38
 8004762:	1879      	adds	r1, r7, r1
 8004764:	5cc8      	ldrb	r0, [r1, r3]
 8004766:	4969      	ldr	r1, [pc, #420]	@ (800490c <Slave_Complete_Callback+0x38c>)
 8004768:	0013      	movs	r3, r2
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	189b      	adds	r3, r3, r2
 800476e:	1c02      	adds	r2, r0, #0
 8004770:	545a      	strb	r2, [r3, r1]
 8004772:	e02c      	b.n	80047ce <Slave_Complete_Callback+0x24e>
					} else if (led_rgb == 1) {
 8004774:	2349      	movs	r3, #73	@ 0x49
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d111      	bne.n	80047a2 <Slave_Complete_Callback+0x222>
						rgb_reg[led_index].G = rx_buf[i];
 800477e:	234b      	movs	r3, #75	@ 0x4b
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	224a      	movs	r2, #74	@ 0x4a
 8004786:	18ba      	adds	r2, r7, r2
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	2138      	movs	r1, #56	@ 0x38
 800478c:	1879      	adds	r1, r7, r1
 800478e:	5cc8      	ldrb	r0, [r1, r3]
 8004790:	495e      	ldr	r1, [pc, #376]	@ (800490c <Slave_Complete_Callback+0x38c>)
 8004792:	0013      	movs	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	189b      	adds	r3, r3, r2
 8004798:	18cb      	adds	r3, r1, r3
 800479a:	3301      	adds	r3, #1
 800479c:	1c02      	adds	r2, r0, #0
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e015      	b.n	80047ce <Slave_Complete_Callback+0x24e>
					} else if (led_rgb == 2) {
 80047a2:	2349      	movs	r3, #73	@ 0x49
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d110      	bne.n	80047ce <Slave_Complete_Callback+0x24e>
						rgb_reg[led_index].B = rx_buf[i];
 80047ac:	234b      	movs	r3, #75	@ 0x4b
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	224a      	movs	r2, #74	@ 0x4a
 80047b4:	18ba      	adds	r2, r7, r2
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	2138      	movs	r1, #56	@ 0x38
 80047ba:	1879      	adds	r1, r7, r1
 80047bc:	5cc8      	ldrb	r0, [r1, r3]
 80047be:	4953      	ldr	r1, [pc, #332]	@ (800490c <Slave_Complete_Callback+0x38c>)
 80047c0:	0013      	movs	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	189b      	adds	r3, r3, r2
 80047c6:	18cb      	adds	r3, r1, r3
 80047c8:	3302      	adds	r3, #2
 80047ca:	1c02      	adds	r2, r0, #0
 80047cc:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 9; i++) {
 80047ce:	214b      	movs	r1, #75	@ 0x4b
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	3201      	adds	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	234b      	movs	r3, #75	@ 0x4b
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d998      	bls.n	8004716 <Slave_Complete_Callback+0x196>
					}
				}
			}
			rgb_update();
 80047e4:	f7fe fedc 	bl	80035a0 <rgb_update>
		} else if (rx_data[0] >= 0x40 && rx_data[0] <= 0x48 && len <= 10) {
 80047e8:	e06d      	b.n	80048c6 <Slave_Complete_Callback+0x346>
		} else if (rx_data[0] == I2C_ADDR_REG_ADDR && len == 2) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2bff      	cmp	r3, #255	@ 0xff
 80047f0:	d11e      	bne.n	8004830 <Slave_Complete_Callback+0x2b0>
 80047f2:	1cbb      	adds	r3, r7, #2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d11a      	bne.n	8004830 <Slave_Complete_Callback+0x2b0>
			if (rx_data[1] <= 127) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3301      	adds	r3, #1
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b25b      	sxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	db5e      	blt.n	80048c4 <Slave_Complete_Callback+0x344>
				if (i2c_addr_reg != rx_data[1]) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3301      	adds	r3, #1
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	4b40      	ldr	r3, [pc, #256]	@ (8004910 <Slave_Complete_Callback+0x390>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	429a      	cmp	r2, r3
 8004814:	d056      	beq.n	80048c4 <Slave_Complete_Callback+0x344>
					i2c_addr_reg = rx_data[1];
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	785a      	ldrb	r2, [r3, #1]
 800481a:	4b3d      	ldr	r3, [pc, #244]	@ (8004910 <Slave_Complete_Callback+0x390>)
 800481c:	701a      	strb	r2, [r3, #0]
					set_i2c_addr(rx_data[1]);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3301      	adds	r3, #1
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	0018      	movs	r0, r3
 8004826:	f000 fa87 	bl	8004d38 <set_i2c_addr>
					user_i2c_init();
 800482a:	f7ff f90f 	bl	8003a4c <user_i2c_init>
			if (rx_data[1] <= 127) {
 800482e:	e049      	b.n	80048c4 <Slave_Complete_Callback+0x344>
				}
			}
		} else if (rx_data[0] == IAP_UPDATE_ADDR && len == 2) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2bfd      	cmp	r3, #253	@ 0xfd
 8004836:	d10a      	bne.n	800484e <Slave_Complete_Callback+0x2ce>
 8004838:	1cbb      	adds	r3, r7, #2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d106      	bne.n	800484e <Slave_Complete_Callback+0x2ce>
			if (rx_data[1] > 0) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03d      	beq.n	80048c6 <Slave_Complete_Callback+0x346>
				NVIC_SystemReset(); // 复位单片机触发升级
 800484a:	f7ff fd45 	bl	80042d8 <__NVIC_SystemReset>
			}
		} else if (rx_data[0] == FLASH_WRITE_BACK && len == 2) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2bf0      	cmp	r3, #240	@ 0xf0
 8004854:	d137      	bne.n	80048c6 <Slave_Complete_Callback+0x346>
 8004856:	1cbb      	adds	r3, r7, #2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d133      	bne.n	80048c6 <Slave_Complete_Callback+0x346>
			if (rx_data[1] == 1) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3301      	adds	r3, #1
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d12e      	bne.n	80048c6 <Slave_Complete_Callback+0x346>
				if (lin_mic_pc_en_reg != get_lin_mic_pc_en_status() || hp_mode_reg != get_hp_mode_status() || rgb_light_reg != get_rgb_light_status()) {
 8004868:	f000 faa4 	bl	8004db4 <get_lin_mic_pc_en_status>
 800486c:	0003      	movs	r3, r0
 800486e:	001a      	movs	r2, r3
 8004870:	4b23      	ldr	r3, [pc, #140]	@ (8004900 <Slave_Complete_Callback+0x380>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	429a      	cmp	r2, r3
 8004878:	d111      	bne.n	800489e <Slave_Complete_Callback+0x31e>
 800487a:	f000 faa5 	bl	8004dc8 <get_hp_mode_status>
 800487e:	0003      	movs	r3, r0
 8004880:	001a      	movs	r2, r3
 8004882:	4b20      	ldr	r3, [pc, #128]	@ (8004904 <Slave_Complete_Callback+0x384>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	429a      	cmp	r2, r3
 800488a:	d108      	bne.n	800489e <Slave_Complete_Callback+0x31e>
 800488c:	f000 faa6 	bl	8004ddc <get_rgb_light_status>
 8004890:	0003      	movs	r3, r0
 8004892:	001a      	movs	r2, r3
 8004894:	4b1c      	ldr	r3, [pc, #112]	@ (8004908 <Slave_Complete_Callback+0x388>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	429a      	cmp	r2, r3
 800489c:	d013      	beq.n	80048c6 <Slave_Complete_Callback+0x346>
					write_flash(lin_mic_pc_en_reg, hp_mode_reg, rgb_light_reg);
 800489e:	4b18      	ldr	r3, [pc, #96]	@ (8004900 <Slave_Complete_Callback+0x380>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b2d8      	uxtb	r0, r3
 80048a4:	4b17      	ldr	r3, [pc, #92]	@ (8004904 <Slave_Complete_Callback+0x384>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b2d9      	uxtb	r1, r3
 80048aa:	4b17      	ldr	r3, [pc, #92]	@ (8004908 <Slave_Complete_Callback+0x388>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	001a      	movs	r2, r3
 80048b2:	f000 faa7 	bl	8004e04 <write_flash>
 80048b6:	e006      	b.n	80048c6 <Slave_Complete_Callback+0x346>
			if (rx_data[1] == MICROPHONE_OFF || rx_data[1] == MICROPHONE_ON) {
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	e004      	b.n	80048c6 <Slave_Complete_Callback+0x346>
			if (rx_data[1] == NATIONAL_STANDARD
 80048bc:	46c0      	nop			@ (mov r8, r8)
 80048be:	e002      	b.n	80048c6 <Slave_Complete_Callback+0x346>
			if (rx_data[1] >= 0 && rx_data[1] <= 100) {
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	e000      	b.n	80048c6 <Slave_Complete_Callback+0x346>
			if (rx_data[1] <= 127) {
 80048c4:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
	if (len == 1) {
 80048c6:	1cbb      	adds	r3, r7, #2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d000      	beq.n	80048d0 <Slave_Complete_Callback+0x350>
 80048ce:	e0a2      	b.n	8004a16 <Slave_Complete_Callback+0x496>
		switch (rx_data[0]) {
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2bff      	cmp	r3, #255	@ 0xff
 80048d6:	d100      	bne.n	80048da <Slave_Complete_Callback+0x35a>
 80048d8:	e090      	b.n	80049fc <Slave_Complete_Callback+0x47c>
 80048da:	dd00      	ble.n	80048de <Slave_Complete_Callback+0x35e>
 80048dc:	e09a      	b.n	8004a14 <Slave_Complete_Callback+0x494>
 80048de:	2b48      	cmp	r3, #72	@ 0x48
 80048e0:	dc0a      	bgt.n	80048f8 <Slave_Complete_Callback+0x378>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da00      	bge.n	80048e8 <Slave_Complete_Callback+0x368>
 80048e6:	e095      	b.n	8004a14 <Slave_Complete_Callback+0x494>
 80048e8:	2b48      	cmp	r3, #72	@ 0x48
 80048ea:	d900      	bls.n	80048ee <Slave_Complete_Callback+0x36e>
 80048ec:	e092      	b.n	8004a14 <Slave_Complete_Callback+0x494>
 80048ee:	009a      	lsls	r2, r3, #2
 80048f0:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <Slave_Complete_Callback+0x394>)
 80048f2:	18d3      	adds	r3, r2, r3
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	469f      	mov	pc, r3
 80048f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80048fa:	d100      	bne.n	80048fe <Slave_Complete_Callback+0x37e>
 80048fc:	e072      	b.n	80049e4 <Slave_Complete_Callback+0x464>
		case I2C_ADDR_REG_ADDR:
			tx_buf[0] = i2c_addr_reg;
			i2c2_set_send_data(tx_buf, 1);
			break;
		default:
			break;
 80048fe:	e089      	b.n	8004a14 <Slave_Complete_Callback+0x494>
 8004900:	20000694 	.word	0x20000694
 8004904:	20000695 	.word	0x20000695
 8004908:	20000697 	.word	0x20000697
 800490c:	20000698 	.word	0x20000698
 8004910:	200006a2 	.word	0x200006a2
 8004914:	08007914 	.word	0x08007914
			tx_buf[0] = lin_mic_pc_en_reg;
 8004918:	4b41      	ldr	r3, [pc, #260]	@ (8004a20 <Slave_Complete_Callback+0x4a0>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	2118      	movs	r1, #24
 8004920:	187b      	adds	r3, r7, r1
 8004922:	701a      	strb	r2, [r3, #0]
			i2c2_set_send_data(tx_buf, 1);
 8004924:	187b      	adds	r3, r7, r1
 8004926:	2101      	movs	r1, #1
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff fb03 	bl	8003f34 <i2c2_set_send_data>
			break;
 800492e:	e072      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			tx_buf[0] = hp_mode_reg;
 8004930:	4b3c      	ldr	r3, [pc, #240]	@ (8004a24 <Slave_Complete_Callback+0x4a4>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	2118      	movs	r1, #24
 8004938:	187b      	adds	r3, r7, r1
 800493a:	701a      	strb	r2, [r3, #0]
			i2c2_set_send_data(tx_buf, 1);
 800493c:	187b      	adds	r3, r7, r1
 800493e:	2101      	movs	r1, #1
 8004940:	0018      	movs	r0, r3
 8004942:	f7ff faf7 	bl	8003f34 <i2c2_set_send_data>
			break;
 8004946:	e066      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			tx_buf[0] = hp_det_reg;
 8004948:	4b37      	ldr	r3, [pc, #220]	@ (8004a28 <Slave_Complete_Callback+0x4a8>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	2118      	movs	r1, #24
 8004950:	187b      	adds	r3, r7, r1
 8004952:	701a      	strb	r2, [r3, #0]
			i2c2_set_send_data(tx_buf, 1);
 8004954:	187b      	adds	r3, r7, r1
 8004956:	2101      	movs	r1, #1
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff faeb 	bl	8003f34 <i2c2_set_send_data>
			break;
 800495e:	e05a      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			tx_buf[0] = rgb_light_reg;
 8004960:	4b32      	ldr	r3, [pc, #200]	@ (8004a2c <Slave_Complete_Callback+0x4ac>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	2118      	movs	r1, #24
 8004968:	187b      	adds	r3, r7, r1
 800496a:	701a      	strb	r2, [r3, #0]
			i2c2_set_send_data(tx_buf, 1);
 800496c:	187b      	adds	r3, r7, r1
 800496e:	2101      	movs	r1, #1
 8004970:	0018      	movs	r0, r3
 8004972:	f7ff fadf 	bl	8003f34 <i2c2_set_send_data>
			break;
 8004976:	e04e      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data((uint8_t*) rgb_reg, 9);
 8004978:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <Slave_Complete_Callback+0x4b0>)
 800497a:	2109      	movs	r1, #9
 800497c:	0018      	movs	r0, r3
 800497e:	f7ff fad9 	bl	8003f34 <i2c2_set_send_data>
			break;
 8004982:	e048      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 1, 8);
 8004984:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <Slave_Complete_Callback+0x4b4>)
 8004986:	2108      	movs	r1, #8
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff fad3 	bl	8003f34 <i2c2_set_send_data>
			break;
 800498e:	e042      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 2, 7);
 8004990:	4b29      	ldr	r3, [pc, #164]	@ (8004a38 <Slave_Complete_Callback+0x4b8>)
 8004992:	2107      	movs	r1, #7
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff facd 	bl	8003f34 <i2c2_set_send_data>
			break;
 800499a:	e03c      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 3, 6);
 800499c:	4b27      	ldr	r3, [pc, #156]	@ (8004a3c <Slave_Complete_Callback+0x4bc>)
 800499e:	2106      	movs	r1, #6
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fac7 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049a6:	e036      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 4, 5);
 80049a8:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <Slave_Complete_Callback+0x4c0>)
 80049aa:	2105      	movs	r1, #5
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7ff fac1 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049b2:	e030      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 5, 4);
 80049b4:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <Slave_Complete_Callback+0x4c4>)
 80049b6:	2104      	movs	r1, #4
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff fabb 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049be:	e02a      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 6, 3);
 80049c0:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <Slave_Complete_Callback+0x4c8>)
 80049c2:	2103      	movs	r1, #3
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff fab5 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049ca:	e024      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 7, 2);
 80049cc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <Slave_Complete_Callback+0x4cc>)
 80049ce:	2102      	movs	r1, #2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff faaf 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049d6:	e01e      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			i2c2_set_send_data(((uint8_t*) rgb_reg) + 8, 1);
 80049d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <Slave_Complete_Callback+0x4d0>)
 80049da:	2101      	movs	r1, #1
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff faa9 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049e2:	e018      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			tx_buf[0] = sw_ver_reg;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <Slave_Complete_Callback+0x4d4>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	2118      	movs	r1, #24
 80049ec:	187b      	adds	r3, r7, r1
 80049ee:	701a      	strb	r2, [r3, #0]
			i2c2_set_send_data(tx_buf, 1);
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	2101      	movs	r1, #1
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff fa9d 	bl	8003f34 <i2c2_set_send_data>
			break;
 80049fa:	e00c      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			tx_buf[0] = i2c_addr_reg;
 80049fc:	4b16      	ldr	r3, [pc, #88]	@ (8004a58 <Slave_Complete_Callback+0x4d8>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	2118      	movs	r1, #24
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	701a      	strb	r2, [r3, #0]
			i2c2_set_send_data(tx_buf, 1);
 8004a08:	187b      	adds	r3, r7, r1
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7ff fa91 	bl	8003f34 <i2c2_set_send_data>
			break;
 8004a12:	e000      	b.n	8004a16 <Slave_Complete_Callback+0x496>
			break;
 8004a14:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b015      	add	sp, #84	@ 0x54
 8004a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	20000694 	.word	0x20000694
 8004a24:	20000695 	.word	0x20000695
 8004a28:	20000696 	.word	0x20000696
 8004a2c:	20000697 	.word	0x20000697
 8004a30:	20000698 	.word	0x20000698
 8004a34:	20000699 	.word	0x20000699
 8004a38:	2000069a 	.word	0x2000069a
 8004a3c:	2000069b 	.word	0x2000069b
 8004a40:	2000069c 	.word	0x2000069c
 8004a44:	2000069d 	.word	0x2000069d
 8004a48:	2000069e 	.word	0x2000069e
 8004a4c:	2000069f 	.word	0x2000069f
 8004a50:	200006a0 	.word	0x200006a0
 8004a54:	200006a1 	.word	0x200006a1
 8004a58:	200006a2 	.word	0x200006a2

08004a5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	iap_set();
 8004a60:	f7ff fc5a 	bl	8004318 <iap_set>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004a64:	f000 fe1c 	bl	80056a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004a68:	f000 f82c 	bl	8004ac4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004a6c:	f7fe fe64 	bl	8003738 <MX_GPIO_Init>
	MX_DMA_Init();
 8004a70:	f7fe fe44 	bl	80036fc <MX_DMA_Init>
//	MX_I2C2_Init();
	MX_IWDG_Init();
 8004a74:	f7ff fc08 	bl	8004288 <MX_IWDG_Init>
	MX_TIM17_Init();
 8004a78:	f000 fd08 	bl	800548c <MX_TIM17_Init>
	/* USER CODE BEGIN 2 */
	reg_init();
 8004a7c:	f7ff fce6 	bl	800444c <reg_init>
	user_i2c_init();
 8004a80:	f7fe ffe4 	bl	8003a4c <user_i2c_init>
	i2c2_it_enable();
 8004a84:	f7ff fa1c 	bl	8003ec0 <i2c2_it_enable>
	lin_mic_pc_enable();
 8004a88:	f7ff fc84 	bl	8004394 <lin_mic_pc_enable>
	rgb_init();
 8004a8c:	f7fe fc47 	bl	800331e <rgb_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (hp_det_reg == HEADPHONE_INSERTION) {
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <main+0x60>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10a      	bne.n	8004ab0 <main+0x54>
			if (HAL_GPIO_ReadPin(HP_DET_GPIO_Port, HP_DET_Pin)
 8004a9a:	23a0      	movs	r3, #160	@ 0xa0
 8004a9c:	05db      	lsls	r3, r3, #23
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f001 fa8f 	bl	8005fc4 <HAL_GPIO_ReadPin>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d102      	bne.n	8004ab0 <main+0x54>
					== GPIO_PIN_RESET) {
				hp_det_reg = HEADPHONE_UNPLUG;
 8004aaa:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <main+0x60>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
			}
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LL_IWDG_ReloadCounter(IWDG);						   // 复位看门狗
 8004ab0:	4b03      	ldr	r3, [pc, #12]	@ (8004ac0 <main+0x64>)
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f7ff fc22 	bl	80042fc <LL_IWDG_ReloadCounter>
		if (hp_det_reg == HEADPHONE_INSERTION) {
 8004ab8:	e7ea      	b.n	8004a90 <main+0x34>
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	20000696 	.word	0x20000696
 8004ac0:	40003000 	.word	0x40003000

08004ac4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b093      	sub	sp, #76	@ 0x4c
 8004ac8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004aca:	2414      	movs	r4, #20
 8004acc:	193b      	adds	r3, r7, r4
 8004ace:	0018      	movs	r0, r3
 8004ad0:	2334      	movs	r3, #52	@ 0x34
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f002 fead 	bl	8007834 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	0018      	movs	r0, r3
 8004ade:	2310      	movs	r3, #16
 8004ae0:	001a      	movs	r2, r3
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	f002 fea6 	bl	8007834 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae8:	2380      	movs	r3, #128	@ 0x80
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	0018      	movs	r0, r3
 8004aee:	f001 fad7 	bl	80060a0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8004af2:	193b      	adds	r3, r7, r4
 8004af4:	220a      	movs	r2, #10
 8004af6:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004af8:	193b      	adds	r3, r7, r4
 8004afa:	2280      	movs	r2, #128	@ 0x80
 8004afc:	0052      	lsls	r2, r2, #1
 8004afe:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004b00:	0021      	movs	r1, r4
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	2201      	movs	r2, #1
 8004b12:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b14:	187b      	adds	r3, r7, r1
 8004b16:	2202      	movs	r2, #2
 8004b18:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b1a:	187b      	adds	r3, r7, r1
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	2200      	movs	r2, #0
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	2208      	movs	r2, #8
 8004b2a:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	22c0      	movs	r2, #192	@ 0xc0
 8004b30:	02d2      	lsls	r2, r2, #11
 8004b32:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	2280      	movs	r2, #128	@ 0x80
 8004b38:	0592      	lsls	r2, r2, #22
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f001 faee 	bl	8006120 <HAL_RCC_OscConfig>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	d001      	beq.n	8004b4c <SystemClock_Config+0x88>
		Error_Handler();
 8004b48:	f000 f819 	bl	8004b7e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004b4c:	1d3b      	adds	r3, r7, #4
 8004b4e:	2207      	movs	r2, #7
 8004b50:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	2202      	movs	r2, #2
 8004b56:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	2200      	movs	r2, #0
 8004b62:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	2102      	movs	r1, #2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f001 fde9 	bl	8006740 <HAL_RCC_ClockConfig>
 8004b6e:	1e03      	subs	r3, r0, #0
 8004b70:	d001      	beq.n	8004b76 <SystemClock_Config+0xb2>
		Error_Handler();
 8004b72:	f000 f804 	bl	8004b7e <Error_Handler>
	}
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b013      	add	sp, #76	@ 0x4c
 8004b7c:	bd90      	pop	{r4, r7, pc}

08004b7e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004b82:	b672      	cpsid	i
}
 8004b84:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	e7fd      	b.n	8004b86 <Error_Handler+0x8>

08004b8a <GetPage>:
/**
 * @brief  根据地址获得内存的页
 * @param  addr 内存地址
 * @retval 返回页数
 */
static uint32_t GetPage(uint32_t addr) {
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
	return (addr - STM32G0xx_FLASH_PAGE0_STARTADDR) / FLASH_PAGE_SIZE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	22f8      	movs	r2, #248	@ 0xf8
 8004b96:	0612      	lsls	r2, r2, #24
 8004b98:	4694      	mov	ip, r2
 8004b9a:	4463      	add	r3, ip
 8004b9c:	0adb      	lsrs	r3, r3, #11
}
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b002      	add	sp, #8
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <set_byte_in_uint64>:
 * @param  data 要修改的数据
 * @param  byte_index 数据下标
 * @param  new_value 修改值
 * @retval 修改之后的数
 */
static void set_byte_in_uint64(uint64_t *data, uint8_t byte_index, uint8_t new_value) {
 8004ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba8:	b08f      	sub	sp, #60	@ 0x3c
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6378      	str	r0, [r7, #52]	@ 0x34
 8004bae:	000b      	movs	r3, r1
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	2033      	movs	r0, #51	@ 0x33
 8004bb4:	183a      	adds	r2, r7, r0
 8004bb6:	7013      	strb	r3, [r2, #0]
 8004bb8:	2332      	movs	r3, #50	@ 0x32
 8004bba:	18fa      	adds	r2, r7, r3
 8004bbc:	1c0b      	adds	r3, r1, #0
 8004bbe:	7013      	strb	r3, [r2, #0]
	*data &= ~((uint64_t) (0xFF) << (byte_index * 8));
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	603a      	str	r2, [r7, #0]
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	183b      	adds	r3, r7, r0
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	00d9      	lsls	r1, r3, #3
 8004bd0:	000a      	movs	r2, r1
 8004bd2:	3a20      	subs	r2, #32
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	db03      	blt.n	8004be0 <set_byte_in_uint64+0x3a>
 8004bd8:	23ff      	movs	r3, #255	@ 0xff
 8004bda:	4093      	lsls	r3, r2
 8004bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bde:	e00a      	b.n	8004bf6 <set_byte_in_uint64+0x50>
 8004be0:	2320      	movs	r3, #32
 8004be2:	1a5a      	subs	r2, r3, r1
 8004be4:	23ff      	movs	r3, #255	@ 0xff
 8004be6:	40d3      	lsrs	r3, r2
 8004be8:	001a      	movs	r2, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	408b      	lsls	r3, r1
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf6:	23ff      	movs	r3, #255	@ 0xff
 8004bf8:	408b      	lsls	r3, r1
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	0011      	movs	r1, r2
 8004c02:	43c9      	mvns	r1, r1
 8004c04:	61b9      	str	r1, [r7, #24]
 8004c06:	43db      	mvns	r3, r3
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	0008      	movs	r0, r1
 8004c12:	4018      	ands	r0, r3
 8004c14:	6138      	str	r0, [r7, #16]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	401a      	ands	r2, r3
 8004c1a:	617a      	str	r2, [r7, #20]
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	6939      	ldr	r1, [r7, #16]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	6019      	str	r1, [r3, #0]
 8004c24:	605a      	str	r2, [r3, #4]
	// 然后设置新的字节值
	*data |= (uint64_t) new_value << (byte_index * 8);
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2132      	movs	r1, #50	@ 0x32
 8004c2e:	1879      	adds	r1, r7, r1
 8004c30:	7809      	ldrb	r1, [r1, #0]
 8004c32:	b2c9      	uxtb	r1, r1
 8004c34:	6239      	str	r1, [r7, #32]
 8004c36:	2100      	movs	r1, #0
 8004c38:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c3a:	2133      	movs	r1, #51	@ 0x33
 8004c3c:	1879      	adds	r1, r7, r1
 8004c3e:	7809      	ldrb	r1, [r1, #0]
 8004c40:	00c9      	lsls	r1, r1, #3
 8004c42:	0008      	movs	r0, r1
 8004c44:	3820      	subs	r0, #32
 8004c46:	2800      	cmp	r0, #0
 8004c48:	db03      	blt.n	8004c52 <set_byte_in_uint64+0xac>
 8004c4a:	6a3e      	ldr	r6, [r7, #32]
 8004c4c:	4086      	lsls	r6, r0
 8004c4e:	0035      	movs	r5, r6
 8004c50:	e008      	b.n	8004c64 <set_byte_in_uint64+0xbe>
 8004c52:	2020      	movs	r0, #32
 8004c54:	1a40      	subs	r0, r0, r1
 8004c56:	6a3e      	ldr	r6, [r7, #32]
 8004c58:	40c6      	lsrs	r6, r0
 8004c5a:	0030      	movs	r0, r6
 8004c5c:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8004c5e:	408e      	lsls	r6, r1
 8004c60:	0035      	movs	r5, r6
 8004c62:	4305      	orrs	r5, r0
 8004c64:	6a38      	ldr	r0, [r7, #32]
 8004c66:	4088      	lsls	r0, r1
 8004c68:	0004      	movs	r4, r0
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	4321      	orrs	r1, r4
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	432b      	orrs	r3, r5
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	6019      	str	r1, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b00f      	add	sp, #60	@ 0x3c
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c86 <my_flash_read_double_word>:
/**
 * @brief  读取双字
 * @param  address 内存地址
 * @retval 返回值
 */
uint64_t my_flash_read_double_word(uint32_t address) {
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
	return *((__IO uint64_t*) (address));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
}
 8004c94:	0010      	movs	r0, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <my_flash_earse_pages>:
/**
 * @brief  页擦除
 * @param  address 内存地址
 * @retval 是否成功
 */
bool my_flash_earse_pages(uint32_t page_address) {
 8004c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca0:	b089      	sub	sp, #36	@ 0x24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
	uint32_t page_error = 0;           // 设置Page_error,如果出现错误这个变量会被设置为出错的FLASH地址
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef my_flash;            // 页擦除所在的位置
	my_flash.TypeErase = FLASH_TYPEERASE_PAGES; // 标明Flash执行页面只做擦除操作
 8004caa:	2508      	movs	r5, #8
 8004cac:	197b      	adds	r3, r7, r5
 8004cae:	2202      	movs	r2, #2
 8004cb0:	601a      	str	r2, [r3, #0]
	my_flash.Page = GetPage(page_address);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7ff ff68 	bl	8004b8a <GetPage>
 8004cba:	0002      	movs	r2, r0
 8004cbc:	197b      	adds	r3, r7, r5
 8004cbe:	609a      	str	r2, [r3, #8]
	my_flash.NbPages = 1; // 说明要擦除的页数
 8004cc0:	197b      	adds	r3, r7, r5
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	60da      	str	r2, [r3, #12]
	HAL_FLASH_Unlock();
 8004cc6:	f000 fec1 	bl	8005a4c <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&my_flash, &page_error);
 8004cca:	261f      	movs	r6, #31
 8004ccc:	19bc      	adds	r4, r7, r6
 8004cce:	2318      	movs	r3, #24
 8004cd0:	18fa      	adds	r2, r7, r3
 8004cd2:	197b      	adds	r3, r7, r5
 8004cd4:	0011      	movs	r1, r2
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 ff6c 	bl	8005bb4 <HAL_FLASHEx_Erase>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	7023      	strb	r3, [r4, #0]
	HAL_FLASH_Lock();
 8004ce0:	f000 fed8 	bl	8005a94 <HAL_FLASH_Lock>
	if (status == HAL_OK) {
 8004ce4:	19bb      	adds	r3, r7, r6
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <my_flash_earse_pages+0x52>
		return true;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <my_flash_earse_pages+0x54>
	}
	return false;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b009      	add	sp, #36	@ 0x24
 8004cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cfa <my_flash_write_double_word>:
 * @brief  写双字
 * @param  address 内存地址
 * @param  data 要写入的数据
 * @retval 是否成功
 */
static bool my_flash_write_double_word(uint32_t address, uint64_t data) {
 8004cfa:	b5b0      	push	{r4, r5, r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	603a      	str	r2, [r7, #0]
 8004d04:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8004d06:	f000 fea1 	bl	8005a4c <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8004d0a:	2517      	movs	r5, #23
 8004d0c:	197c      	adds	r4, r7, r5
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	2001      	movs	r0, #1
 8004d16:	f000 fe4b 	bl	80059b0 <HAL_FLASH_Program>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	7023      	strb	r3, [r4, #0]
			address, data);
	HAL_FLASH_Lock();
 8004d1e:	f000 feb9 	bl	8005a94 <HAL_FLASH_Lock>
	if (status == HAL_OK) {
 8004d22:	197b      	adds	r3, r7, r5
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <my_flash_write_double_word+0x34>
		return true;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <my_flash_write_double_word+0x36>
	}
	return false;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b006      	add	sp, #24
 8004d36:	bdb0      	pop	{r4, r5, r7, pc}

08004d38 <set_i2c_addr>:
		return true;
	}
	return false;
}

bool set_i2c_addr(uint8_t data) {
 8004d38:	b5b0      	push	{r4, r5, r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	0002      	movs	r2, r0
 8004d40:	1dfb      	adds	r3, r7, #7
 8004d42:	701a      	strb	r2, [r3, #0]
	uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE15_STARTADDR);
 8004d44:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <set_i2c_addr+0x78>)
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7ff ff9d 	bl	8004c86 <my_flash_read_double_word>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	000b      	movs	r3, r1
 8004d50:	60ba      	str	r2, [r7, #8]
 8004d52:	60fb      	str	r3, [r7, #12]
	set_byte_in_uint64(&temp, 3, data);
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	2308      	movs	r3, #8
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2103      	movs	r1, #3
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7ff ff21 	bl	8004ba6 <set_byte_in_uint64>
	my_flash_earse_pages(STM32G0xx_FLASH_PAGE15_STARTADDR);
 8004d64:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <set_i2c_addr+0x78>)
 8004d66:	0018      	movs	r0, r3
 8004d68:	f7ff ff99 	bl	8004c9e <my_flash_earse_pages>
	while (my_flash_write_double_word(STM32G0xx_FLASH_PAGE15_STARTADDR, temp)
 8004d6c:	46c0      	nop			@ (mov r8, r8)
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	490f      	ldr	r1, [pc, #60]	@ (8004db0 <set_i2c_addr+0x78>)
 8004d74:	0008      	movs	r0, r1
 8004d76:	f7ff ffc0 	bl	8004cfa <my_flash_write_double_word>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	001a      	movs	r2, r3
			!= true)
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4053      	eors	r3, r2
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f2      	bne.n	8004d6e <set_i2c_addr+0x36>
		;
	uint8_t dat = get_i2c_addr();
 8004d88:	2517      	movs	r5, #23
 8004d8a:	197c      	adds	r4, r7, r5
 8004d8c:	f000 f830 	bl	8004df0 <get_i2c_addr>
 8004d90:	0003      	movs	r3, r0
 8004d92:	7023      	strb	r3, [r4, #0]
	if (dat == data) {
 8004d94:	197a      	adds	r2, r7, r5
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d101      	bne.n	8004da4 <set_i2c_addr+0x6c>
		return true;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <set_i2c_addr+0x6e>
	}
	return false;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b006      	add	sp, #24
 8004dac:	bdb0      	pop	{r4, r5, r7, pc}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	08007800 	.word	0x08007800

08004db4 <get_lin_mic_pc_en_status>:

uint8_t get_lin_mic_pc_en_status(void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	return *((__IO uint8_t*) (LIN_MIC_PC_EN_STATUS_ADDR));
 8004db8:	4b02      	ldr	r3, [pc, #8]	@ (8004dc4 <get_lin_mic_pc_en_status+0x10>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08007800 	.word	0x08007800

08004dc8 <get_hp_mode_status>:

uint8_t get_hp_mode_status(void) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	return *((__IO uint8_t*) (HP_MODE_STATUS_ADDR));
 8004dcc:	4b02      	ldr	r3, [pc, #8]	@ (8004dd8 <get_hp_mode_status+0x10>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	08007801 	.word	0x08007801

08004ddc <get_rgb_light_status>:

uint8_t get_rgb_light_status(void) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
	return *((__IO uint8_t*) (RGB_LIGHT_STATUS_ADDR));
 8004de0:	4b02      	ldr	r3, [pc, #8]	@ (8004dec <get_rgb_light_status+0x10>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b2db      	uxtb	r3, r3
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08007802 	.word	0x08007802

08004df0 <get_i2c_addr>:

uint8_t get_i2c_addr(void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
	return *((__IO uint8_t*) (I2C_ADDR));
 8004df4:	4b02      	ldr	r3, [pc, #8]	@ (8004e00 <get_i2c_addr+0x10>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	b2db      	uxtb	r3, r3
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	08007803 	.word	0x08007803

08004e04 <write_flash>:

bool write_flash(uint8_t pc_en,uint8_t hp_mode,uint8_t rgb_light){
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	0004      	movs	r4, r0
 8004e0c:	0008      	movs	r0, r1
 8004e0e:	0011      	movs	r1, r2
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	1c22      	adds	r2, r4, #0
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	1dbb      	adds	r3, r7, #6
 8004e18:	1c02      	adds	r2, r0, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	1d7b      	adds	r3, r7, #5
 8004e1e:	1c0a      	adds	r2, r1, #0
 8004e20:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e22:	b672      	cpsid	i
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	uint64_t temp = my_flash_read_double_word(STM32G0xx_FLASH_PAGE15_STARTADDR);
 8004e26:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <write_flash+0xc4>)
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7ff ff2c 	bl	8004c86 <my_flash_read_double_word>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	000b      	movs	r3, r1
 8004e32:	60ba      	str	r2, [r7, #8]
 8004e34:	60fb      	str	r3, [r7, #12]
	set_byte_in_uint64(&temp, 0, pc_en);
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	2408      	movs	r4, #8
 8004e3c:	193b      	adds	r3, r7, r4
 8004e3e:	2100      	movs	r1, #0
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7ff feb0 	bl	8004ba6 <set_byte_in_uint64>
	set_byte_in_uint64(&temp, 1, hp_mode);
 8004e46:	1dbb      	adds	r3, r7, #6
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	193b      	adds	r3, r7, r4
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7ff fea9 	bl	8004ba6 <set_byte_in_uint64>
	set_byte_in_uint64(&temp, 2, rgb_light);
 8004e54:	1d7b      	adds	r3, r7, #5
 8004e56:	781a      	ldrb	r2, [r3, #0]
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff fea2 	bl	8004ba6 <set_byte_in_uint64>
	my_flash_earse_pages(STM32G0xx_FLASH_PAGE15_STARTADDR);
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <write_flash+0xc4>)
 8004e64:	0018      	movs	r0, r3
 8004e66:	f7ff ff1a 	bl	8004c9e <my_flash_earse_pages>
	while (my_flash_write_double_word(STM32G0xx_FLASH_PAGE15_STARTADDR, temp)
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4915      	ldr	r1, [pc, #84]	@ (8004ec8 <write_flash+0xc4>)
 8004e72:	0008      	movs	r0, r1
 8004e74:	f7ff ff41 	bl	8004cfa <my_flash_write_double_word>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	001a      	movs	r2, r3
			!= true);
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4053      	eors	r3, r2
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f2      	bne.n	8004e6c <write_flash+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8004e86:	b662      	cpsie	i
}
 8004e88:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
	if (pc_en == get_lin_mic_pc_en_status() && hp_mode == get_hp_mode_status() && rgb_light == get_rgb_light_status()) {
 8004e8a:	f7ff ff93 	bl	8004db4 <get_lin_mic_pc_en_status>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	001a      	movs	r2, r3
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d111      	bne.n	8004ebe <write_flash+0xba>
 8004e9a:	f7ff ff95 	bl	8004dc8 <get_hp_mode_status>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	1dbb      	adds	r3, r7, #6
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d109      	bne.n	8004ebe <write_flash+0xba>
 8004eaa:	f7ff ff97 	bl	8004ddc <get_rgb_light_status>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	1d7b      	adds	r3, r7, #5
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <write_flash+0xba>
		return true;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <write_flash+0xbc>
	}
	return false;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b005      	add	sp, #20
 8004ec6:	bd90      	pop	{r4, r7, pc}
 8004ec8:	08007800 	.word	0x08007800

08004ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <HAL_MspInit+0x44>)
 8004ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <HAL_MspInit+0x44>)
 8004ed8:	2101      	movs	r1, #1
 8004eda:	430a      	orrs	r2, r1
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ede:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <HAL_MspInit+0x44>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eea:	4b09      	ldr	r3, [pc, #36]	@ (8004f10 <HAL_MspInit+0x44>)
 8004eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_MspInit+0x44>)
 8004ef0:	2180      	movs	r1, #128	@ 0x80
 8004ef2:	0549      	lsls	r1, r1, #21
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_MspInit+0x44>)
 8004efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	055b      	lsls	r3, r3, #21
 8004f00:	4013      	ands	r3, r2
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	40021000 	.word	0x40021000

08004f14 <LL_DMA_DisableChannel>:
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8004f22:	4a0b      	ldr	r2, [pc, #44]	@ (8004f50 <LL_DMA_DisableChannel+0x3c>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	18d3      	adds	r3, r2, r3
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	18d3      	adds	r3, r2, r3
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4907      	ldr	r1, [pc, #28]	@ (8004f50 <LL_DMA_DisableChannel+0x3c>)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	18cb      	adds	r3, r1, r3
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	18cb      	adds	r3, r1, r3
 8004f40:	2101      	movs	r1, #1
 8004f42:	438a      	bics	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	08007a38 	.word	0x08007a38

08004f54 <LL_DMA_IsActiveFlag_TC5>:
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	029b      	lsls	r3, r3, #10
 8004f64:	401a      	ands	r2, r3
 8004f66:	2380      	movs	r3, #128	@ 0x80
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d101      	bne.n	8004f72 <LL_DMA_IsActiveFlag_TC5+0x1e>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <LL_DMA_IsActiveFlag_TC5+0x20>
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <LL_DMA_ClearFlag_GI5>:
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	@ 0x80
 8004f88:	0252      	lsls	r2, r2, #9
 8004f8a:	605a      	str	r2, [r3, #4]
}
 8004f8c:	46c0      	nop			@ (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <LL_DMA_ClearFlag_TC5>:
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	@ 0x80
 8004fa0:	0292      	lsls	r2, r2, #10
 8004fa2:	605a      	str	r2, [r3, #4]
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}

08004fac <LL_TIM_DisableCounter>:
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4393      	bics	r3, r2
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b002      	add	sp, #8
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	e7fd      	b.n	8004fce <NMI_Handler+0x4>

08004fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	e7fd      	b.n	8004fd6 <HardFault_Handler+0x4>

08004fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fe8:	46c0      	nop			@ (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ff2:	f000 fbbf 	bl	8005774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HP_DET_Pin);
 8005000:	2002      	movs	r0, #2
 8005002:	f001 f819 	bl	8006038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x38>)
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff ff9e 	bl	8004f54 <LL_DMA_IsActiveFlag_TC5>
 8005018:	1e03      	subs	r3, r0, #0
 800501a:	d010      	beq.n	800503e <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x32>
		LL_DMA_ClearFlag_GI5(DMA1);
 800501c:	4b09      	ldr	r3, [pc, #36]	@ (8005044 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x38>)
 800501e:	0018      	movs	r0, r3
 8005020:	f7ff ffac 	bl	8004f7c <LL_DMA_ClearFlag_GI5>
		LL_DMA_ClearFlag_TC5(DMA1);
 8005024:	4b07      	ldr	r3, [pc, #28]	@ (8005044 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x38>)
 8005026:	0018      	movs	r0, r3
 8005028:	f7ff ffb4 	bl	8004f94 <LL_DMA_ClearFlag_TC5>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x38>)
 800502e:	2104      	movs	r1, #4
 8005030:	0018      	movs	r0, r3
 8005032:	f7ff ff6f 	bl	8004f14 <LL_DMA_DisableChannel>
		LL_TIM_DisableCounter(TIM17);
 8005036:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler+0x3c>)
 8005038:	0018      	movs	r0, r3
 800503a:	f7ff ffb7 	bl	8004fac <LL_TIM_DisableCounter>
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40020000 	.word	0x40020000
 8005048:	40014800 	.word	0x40014800

0800504c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <LL_DMA_SetDataTransferDirection>:
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005068:	4a0c      	ldr	r2, [pc, #48]	@ (800509c <LL_DMA_SetDataTransferDirection+0x44>)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	18d3      	adds	r3, r2, r3
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	001a      	movs	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <LL_DMA_SetDataTransferDirection+0x48>)
 800507a:	4013      	ands	r3, r2
 800507c:	0019      	movs	r1, r3
 800507e:	4a07      	ldr	r2, [pc, #28]	@ (800509c <LL_DMA_SetDataTransferDirection+0x44>)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	18d3      	adds	r3, r2, r3
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	001a      	movs	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	18d3      	adds	r3, r2, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b006      	add	sp, #24
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	08007a80 	.word	0x08007a80
 80050a0:	ffffbfef 	.word	0xffffbfef

080050a4 <LL_DMA_SetMode>:
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80050b4:	4a0c      	ldr	r2, [pc, #48]	@ (80050e8 <LL_DMA_SetMode+0x44>)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	18d3      	adds	r3, r2, r3
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	001a      	movs	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	18d3      	adds	r3, r2, r3
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2220      	movs	r2, #32
 80050c6:	4393      	bics	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	4a07      	ldr	r2, [pc, #28]	@ (80050e8 <LL_DMA_SetMode+0x44>)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	18d3      	adds	r3, r2, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	001a      	movs	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	18d3      	adds	r3, r2, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b006      	add	sp, #24
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	08007a80 	.word	0x08007a80

080050ec <LL_DMA_SetPeriphIncMode>:
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80050fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005130 <LL_DMA_SetPeriphIncMode+0x44>)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	001a      	movs	r2, r3
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	18d3      	adds	r3, r2, r3
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2240      	movs	r2, #64	@ 0x40
 800510e:	4393      	bics	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	4a07      	ldr	r2, [pc, #28]	@ (8005130 <LL_DMA_SetPeriphIncMode+0x44>)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	18d3      	adds	r3, r2, r3
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	001a      	movs	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	18d3      	adds	r3, r2, r3
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	430a      	orrs	r2, r1
 8005124:	601a      	str	r2, [r3, #0]
}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b006      	add	sp, #24
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	08007a80 	.word	0x08007a80

08005134 <LL_DMA_SetMemoryIncMode>:
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8005144:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <LL_DMA_SetMemoryIncMode+0x44>)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	18d3      	adds	r3, r2, r3
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	001a      	movs	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	18d3      	adds	r3, r2, r3
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2280      	movs	r2, #128	@ 0x80
 8005156:	4393      	bics	r3, r2
 8005158:	0019      	movs	r1, r3
 800515a:	4a07      	ldr	r2, [pc, #28]	@ (8005178 <LL_DMA_SetMemoryIncMode+0x44>)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	18d3      	adds	r3, r2, r3
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	001a      	movs	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	18d3      	adds	r3, r2, r3
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	430a      	orrs	r2, r1
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b006      	add	sp, #24
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			@ (mov r8, r8)
 8005178:	08007a80 	.word	0x08007a80

0800517c <LL_DMA_SetPeriphSize>:
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800518c:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <LL_DMA_SetPeriphSize+0x44>)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	18d3      	adds	r3, r2, r3
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	001a      	movs	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	18d3      	adds	r3, r2, r3
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <LL_DMA_SetPeriphSize+0x48>)
 800519e:	4013      	ands	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	4a07      	ldr	r2, [pc, #28]	@ (80051c0 <LL_DMA_SetPeriphSize+0x44>)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	18d3      	adds	r3, r2, r3
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	001a      	movs	r2, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	18d3      	adds	r3, r2, r3
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b006      	add	sp, #24
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	08007a80 	.word	0x08007a80
 80051c4:	fffffcff 	.word	0xfffffcff

080051c8 <LL_DMA_SetMemorySize>:
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80051d8:	4a0c      	ldr	r2, [pc, #48]	@ (800520c <LL_DMA_SetMemorySize+0x44>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	18d3      	adds	r3, r2, r3
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	001a      	movs	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	18d3      	adds	r3, r2, r3
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <LL_DMA_SetMemorySize+0x48>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	4a07      	ldr	r2, [pc, #28]	@ (800520c <LL_DMA_SetMemorySize+0x44>)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	18d3      	adds	r3, r2, r3
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	001a      	movs	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	18d3      	adds	r3, r2, r3
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b006      	add	sp, #24
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	08007a80 	.word	0x08007a80
 8005210:	fffff3ff 	.word	0xfffff3ff

08005214 <LL_DMA_SetChannelPriorityLevel>:
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8005224:	4a0c      	ldr	r2, [pc, #48]	@ (8005258 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	18d3      	adds	r3, r2, r3
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	001a      	movs	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a09      	ldr	r2, [pc, #36]	@ (800525c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8005236:	4013      	ands	r3, r2
 8005238:	0019      	movs	r1, r3
 800523a:	4a07      	ldr	r2, [pc, #28]	@ (8005258 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	18d3      	adds	r3, r2, r3
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	001a      	movs	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	18d3      	adds	r3, r2, r3
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b006      	add	sp, #24
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	08007a80 	.word	0x08007a80
 800525c:	ffffcfff 	.word	0xffffcfff

08005260 <LL_DMA_SetPeriphRequest>:
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	0a9b      	lsrs	r3, r3, #10
 8005270:	4a0f      	ldr	r2, [pc, #60]	@ (80052b0 <LL_DMA_SetPeriphRequest+0x50>)
 8005272:	405a      	eors	r2, r3
 8005274:	0013      	movs	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	18d3      	adds	r3, r2, r3
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4a0b      	ldr	r2, [pc, #44]	@ (80052b4 <LL_DMA_SetPeriphRequest+0x54>)
 8005286:	4694      	mov	ip, r2
 8005288:	4463      	add	r3, ip
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	223f      	movs	r2, #63	@ 0x3f
 800528e:	4393      	bics	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	18d3      	adds	r3, r2, r3
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4a06      	ldr	r2, [pc, #24]	@ (80052b4 <LL_DMA_SetPeriphRequest+0x54>)
 800529c:	4694      	mov	ip, r2
 800529e:	4463      	add	r3, ip
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b006      	add	sp, #24
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	00100080 	.word	0x00100080
 80052b4:	40020800 	.word	0x40020800

080052b8 <LL_TIM_DisableARRPreload>:
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2280      	movs	r2, #128	@ 0x80
 80052c6:	4393      	bics	r3, r2
 80052c8:	001a      	movs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b002      	add	sp, #8
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <LL_TIM_OC_DisableFast>:
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d02c      	beq.n	8005342 <LL_TIM_OC_DisableFast+0x6a>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d027      	beq.n	800533e <LL_TIM_OC_DisableFast+0x66>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d022      	beq.n	800533a <LL_TIM_OC_DisableFast+0x62>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b40      	cmp	r3, #64	@ 0x40
 80052f8:	d01d      	beq.n	8005336 <LL_TIM_OC_DisableFast+0x5e>
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	429a      	cmp	r2, r3
 8005302:	d016      	beq.n	8005332 <LL_TIM_OC_DisableFast+0x5a>
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	2380      	movs	r3, #128	@ 0x80
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	429a      	cmp	r2, r3
 800530c:	d00f      	beq.n	800532e <LL_TIM_OC_DisableFast+0x56>
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	015b      	lsls	r3, r3, #5
 8005314:	429a      	cmp	r2, r3
 8005316:	d008      	beq.n	800532a <LL_TIM_OC_DisableFast+0x52>
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	2380      	movs	r3, #128	@ 0x80
 800531c:	025b      	lsls	r3, r3, #9
 800531e:	429a      	cmp	r2, r3
 8005320:	d101      	bne.n	8005326 <LL_TIM_OC_DisableFast+0x4e>
 8005322:	2307      	movs	r3, #7
 8005324:	e00e      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 8005326:	2308      	movs	r3, #8
 8005328:	e00c      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 800532a:	2306      	movs	r3, #6
 800532c:	e00a      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 800532e:	2305      	movs	r3, #5
 8005330:	e008      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 8005332:	2304      	movs	r3, #4
 8005334:	e006      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 8005336:	2303      	movs	r3, #3
 8005338:	e004      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 800533a:	2302      	movs	r3, #2
 800533c:	e002      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <LL_TIM_OC_DisableFast+0x6c>
 8005342:	2300      	movs	r3, #0
 8005344:	200f      	movs	r0, #15
 8005346:	183a      	adds	r2, r7, r0
 8005348:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3318      	adds	r3, #24
 800534e:	0019      	movs	r1, r3
 8005350:	183b      	adds	r3, r7, r0
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	4a0a      	ldr	r2, [pc, #40]	@ (8005380 <LL_TIM_OC_DisableFast+0xa8>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	18cb      	adds	r3, r1, r3
 800535a:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	183a      	adds	r2, r7, r0
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	4907      	ldr	r1, [pc, #28]	@ (8005384 <LL_TIM_OC_DisableFast+0xac>)
 8005366:	5c8a      	ldrb	r2, [r1, r2]
 8005368:	0011      	movs	r1, r2
 800536a:	2204      	movs	r2, #4
 800536c:	408a      	lsls	r2, r1
 800536e:	43d2      	mvns	r2, r2
 8005370:	401a      	ands	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	46bd      	mov	sp, r7
 800537a:	b004      	add	sp, #16
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	08007a88 	.word	0x08007a88
 8005384:	08007a94 	.word	0x08007a94

08005388 <LL_TIM_OC_EnablePreload>:
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d02c      	beq.n	80053f2 <LL_TIM_OC_EnablePreload+0x6a>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d027      	beq.n	80053ee <LL_TIM_OC_EnablePreload+0x66>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d022      	beq.n	80053ea <LL_TIM_OC_EnablePreload+0x62>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d01d      	beq.n	80053e6 <LL_TIM_OC_EnablePreload+0x5e>
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d016      	beq.n	80053e2 <LL_TIM_OC_EnablePreload+0x5a>
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	2380      	movs	r3, #128	@ 0x80
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d00f      	beq.n	80053de <LL_TIM_OC_EnablePreload+0x56>
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	015b      	lsls	r3, r3, #5
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d008      	beq.n	80053da <LL_TIM_OC_EnablePreload+0x52>
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	2380      	movs	r3, #128	@ 0x80
 80053cc:	025b      	lsls	r3, r3, #9
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d101      	bne.n	80053d6 <LL_TIM_OC_EnablePreload+0x4e>
 80053d2:	2307      	movs	r3, #7
 80053d4:	e00e      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053d6:	2308      	movs	r3, #8
 80053d8:	e00c      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053da:	2306      	movs	r3, #6
 80053dc:	e00a      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053de:	2305      	movs	r3, #5
 80053e0:	e008      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053e2:	2304      	movs	r3, #4
 80053e4:	e006      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053e6:	2303      	movs	r3, #3
 80053e8:	e004      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e002      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <LL_TIM_OC_EnablePreload+0x6c>
 80053f2:	2300      	movs	r3, #0
 80053f4:	200f      	movs	r0, #15
 80053f6:	183a      	adds	r2, r7, r0
 80053f8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3318      	adds	r3, #24
 80053fe:	0019      	movs	r1, r3
 8005400:	183b      	adds	r3, r7, r0
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	4a09      	ldr	r2, [pc, #36]	@ (800542c <LL_TIM_OC_EnablePreload+0xa4>)
 8005406:	5cd3      	ldrb	r3, [r2, r3]
 8005408:	18cb      	adds	r3, r1, r3
 800540a:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	183b      	adds	r3, r7, r0
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4906      	ldr	r1, [pc, #24]	@ (8005430 <LL_TIM_OC_EnablePreload+0xa8>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	0019      	movs	r1, r3
 800541a:	2308      	movs	r3, #8
 800541c:	408b      	lsls	r3, r1
 800541e:	431a      	orrs	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	46c0      	nop			@ (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	b004      	add	sp, #16
 800542a:	bd80      	pop	{r7, pc}
 800542c:	08007a88 	.word	0x08007a88
 8005430:	08007a94 	.word	0x08007a94

08005434 <LL_APB2_GRP1_EnableClock>:
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800543c:	4b07      	ldr	r3, [pc, #28]	@ (800545c <LL_APB2_GRP1_EnableClock+0x28>)
 800543e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005440:	4b06      	ldr	r3, [pc, #24]	@ (800545c <LL_APB2_GRP1_EnableClock+0x28>)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	430a      	orrs	r2, r1
 8005446:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8005448:	4b04      	ldr	r3, [pc, #16]	@ (800545c <LL_APB2_GRP1_EnableClock+0x28>)
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	46c0      	nop			@ (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b004      	add	sp, #16
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000

08005460 <LL_IOP_GRP1_EnableClock>:
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8005468:	4b07      	ldr	r3, [pc, #28]	@ (8005488 <LL_IOP_GRP1_EnableClock+0x28>)
 800546a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800546c:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <LL_IOP_GRP1_EnableClock+0x28>)
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	430a      	orrs	r2, r1
 8005472:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8005474:	4b04      	ldr	r3, [pc, #16]	@ (8005488 <LL_IOP_GRP1_EnableClock+0x28>)
 8005476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4013      	ands	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800547e:	68fb      	ldr	r3, [r7, #12]
}
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b004      	add	sp, #16
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000

0800548c <MX_TIM17_Init>:

/* USER CODE END 0 */

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	b0a1      	sub	sp, #132	@ 0x84
 8005490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005492:	266c      	movs	r6, #108	@ 0x6c
 8005494:	19bb      	adds	r3, r7, r6
 8005496:	0018      	movs	r0, r3
 8005498:	2314      	movs	r3, #20
 800549a:	001a      	movs	r2, r3
 800549c:	2100      	movs	r1, #0
 800549e:	f002 f9c9 	bl	8007834 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80054a2:	244c      	movs	r4, #76	@ 0x4c
 80054a4:	193b      	adds	r3, r7, r4
 80054a6:	0018      	movs	r0, r3
 80054a8:	2320      	movs	r3, #32
 80054aa:	001a      	movs	r2, r3
 80054ac:	2100      	movs	r1, #0
 80054ae:	f002 f9c1 	bl	8007834 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80054b2:	251c      	movs	r5, #28
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	0018      	movs	r0, r3
 80054b8:	2330      	movs	r3, #48	@ 0x30
 80054ba:	001a      	movs	r2, r3
 80054bc:	2100      	movs	r1, #0
 80054be:	f002 f9b9 	bl	8007834 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	0018      	movs	r0, r3
 80054c6:	2318      	movs	r3, #24
 80054c8:	001a      	movs	r2, r3
 80054ca:	2100      	movs	r1, #0
 80054cc:	f002 f9b2 	bl	8007834 <memset>
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 80054d0:	2380      	movs	r3, #128	@ 0x80
 80054d2:	02db      	lsls	r3, r3, #11
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7ff ffad 	bl	8005434 <LL_APB2_GRP1_EnableClock>

  /* TIM17 DMA Init */

  /* TIM17_CH1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMAMUX_REQ_TIM17_CH1);
 80054da:	4b5a      	ldr	r3, [pc, #360]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 80054dc:	222f      	movs	r2, #47	@ 0x2f
 80054de:	2104      	movs	r1, #4
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7ff febd 	bl	8005260 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80054e6:	4b57      	ldr	r3, [pc, #348]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 80054e8:	2210      	movs	r2, #16
 80054ea:	2104      	movs	r1, #4
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff fdb3 	bl	8005058 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80054f2:	4b54      	ldr	r3, [pc, #336]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	2104      	movs	r1, #4
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7ff fe8b 	bl	8005214 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80054fe:	4b51      	ldr	r3, [pc, #324]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 8005500:	2200      	movs	r2, #0
 8005502:	2104      	movs	r1, #4
 8005504:	0018      	movs	r0, r3
 8005506:	f7ff fdcd 	bl	80050a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 800550a:	4b4e      	ldr	r3, [pc, #312]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 800550c:	2200      	movs	r2, #0
 800550e:	2104      	movs	r1, #4
 8005510:	0018      	movs	r0, r3
 8005512:	f7ff fdeb 	bl	80050ec <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8005516:	4b4b      	ldr	r3, [pc, #300]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	2104      	movs	r1, #4
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff fe09 	bl	8005134 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_HALFWORD);
 8005522:	2380      	movs	r3, #128	@ 0x80
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4847      	ldr	r0, [pc, #284]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 8005528:	001a      	movs	r2, r3
 800552a:	2104      	movs	r1, #4
 800552c:	f7ff fe26 	bl	800517c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8005530:	4b44      	ldr	r3, [pc, #272]	@ (8005644 <MX_TIM17_Init+0x1b8>)
 8005532:	2200      	movs	r2, #0
 8005534:	2104      	movs	r1, #4
 8005536:	0018      	movs	r0, r3
 8005538:	f7ff fe46 	bl	80051c8 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800553c:	19bb      	adds	r3, r7, r6
 800553e:	2200      	movs	r2, #0
 8005540:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005542:	0031      	movs	r1, r6
 8005544:	187b      	adds	r3, r7, r1
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 79;
 800554a:	187b      	adds	r3, r7, r1
 800554c:	224f      	movs	r2, #79	@ 0x4f
 800554e:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005550:	187b      	adds	r3, r7, r1
 8005552:	2200      	movs	r2, #0
 8005554:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8005556:	187b      	adds	r3, r7, r1
 8005558:	2200      	movs	r2, #0
 800555a:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 800555c:	187b      	adds	r3, r7, r1
 800555e:	4a3a      	ldr	r2, [pc, #232]	@ (8005648 <MX_TIM17_Init+0x1bc>)
 8005560:	0019      	movs	r1, r3
 8005562:	0010      	movs	r0, r2
 8005564:	f001 fd40 	bl	8006fe8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8005568:	4b37      	ldr	r3, [pc, #220]	@ (8005648 <MX_TIM17_Init+0x1bc>)
 800556a:	0018      	movs	r0, r3
 800556c:	f7ff fea4 	bl	80052b8 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM17, LL_TIM_CHANNEL_CH1);
 8005570:	4b35      	ldr	r3, [pc, #212]	@ (8005648 <MX_TIM17_Init+0x1bc>)
 8005572:	2101      	movs	r1, #1
 8005574:	0018      	movs	r0, r3
 8005576:	f7ff ff07 	bl	8005388 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800557a:	0021      	movs	r1, r4
 800557c:	187b      	adds	r3, r7, r1
 800557e:	2260      	movs	r2, #96	@ 0x60
 8005580:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005582:	187b      	adds	r3, r7, r1
 8005584:	2200      	movs	r2, #0
 8005586:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005588:	187b      	adds	r3, r7, r1
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 800558e:	187b      	adds	r3, r7, r1
 8005590:	2200      	movs	r2, #0
 8005592:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005594:	187b      	adds	r3, r7, r1
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800559a:	187b      	adds	r3, r7, r1
 800559c:	2200      	movs	r2, #0
 800559e:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	2200      	movs	r2, #0
 80055a4:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	2200      	movs	r2, #0
 80055aa:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_Init(TIM17, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	4826      	ldr	r0, [pc, #152]	@ (8005648 <MX_TIM17_Init+0x1bc>)
 80055b0:	001a      	movs	r2, r3
 80055b2:	2101      	movs	r1, #1
 80055b4:	f001 fd86 	bl	80070c4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM17, LL_TIM_CHANNEL_CH1);
 80055b8:	4b23      	ldr	r3, [pc, #140]	@ (8005648 <MX_TIM17_Init+0x1bc>)
 80055ba:	2101      	movs	r1, #1
 80055bc:	0018      	movs	r0, r3
 80055be:	f7ff fe8b 	bl	80052d8 <LL_TIM_OC_DisableFast>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80055c2:	0029      	movs	r1, r5
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct.DeadTime = 0;
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	2200      	movs	r2, #0
 80055da:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	2200      	movs	r2, #0
 80055e0:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	2280      	movs	r2, #128	@ 0x80
 80055e6:	0192      	lsls	r2, r2, #6
 80055e8:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80055f0:	187b      	adds	r3, r7, r1
 80055f2:	2200      	movs	r2, #0
 80055f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  LL_TIM_BDTR_Init(TIM17, &TIM_BDTRInitStruct);
 80055f6:	187b      	adds	r3, r7, r1
 80055f8:	4a13      	ldr	r2, [pc, #76]	@ (8005648 <MX_TIM17_Init+0x1bc>)
 80055fa:	0019      	movs	r1, r3
 80055fc:	0010      	movs	r0, r2
 80055fe:	f001 fde5 	bl	80071cc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8005602:	2001      	movs	r0, #1
 8005604:	f7ff ff2c 	bl	8005460 <LL_IOP_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	2280      	movs	r2, #128	@ 0x80
 800560c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	2202      	movs	r2, #2
 8005612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	2200      	movs	r2, #0
 8005618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	2200      	movs	r2, #0
 800561e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	2205      	movs	r2, #5
 800562a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800562c:	1d3a      	adds	r2, r7, #4
 800562e:	23a0      	movs	r3, #160	@ 0xa0
 8005630:	05db      	lsls	r3, r3, #23
 8005632:	0011      	movs	r1, r2
 8005634:	0018      	movs	r0, r3
 8005636:	f001 fac6 	bl	8006bc6 <LL_GPIO_Init>

}
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	46bd      	mov	sp, r7
 800563e:	b021      	add	sp, #132	@ 0x84
 8005640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	40020000 	.word	0x40020000
 8005648:	40014800 	.word	0x40014800

0800564c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800564c:	480d      	ldr	r0, [pc, #52]	@ (8005684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800564e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005650:	f7ff fcfc 	bl	800504c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005654:	480c      	ldr	r0, [pc, #48]	@ (8005688 <LoopForever+0x6>)
  ldr r1, =_edata
 8005656:	490d      	ldr	r1, [pc, #52]	@ (800568c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005658:	4a0d      	ldr	r2, [pc, #52]	@ (8005690 <LoopForever+0xe>)
  movs r3, #0
 800565a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800565c:	e002      	b.n	8005664 <LoopCopyDataInit>

0800565e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800565e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005662:	3304      	adds	r3, #4

08005664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005668:	d3f9      	bcc.n	800565e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800566a:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800566c:	4c0a      	ldr	r4, [pc, #40]	@ (8005698 <LoopForever+0x16>)
  movs r3, #0
 800566e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005670:	e001      	b.n	8005676 <LoopFillZerobss>

08005672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005674:	3204      	adds	r2, #4

08005676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005678:	d3fb      	bcc.n	8005672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800567a:	f002 f8e3 	bl	8007844 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800567e:	f7ff f9ed 	bl	8004a5c <main>

08005682 <LoopForever>:

LoopForever:
  b LoopForever
 8005682:	e7fe      	b.n	8005682 <LoopForever>
  ldr   r0, =_estack
 8005684:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005688:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800568c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8005690:	08007aa8 	.word	0x08007aa8
  ldr r2, =_sbss
 8005694:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8005698:	200006c4 	.word	0x200006c4

0800569c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800569c:	e7fe      	b.n	800569c <ADC1_IRQHandler>
	...

080056a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056a6:	1dfb      	adds	r3, r7, #7
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056ac:	4b0b      	ldr	r3, [pc, #44]	@ (80056dc <HAL_Init+0x3c>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <HAL_Init+0x3c>)
 80056b2:	2180      	movs	r1, #128	@ 0x80
 80056b4:	0049      	lsls	r1, r1, #1
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056ba:	2003      	movs	r0, #3
 80056bc:	f000 f810 	bl	80056e0 <HAL_InitTick>
 80056c0:	1e03      	subs	r3, r0, #0
 80056c2:	d003      	beq.n	80056cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80056c4:	1dfb      	adds	r3, r7, #7
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e001      	b.n	80056d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80056cc:	f7ff fbfe 	bl	8004ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056d0:	1dfb      	adds	r3, r7, #7
 80056d2:	781b      	ldrb	r3, [r3, #0]
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40022000 	.word	0x40022000

080056e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056e8:	230f      	movs	r3, #15
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80056f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005768 <HAL_InitTick+0x88>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d02b      	beq.n	8005750 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80056f8:	4b1c      	ldr	r3, [pc, #112]	@ (800576c <HAL_InitTick+0x8c>)
 80056fa:	681c      	ldr	r4, [r3, #0]
 80056fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <HAL_InitTick+0x88>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	0019      	movs	r1, r3
 8005702:	23fa      	movs	r3, #250	@ 0xfa
 8005704:	0098      	lsls	r0, r3, #2
 8005706:	f7fc f8fb 	bl	8001900 <__udivsi3>
 800570a:	0003      	movs	r3, r0
 800570c:	0019      	movs	r1, r3
 800570e:	0020      	movs	r0, r4
 8005710:	f7fc f8f6 	bl	8001900 <__udivsi3>
 8005714:	0003      	movs	r3, r0
 8005716:	0018      	movs	r0, r3
 8005718:	f000 f93d 	bl	8005996 <HAL_SYSTICK_Config>
 800571c:	1e03      	subs	r3, r0, #0
 800571e:	d112      	bne.n	8005746 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d80a      	bhi.n	800573c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	2301      	movs	r3, #1
 800572a:	425b      	negs	r3, r3
 800572c:	2200      	movs	r2, #0
 800572e:	0018      	movs	r0, r3
 8005730:	f000 f90c 	bl	800594c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005734:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <HAL_InitTick+0x90>)
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e00d      	b.n	8005758 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800573c:	230f      	movs	r3, #15
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e008      	b.n	8005758 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005746:	230f      	movs	r3, #15
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e003      	b.n	8005758 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005750:	230f      	movs	r3, #15
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005758:	230f      	movs	r3, #15
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	781b      	ldrb	r3, [r3, #0]
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b005      	add	sp, #20
 8005764:	bd90      	pop	{r4, r7, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	200000c8 	.word	0x200000c8
 800576c:	200000c0 	.word	0x200000c0
 8005770:	200000c4 	.word	0x200000c4

08005774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005778:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_IncTick+0x1c>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	001a      	movs	r2, r3
 800577e:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_IncTick+0x20>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	18d2      	adds	r2, r2, r3
 8005784:	4b03      	ldr	r3, [pc, #12]	@ (8005794 <HAL_IncTick+0x20>)
 8005786:	601a      	str	r2, [r3, #0]
}
 8005788:	46c0      	nop			@ (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	200000c8 	.word	0x200000c8
 8005794:	200006a4 	.word	0x200006a4

08005798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  return uwTick;
 800579c:	4b02      	ldr	r3, [pc, #8]	@ (80057a8 <HAL_GetTick+0x10>)
 800579e:	681b      	ldr	r3, [r3, #0]
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	200006a4 	.word	0x200006a4

080057ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057b4:	f7ff fff0 	bl	8005798 <HAL_GetTick>
 80057b8:	0003      	movs	r3, r0
 80057ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	d005      	beq.n	80057d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057c6:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <HAL_Delay+0x44>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	001a      	movs	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	f7ff ffe0 	bl	8005798 <HAL_GetTick>
 80057d8:	0002      	movs	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d8f7      	bhi.n	80057d4 <HAL_Delay+0x28>
  {
  }
}
 80057e4:	46c0      	nop			@ (mov r8, r8)
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	200000c8 	.word	0x200000c8

080057f4 <__NVIC_EnableIRQ>:
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	0002      	movs	r2, r0
 80057fc:	1dfb      	adds	r3, r7, #7
 80057fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005800:	1dfb      	adds	r3, r7, #7
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b7f      	cmp	r3, #127	@ 0x7f
 8005806:	d809      	bhi.n	800581c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005808:	1dfb      	adds	r3, r7, #7
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	001a      	movs	r2, r3
 800580e:	231f      	movs	r3, #31
 8005810:	401a      	ands	r2, r3
 8005812:	4b04      	ldr	r3, [pc, #16]	@ (8005824 <__NVIC_EnableIRQ+0x30>)
 8005814:	2101      	movs	r1, #1
 8005816:	4091      	lsls	r1, r2
 8005818:	000a      	movs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}
 8005824:	e000e100 	.word	0xe000e100

08005828 <__NVIC_SetPriority>:
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	0002      	movs	r2, r0
 8005830:	6039      	str	r1, [r7, #0]
 8005832:	1dfb      	adds	r3, r7, #7
 8005834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005836:	1dfb      	adds	r3, r7, #7
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b7f      	cmp	r3, #127	@ 0x7f
 800583c:	d828      	bhi.n	8005890 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800583e:	4a2f      	ldr	r2, [pc, #188]	@ (80058fc <__NVIC_SetPriority+0xd4>)
 8005840:	1dfb      	adds	r3, r7, #7
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b25b      	sxtb	r3, r3
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	33c0      	adds	r3, #192	@ 0xc0
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	589b      	ldr	r3, [r3, r2]
 800584e:	1dfa      	adds	r2, r7, #7
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	0011      	movs	r1, r2
 8005854:	2203      	movs	r2, #3
 8005856:	400a      	ands	r2, r1
 8005858:	00d2      	lsls	r2, r2, #3
 800585a:	21ff      	movs	r1, #255	@ 0xff
 800585c:	4091      	lsls	r1, r2
 800585e:	000a      	movs	r2, r1
 8005860:	43d2      	mvns	r2, r2
 8005862:	401a      	ands	r2, r3
 8005864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	22ff      	movs	r2, #255	@ 0xff
 800586c:	401a      	ands	r2, r3
 800586e:	1dfb      	adds	r3, r7, #7
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	0018      	movs	r0, r3
 8005874:	2303      	movs	r3, #3
 8005876:	4003      	ands	r3, r0
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800587c:	481f      	ldr	r0, [pc, #124]	@ (80058fc <__NVIC_SetPriority+0xd4>)
 800587e:	1dfb      	adds	r3, r7, #7
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b25b      	sxtb	r3, r3
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	430a      	orrs	r2, r1
 8005888:	33c0      	adds	r3, #192	@ 0xc0
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	501a      	str	r2, [r3, r0]
}
 800588e:	e031      	b.n	80058f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005890:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <__NVIC_SetPriority+0xd8>)
 8005892:	1dfb      	adds	r3, r7, #7
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	0019      	movs	r1, r3
 8005898:	230f      	movs	r3, #15
 800589a:	400b      	ands	r3, r1
 800589c:	3b08      	subs	r3, #8
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	3306      	adds	r3, #6
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	18d3      	adds	r3, r2, r3
 80058a6:	3304      	adds	r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1dfa      	adds	r2, r7, #7
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	0011      	movs	r1, r2
 80058b0:	2203      	movs	r2, #3
 80058b2:	400a      	ands	r2, r1
 80058b4:	00d2      	lsls	r2, r2, #3
 80058b6:	21ff      	movs	r1, #255	@ 0xff
 80058b8:	4091      	lsls	r1, r2
 80058ba:	000a      	movs	r2, r1
 80058bc:	43d2      	mvns	r2, r2
 80058be:	401a      	ands	r2, r3
 80058c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	22ff      	movs	r2, #255	@ 0xff
 80058c8:	401a      	ands	r2, r3
 80058ca:	1dfb      	adds	r3, r7, #7
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	0018      	movs	r0, r3
 80058d0:	2303      	movs	r3, #3
 80058d2:	4003      	ands	r3, r0
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058d8:	4809      	ldr	r0, [pc, #36]	@ (8005900 <__NVIC_SetPriority+0xd8>)
 80058da:	1dfb      	adds	r3, r7, #7
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	001c      	movs	r4, r3
 80058e0:	230f      	movs	r3, #15
 80058e2:	4023      	ands	r3, r4
 80058e4:	3b08      	subs	r3, #8
 80058e6:	089b      	lsrs	r3, r3, #2
 80058e8:	430a      	orrs	r2, r1
 80058ea:	3306      	adds	r3, #6
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	18c3      	adds	r3, r0, r3
 80058f0:	3304      	adds	r3, #4
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	46c0      	nop			@ (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b003      	add	sp, #12
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	e000e100 	.word	0xe000e100
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	045b      	lsls	r3, r3, #17
 8005914:	429a      	cmp	r2, r3
 8005916:	d301      	bcc.n	800591c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005918:	2301      	movs	r3, #1
 800591a:	e010      	b.n	800593e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800591c:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <SysTick_Config+0x44>)
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	3a01      	subs	r2, #1
 8005922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005924:	2301      	movs	r3, #1
 8005926:	425b      	negs	r3, r3
 8005928:	2103      	movs	r1, #3
 800592a:	0018      	movs	r0, r3
 800592c:	f7ff ff7c 	bl	8005828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005930:	4b05      	ldr	r3, [pc, #20]	@ (8005948 <SysTick_Config+0x44>)
 8005932:	2200      	movs	r2, #0
 8005934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005936:	4b04      	ldr	r3, [pc, #16]	@ (8005948 <SysTick_Config+0x44>)
 8005938:	2207      	movs	r2, #7
 800593a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800593c:	2300      	movs	r3, #0
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b002      	add	sp, #8
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	e000e010 	.word	0xe000e010

0800594c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
 8005956:	210f      	movs	r1, #15
 8005958:	187b      	adds	r3, r7, r1
 800595a:	1c02      	adds	r2, r0, #0
 800595c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	187b      	adds	r3, r7, r1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b25b      	sxtb	r3, r3
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f7ff ff5d 	bl	8005828 <__NVIC_SetPriority>
}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b004      	add	sp, #16
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	0002      	movs	r2, r0
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005982:	1dfb      	adds	r3, r7, #7
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b25b      	sxtb	r3, r3
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff ff33 	bl	80057f4 <__NVIC_EnableIRQ>
}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b002      	add	sp, #8
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff ffaf 	bl	8005904 <SysTick_Config>
 80059a6:	0003      	movs	r3, r0
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b002      	add	sp, #8
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059b0:	b5b0      	push	{r4, r5, r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603a      	str	r2, [r7, #0]
 80059bc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059be:	4b21      	ldr	r3, [pc, #132]	@ (8005a44 <HAL_FLASH_Program+0x94>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_FLASH_Program+0x1a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e038      	b.n	8005a3c <HAL_FLASH_Program+0x8c>
 80059ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005a44 <HAL_FLASH_Program+0x94>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a44 <HAL_FLASH_Program+0x94>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059d6:	2517      	movs	r5, #23
 80059d8:	197c      	adds	r4, r7, r5
 80059da:	23fa      	movs	r3, #250	@ 0xfa
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 f87a 	bl	8005ad8 <FLASH_WaitForLastOperation>
 80059e4:	0003      	movs	r3, r0
 80059e6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80059e8:	197b      	adds	r3, r7, r5
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11f      	bne.n	8005a30 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d106      	bne.n	8005a04 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	0008      	movs	r0, r1
 80059fe:	f000 f8b9 	bl	8005b74 <FLASH_Program_DoubleWord>
 8005a02:	e005      	b.n	8005a10 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	0011      	movs	r1, r2
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f001 ff54 	bl	80078b8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a10:	2317      	movs	r3, #23
 8005a12:	18fc      	adds	r4, r7, r3
 8005a14:	23fa      	movs	r3, #250	@ 0xfa
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 f85d 	bl	8005ad8 <FLASH_WaitForLastOperation>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005a22:	4b09      	ldr	r3, [pc, #36]	@ (8005a48 <HAL_FLASH_Program+0x98>)
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	43d9      	mvns	r1, r3
 8005a2a:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <HAL_FLASH_Program+0x98>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a30:	4b04      	ldr	r3, [pc, #16]	@ (8005a44 <HAL_FLASH_Program+0x94>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005a36:	2317      	movs	r3, #23
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	781b      	ldrb	r3, [r3, #0]
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b006      	add	sp, #24
 8005a42:	bdb0      	pop	{r4, r5, r7, pc}
 8005a44:	200006a8 	.word	0x200006a8
 8005a48:	40022000 	.word	0x40022000

08005a4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005a58:	4b0b      	ldr	r3, [pc, #44]	@ (8005a88 <HAL_FLASH_Unlock+0x3c>)
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da0c      	bge.n	8005a7a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a60:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <HAL_FLASH_Unlock+0x3c>)
 8005a62:	4a0a      	ldr	r2, [pc, #40]	@ (8005a8c <HAL_FLASH_Unlock+0x40>)
 8005a64:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a66:	4b08      	ldr	r3, [pc, #32]	@ (8005a88 <HAL_FLASH_Unlock+0x3c>)
 8005a68:	4a09      	ldr	r2, [pc, #36]	@ (8005a90 <HAL_FLASH_Unlock+0x44>)
 8005a6a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005a6c:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <HAL_FLASH_Unlock+0x3c>)
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da02      	bge.n	8005a7a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	2201      	movs	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005a7a:	1dfb      	adds	r3, r7, #7
 8005a7c:	781b      	ldrb	r3, [r3, #0]
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b002      	add	sp, #8
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	40022000 	.word	0x40022000
 8005a8c:	45670123 	.word	0x45670123
 8005a90:	cdef89ab 	.word	0xcdef89ab

08005a94 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a9a:	1dfb      	adds	r3, r7, #7
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005aa0:	23fa      	movs	r3, #250	@ 0xfa
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 f817 	bl	8005ad8 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad4 <HAL_FLASH_Lock+0x40>)
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <HAL_FLASH_Lock+0x40>)
 8005ab0:	2180      	movs	r1, #128	@ 0x80
 8005ab2:	0609      	lsls	r1, r1, #24
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8005ab8:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <HAL_FLASH_Lock+0x40>)
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da02      	bge.n	8005ac6 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8005ac0:	1dfb      	adds	r3, r7, #7
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005ac6:	1dfb      	adds	r3, r7, #7
 8005ac8:	781b      	ldrb	r3, [r3, #0]
}
 8005aca:	0018      	movs	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			@ (mov r8, r8)
 8005ad4:	40022000 	.word	0x40022000

08005ad8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005ae0:	f7ff fe5a 	bl	8005798 <HAL_GetTick>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8005ae8:	2380      	movs	r3, #128	@ 0x80
 8005aea:	025b      	lsls	r3, r3, #9
 8005aec:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005aee:	e00c      	b.n	8005b0a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3301      	adds	r3, #1
 8005af4:	d009      	beq.n	8005b0a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005af6:	f7ff fe4f 	bl	8005798 <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d801      	bhi.n	8005b0a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e028      	b.n	8005b5c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8005b0a:	4b16      	ldr	r3, [pc, #88]	@ (8005b64 <FLASH_WaitForLastOperation+0x8c>)
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4013      	ands	r3, r2
 8005b12:	d1ed      	bne.n	8005af0 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005b14:	4b13      	ldr	r3, [pc, #76]	@ (8005b64 <FLASH_WaitForLastOperation+0x8c>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <FLASH_WaitForLastOperation+0x90>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005b1e:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <FLASH_WaitForLastOperation+0x8c>)
 8005b20:	4a12      	ldr	r2, [pc, #72]	@ (8005b6c <FLASH_WaitForLastOperation+0x94>)
 8005b22:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005b2a:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <FLASH_WaitForLastOperation+0x98>)
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e013      	b.n	8005b5c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3301      	adds	r3, #1
 8005b38:	d009      	beq.n	8005b4e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005b3a:	f7ff fe2d 	bl	8005798 <HAL_GetTick>
 8005b3e:	0002      	movs	r2, r0
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d801      	bhi.n	8005b4e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e006      	b.n	8005b5c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005b4e:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <FLASH_WaitForLastOperation+0x8c>)
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	2380      	movs	r3, #128	@ 0x80
 8005b54:	02db      	lsls	r3, r3, #11
 8005b56:	4013      	ands	r3, r2
 8005b58:	d1ec      	bne.n	8005b34 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b004      	add	sp, #16
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40022000 	.word	0x40022000
 8005b68:	000083fa 	.word	0x000083fa
 8005b6c:	000083fb 	.word	0x000083fb
 8005b70:	200006a8 	.word	0x200006a8

08005b74 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b74:	b5b0      	push	{r4, r5, r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	603a      	str	r2, [r7, #0]
 8005b7e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005b80:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <FLASH_Program_DoubleWord+0x3c>)
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <FLASH_Program_DoubleWord+0x3c>)
 8005b86:	2101      	movs	r1, #1
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005b92:	f3bf 8f6f 	isb	sy
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	001c      	movs	r4, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	001d      	movs	r5, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	0022      	movs	r2, r4
 8005ba6:	601a      	str	r2, [r3, #0]
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b004      	add	sp, #16
 8005bae:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb0:	40022000 	.word	0x40022000

08005bb4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005bb4:	b5b0      	push	{r4, r5, r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005bbe:	4b35      	ldr	r3, [pc, #212]	@ (8005c94 <HAL_FLASHEx_Erase+0xe0>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_FLASHEx_Erase+0x16>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e05f      	b.n	8005c8a <HAL_FLASHEx_Erase+0xd6>
 8005bca:	4b32      	ldr	r3, [pc, #200]	@ (8005c94 <HAL_FLASHEx_Erase+0xe0>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bd0:	4b30      	ldr	r3, [pc, #192]	@ (8005c94 <HAL_FLASHEx_Erase+0xe0>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bd6:	250f      	movs	r5, #15
 8005bd8:	197c      	adds	r4, r7, r5
 8005bda:	23fa      	movs	r3, #250	@ 0xfa
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7ff ff7a 	bl	8005ad8 <FLASH_WaitForLastOperation>
 8005be4:	0003      	movs	r3, r0
 8005be6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005be8:	002c      	movs	r4, r5
 8005bea:	193b      	adds	r3, r7, r4
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d145      	bne.n	8005c7e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d10d      	bne.n	8005c1c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 f849 	bl	8005c9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c0a:	193c      	adds	r4, r7, r4
 8005c0c:	23fa      	movs	r3, #250	@ 0xfa
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f7ff ff61 	bl	8005ad8 <FLASH_WaitForLastOperation>
 8005c16:	0003      	movs	r3, r0
 8005c18:	7023      	strb	r3, [r4, #0]
 8005c1a:	e030      	b.n	8005c7e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4252      	negs	r2, r2
 8005c22:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	e01a      	b.n	8005c62 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	0011      	movs	r1, r2
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 f845 	bl	8005cc4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c3a:	250f      	movs	r5, #15
 8005c3c:	197c      	adds	r4, r7, r5
 8005c3e:	23fa      	movs	r3, #250	@ 0xfa
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	0018      	movs	r0, r3
 8005c44:	f7ff ff48 	bl	8005ad8 <FLASH_WaitForLastOperation>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8005c4c:	197b      	adds	r3, r7, r5
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	601a      	str	r2, [r3, #0]
          break;
 8005c5a:	e00a      	b.n	8005c72 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	18d3      	adds	r3, r2, r3
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3dc      	bcc.n	8005c2c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005c72:	4b09      	ldr	r3, [pc, #36]	@ (8005c98 <HAL_FLASHEx_Erase+0xe4>)
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <HAL_FLASHEx_Erase+0xe4>)
 8005c78:	2102      	movs	r1, #2
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c7e:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_FLASHEx_Erase+0xe0>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005c84:	230f      	movs	r3, #15
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	781b      	ldrb	r3, [r3, #0]
}
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b004      	add	sp, #16
 8005c90:	bdb0      	pop	{r4, r5, r7, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	200006a8 	.word	0x200006a8
 8005c98:	40022000 	.word	0x40022000

08005c9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005ca4:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <FLASH_MassErase+0x24>)
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <FLASH_MassErase+0x24>)
 8005cae:	2180      	movs	r1, #128	@ 0x80
 8005cb0:	0249      	lsls	r1, r1, #9
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	615a      	str	r2, [r3, #20]
}
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b002      	add	sp, #8
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	40022000 	.word	0x40022000

08005cc4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005cce:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <FLASH_PageErase+0x2c>)
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <FLASH_PageErase+0x30>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	00da      	lsls	r2, r3, #3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <FLASH_PageErase+0x2c>)
 8005ce2:	4905      	ldr	r1, [pc, #20]	@ (8005cf8 <FLASH_PageErase+0x34>)
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	615a      	str	r2, [r3, #20]
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b004      	add	sp, #16
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	ffffe007 	.word	0xffffe007
 8005cf8:	00010002 	.word	0x00010002

08005cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d0a:	e147      	b.n	8005f9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2101      	movs	r1, #1
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4091      	lsls	r1, r2
 8005d16:	000a      	movs	r2, r1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d100      	bne.n	8005d24 <HAL_GPIO_Init+0x28>
 8005d22:	e138      	b.n	8005f96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d005      	beq.n	8005d3c <HAL_GPIO_Init+0x40>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2203      	movs	r2, #3
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d130      	bne.n	8005d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	2203      	movs	r2, #3
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	0013      	movs	r3, r2
 8005d4c:	43da      	mvns	r2, r3
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4013      	ands	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	409a      	lsls	r2, r3
 8005d5e:	0013      	movs	r3, r2
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d72:	2201      	movs	r2, #1
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	409a      	lsls	r2, r3
 8005d78:	0013      	movs	r3, r2
 8005d7a:	43da      	mvns	r2, r3
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	091b      	lsrs	r3, r3, #4
 8005d88:	2201      	movs	r2, #1
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	0013      	movs	r3, r2
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2203      	movs	r2, #3
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d017      	beq.n	8005dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	2203      	movs	r2, #3
 8005db6:	409a      	lsls	r2, r3
 8005db8:	0013      	movs	r3, r2
 8005dba:	43da      	mvns	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	0013      	movs	r3, r2
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2203      	movs	r2, #3
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d123      	bne.n	8005e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	08da      	lsrs	r2, r3, #3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3208      	adds	r2, #8
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	58d3      	ldr	r3, [r2, r3]
 8005df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2207      	movs	r2, #7
 8005df8:	4013      	ands	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	220f      	movs	r2, #15
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	0013      	movs	r3, r2
 8005e02:	43da      	mvns	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4013      	ands	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2107      	movs	r1, #7
 8005e12:	400b      	ands	r3, r1
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	409a      	lsls	r2, r3
 8005e18:	0013      	movs	r3, r2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	08da      	lsrs	r2, r3, #3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3208      	adds	r2, #8
 8005e28:	0092      	lsls	r2, r2, #2
 8005e2a:	6939      	ldr	r1, [r7, #16]
 8005e2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	2203      	movs	r2, #3
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	0013      	movs	r3, r2
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	409a      	lsls	r2, r3
 8005e54:	0013      	movs	r3, r2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	23c0      	movs	r3, #192	@ 0xc0
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d100      	bne.n	8005e70 <HAL_GPIO_Init+0x174>
 8005e6e:	e092      	b.n	8005f96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005e70:	4a50      	ldr	r2, [pc, #320]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	089b      	lsrs	r3, r3, #2
 8005e76:	3318      	adds	r3, #24
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	589b      	ldr	r3, [r3, r2]
 8005e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2203      	movs	r2, #3
 8005e82:	4013      	ands	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	220f      	movs	r2, #15
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	0013      	movs	r3, r2
 8005e8c:	43da      	mvns	r2, r3
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	23a0      	movs	r3, #160	@ 0xa0
 8005e98:	05db      	lsls	r3, r3, #23
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d013      	beq.n	8005ec6 <HAL_GPIO_Init+0x1ca>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a45      	ldr	r2, [pc, #276]	@ (8005fb8 <HAL_GPIO_Init+0x2bc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_GPIO_Init+0x1c6>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a44      	ldr	r2, [pc, #272]	@ (8005fbc <HAL_GPIO_Init+0x2c0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <HAL_GPIO_Init+0x1c2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a43      	ldr	r2, [pc, #268]	@ (8005fc0 <HAL_GPIO_Init+0x2c4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_GPIO_Init+0x1be>
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e006      	b.n	8005ec8 <HAL_GPIO_Init+0x1cc>
 8005eba:	2305      	movs	r3, #5
 8005ebc:	e004      	b.n	8005ec8 <HAL_GPIO_Init+0x1cc>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e002      	b.n	8005ec8 <HAL_GPIO_Init+0x1cc>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_GPIO_Init+0x1cc>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	2103      	movs	r1, #3
 8005ecc:	400a      	ands	r2, r1
 8005ece:	00d2      	lsls	r2, r2, #3
 8005ed0:	4093      	lsls	r3, r2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005ed8:	4936      	ldr	r1, [pc, #216]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	089b      	lsrs	r3, r3, #2
 8005ede:	3318      	adds	r3, #24
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ee6:	4b33      	ldr	r3, [pc, #204]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	43da      	mvns	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	2380      	movs	r3, #128	@ 0x80
 8005efc:	035b      	lsls	r3, r3, #13
 8005efe:	4013      	ands	r3, r2
 8005f00:	d003      	beq.n	8005f0a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005f10:	4b28      	ldr	r3, [pc, #160]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	43da      	mvns	r2, r3
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	039b      	lsls	r3, r3, #14
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f34:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f3c:	2384      	movs	r3, #132	@ 0x84
 8005f3e:	58d3      	ldr	r3, [r2, r3]
 8005f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	43da      	mvns	r2, r3
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	2380      	movs	r3, #128	@ 0x80
 8005f52:	029b      	lsls	r3, r3, #10
 8005f54:	4013      	ands	r3, r2
 8005f56:	d003      	beq.n	8005f60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f60:	4914      	ldr	r1, [pc, #80]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f62:	2284      	movs	r2, #132	@ 0x84
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005f68:	4a12      	ldr	r2, [pc, #72]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f6a:	2380      	movs	r3, #128	@ 0x80
 8005f6c:	58d3      	ldr	r3, [r2, r3]
 8005f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	43da      	mvns	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	2380      	movs	r3, #128	@ 0x80
 8005f80:	025b      	lsls	r3, r3, #9
 8005f82:	4013      	ands	r3, r2
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f8e:	4909      	ldr	r1, [pc, #36]	@ (8005fb4 <HAL_GPIO_Init+0x2b8>)
 8005f90:	2280      	movs	r2, #128	@ 0x80
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	40da      	lsrs	r2, r3
 8005fa4:	1e13      	subs	r3, r2, #0
 8005fa6:	d000      	beq.n	8005faa <HAL_GPIO_Init+0x2ae>
 8005fa8:	e6b0      	b.n	8005d0c <HAL_GPIO_Init+0x10>
  }
}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b006      	add	sp, #24
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021800 	.word	0x40021800
 8005fb8:	50000400 	.word	0x50000400
 8005fbc:	50000800 	.word	0x50000800
 8005fc0:	50000c00 	.word	0x50000c00

08005fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	000a      	movs	r2, r1
 8005fce:	1cbb      	adds	r3, r7, #2
 8005fd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	1cba      	adds	r2, r7, #2
 8005fd8:	8812      	ldrh	r2, [r2, #0]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005fde:	230f      	movs	r3, #15
 8005fe0:	18fb      	adds	r3, r7, r3
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	e003      	b.n	8005ff0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fe8:	230f      	movs	r3, #15
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005ff0:	230f      	movs	r3, #15
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	781b      	ldrb	r3, [r3, #0]
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b004      	add	sp, #16
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	0008      	movs	r0, r1
 8006008:	0011      	movs	r1, r2
 800600a:	1cbb      	adds	r3, r7, #2
 800600c:	1c02      	adds	r2, r0, #0
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	1c7b      	adds	r3, r7, #1
 8006012:	1c0a      	adds	r2, r1, #0
 8006014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006016:	1c7b      	adds	r3, r7, #1
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800601e:	1cbb      	adds	r3, r7, #2
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006026:	e003      	b.n	8006030 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006028:	1cbb      	adds	r3, r7, #2
 800602a:	881a      	ldrh	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006030:	46c0      	nop			@ (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	0002      	movs	r2, r0
 8006040:	1dbb      	adds	r3, r7, #6
 8006042:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006044:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	1dba      	adds	r2, r7, #6
 800604a:	8812      	ldrh	r2, [r2, #0]
 800604c:	4013      	ands	r3, r2
 800604e:	d008      	beq.n	8006062 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006050:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006052:	1dba      	adds	r2, r7, #6
 8006054:	8812      	ldrh	r2, [r2, #0]
 8006056:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006058:	1dbb      	adds	r3, r7, #6
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	0018      	movs	r0, r3
 800605e:	f7fe f9e1 	bl	8004424 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	1dba      	adds	r2, r7, #6
 8006068:	8812      	ldrh	r2, [r2, #0]
 800606a:	4013      	ands	r3, r2
 800606c:	d008      	beq.n	8006080 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800606e:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006070:	1dba      	adds	r2, r7, #6
 8006072:	8812      	ldrh	r2, [r2, #0]
 8006074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006076:	1dbb      	adds	r3, r7, #6
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	0018      	movs	r0, r3
 800607c:	f000 f806 	bl	800608c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006080:	46c0      	nop			@ (mov r8, r8)
 8006082:	46bd      	mov	sp, r7
 8006084:	b002      	add	sp, #8
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021800 	.word	0x40021800

0800608c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	0002      	movs	r2, r0
 8006094:	1dbb      	adds	r3, r7, #6
 8006096:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006098:	46c0      	nop			@ (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b002      	add	sp, #8
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80060a8:	4b19      	ldr	r3, [pc, #100]	@ (8006110 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	2380      	movs	r3, #128	@ 0x80
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d11f      	bne.n	8006104 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80060c4:	4b14      	ldr	r3, [pc, #80]	@ (8006118 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	0013      	movs	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4912      	ldr	r1, [pc, #72]	@ (800611c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80060d2:	0018      	movs	r0, r3
 80060d4:	f7fb fc14 	bl	8001900 <__udivsi3>
 80060d8:	0003      	movs	r3, r0
 80060da:	3301      	adds	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060de:	e008      	b.n	80060f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e001      	b.n	80060f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e009      	b.n	8006106 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060f2:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	2380      	movs	r3, #128	@ 0x80
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	401a      	ands	r2, r3
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	429a      	cmp	r2, r3
 8006102:	d0ed      	beq.n	80060e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b004      	add	sp, #16
 800610c:	bd80      	pop	{r7, pc}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	40007000 	.word	0x40007000
 8006114:	fffff9ff 	.word	0xfffff9ff
 8006118:	200000c0 	.word	0x200000c0
 800611c:	000f4240 	.word	0x000f4240

08006120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e2f3      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2201      	movs	r2, #1
 8006138:	4013      	ands	r3, r2
 800613a:	d100      	bne.n	800613e <HAL_RCC_OscConfig+0x1e>
 800613c:	e07c      	b.n	8006238 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613e:	4bc3      	ldr	r3, [pc, #780]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2238      	movs	r2, #56	@ 0x38
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006148:	4bc0      	ldr	r3, [pc, #768]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2203      	movs	r2, #3
 800614e:	4013      	ands	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b10      	cmp	r3, #16
 8006156:	d102      	bne.n	800615e <HAL_RCC_OscConfig+0x3e>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d002      	beq.n	8006164 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b08      	cmp	r3, #8
 8006162:	d10b      	bne.n	800617c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006164:	4bb9      	ldr	r3, [pc, #740]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	029b      	lsls	r3, r3, #10
 800616c:	4013      	ands	r3, r2
 800616e:	d062      	beq.n	8006236 <HAL_RCC_OscConfig+0x116>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d15e      	bne.n	8006236 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e2ce      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	025b      	lsls	r3, r3, #9
 8006184:	429a      	cmp	r2, r3
 8006186:	d107      	bne.n	8006198 <HAL_RCC_OscConfig+0x78>
 8006188:	4bb0      	ldr	r3, [pc, #704]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4baf      	ldr	r3, [pc, #700]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800618e:	2180      	movs	r1, #128	@ 0x80
 8006190:	0249      	lsls	r1, r1, #9
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e020      	b.n	80061da <HAL_RCC_OscConfig+0xba>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	23a0      	movs	r3, #160	@ 0xa0
 800619e:	02db      	lsls	r3, r3, #11
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d10e      	bne.n	80061c2 <HAL_RCC_OscConfig+0xa2>
 80061a4:	4ba9      	ldr	r3, [pc, #676]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4ba8      	ldr	r3, [pc, #672]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061aa:	2180      	movs	r1, #128	@ 0x80
 80061ac:	02c9      	lsls	r1, r1, #11
 80061ae:	430a      	orrs	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	4ba6      	ldr	r3, [pc, #664]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4ba5      	ldr	r3, [pc, #660]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061b8:	2180      	movs	r1, #128	@ 0x80
 80061ba:	0249      	lsls	r1, r1, #9
 80061bc:	430a      	orrs	r2, r1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e00b      	b.n	80061da <HAL_RCC_OscConfig+0xba>
 80061c2:	4ba2      	ldr	r3, [pc, #648]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4ba1      	ldr	r3, [pc, #644]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061c8:	49a1      	ldr	r1, [pc, #644]	@ (8006450 <HAL_RCC_OscConfig+0x330>)
 80061ca:	400a      	ands	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	4b9f      	ldr	r3, [pc, #636]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b9e      	ldr	r3, [pc, #632]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80061d4:	499f      	ldr	r1, [pc, #636]	@ (8006454 <HAL_RCC_OscConfig+0x334>)
 80061d6:	400a      	ands	r2, r1
 80061d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d014      	beq.n	800620c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7ff fad9 	bl	8005798 <HAL_GetTick>
 80061e6:	0003      	movs	r3, r0
 80061e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ec:	f7ff fad4 	bl	8005798 <HAL_GetTick>
 80061f0:	0002      	movs	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	@ 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e28d      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061fe:	4b93      	ldr	r3, [pc, #588]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	2380      	movs	r3, #128	@ 0x80
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	4013      	ands	r3, r2
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0xcc>
 800620a:	e015      	b.n	8006238 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7ff fac4 	bl	8005798 <HAL_GetTick>
 8006210:	0003      	movs	r3, r0
 8006212:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006216:	f7ff fabf 	bl	8005798 <HAL_GetTick>
 800621a:	0002      	movs	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b64      	cmp	r3, #100	@ 0x64
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e278      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006228:	4b88      	ldr	r3, [pc, #544]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	@ 0x80
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	4013      	ands	r3, r2
 8006232:	d1f0      	bne.n	8006216 <HAL_RCC_OscConfig+0xf6>
 8006234:	e000      	b.n	8006238 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006236:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2202      	movs	r2, #2
 800623e:	4013      	ands	r3, r2
 8006240:	d100      	bne.n	8006244 <HAL_RCC_OscConfig+0x124>
 8006242:	e099      	b.n	8006378 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006244:	4b81      	ldr	r3, [pc, #516]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2238      	movs	r2, #56	@ 0x38
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800624e:	4b7f      	ldr	r3, [pc, #508]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2203      	movs	r2, #3
 8006254:	4013      	ands	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b10      	cmp	r3, #16
 800625c:	d102      	bne.n	8006264 <HAL_RCC_OscConfig+0x144>
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d002      	beq.n	800626a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d135      	bne.n	80062d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800626a:	4b78      	ldr	r3, [pc, #480]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	2380      	movs	r3, #128	@ 0x80
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4013      	ands	r3, r2
 8006274:	d005      	beq.n	8006282 <HAL_RCC_OscConfig+0x162>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e24b      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006282:	4b72      	ldr	r3, [pc, #456]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4a74      	ldr	r2, [pc, #464]	@ (8006458 <HAL_RCC_OscConfig+0x338>)
 8006288:	4013      	ands	r3, r2
 800628a:	0019      	movs	r1, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	021a      	lsls	r2, r3, #8
 8006292:	4b6e      	ldr	r3, [pc, #440]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d112      	bne.n	80062c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800629e:	4b6b      	ldr	r3, [pc, #428]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a6e      	ldr	r2, [pc, #440]	@ (800645c <HAL_RCC_OscConfig+0x33c>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	0019      	movs	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	4b67      	ldr	r3, [pc, #412]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062ae:	430a      	orrs	r2, r1
 80062b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80062b2:	4b66      	ldr	r3, [pc, #408]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	0adb      	lsrs	r3, r3, #11
 80062b8:	2207      	movs	r2, #7
 80062ba:	4013      	ands	r3, r2
 80062bc:	4a68      	ldr	r2, [pc, #416]	@ (8006460 <HAL_RCC_OscConfig+0x340>)
 80062be:	40da      	lsrs	r2, r3
 80062c0:	4b68      	ldr	r3, [pc, #416]	@ (8006464 <HAL_RCC_OscConfig+0x344>)
 80062c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062c4:	4b68      	ldr	r3, [pc, #416]	@ (8006468 <HAL_RCC_OscConfig+0x348>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7ff fa09 	bl	80056e0 <HAL_InitTick>
 80062ce:	1e03      	subs	r3, r0, #0
 80062d0:	d051      	beq.n	8006376 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e221      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d030      	beq.n	8006340 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80062de:	4b5b      	ldr	r3, [pc, #364]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5e      	ldr	r2, [pc, #376]	@ (800645c <HAL_RCC_OscConfig+0x33c>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	0019      	movs	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	4b57      	ldr	r3, [pc, #348]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062ee:	430a      	orrs	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80062f2:	4b56      	ldr	r3, [pc, #344]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b55      	ldr	r3, [pc, #340]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80062f8:	2180      	movs	r1, #128	@ 0x80
 80062fa:	0049      	lsls	r1, r1, #1
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7ff fa4a 	bl	8005798 <HAL_GetTick>
 8006304:	0003      	movs	r3, r0
 8006306:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800630a:	f7ff fa45 	bl	8005798 <HAL_GetTick>
 800630e:	0002      	movs	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e1fe      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800631c:	4b4b      	ldr	r3, [pc, #300]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	2380      	movs	r3, #128	@ 0x80
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4013      	ands	r3, r2
 8006326:	d0f0      	beq.n	800630a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006328:	4b48      	ldr	r3, [pc, #288]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a4a      	ldr	r2, [pc, #296]	@ (8006458 <HAL_RCC_OscConfig+0x338>)
 800632e:	4013      	ands	r3, r2
 8006330:	0019      	movs	r1, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	021a      	lsls	r2, r3, #8
 8006338:	4b44      	ldr	r3, [pc, #272]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	e01b      	b.n	8006378 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006340:	4b42      	ldr	r3, [pc, #264]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b41      	ldr	r3, [pc, #260]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006346:	4949      	ldr	r1, [pc, #292]	@ (800646c <HAL_RCC_OscConfig+0x34c>)
 8006348:	400a      	ands	r2, r1
 800634a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7ff fa24 	bl	8005798 <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006356:	f7ff fa1f 	bl	8005798 <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e1d8      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006368:	4b38      	ldr	r3, [pc, #224]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	2380      	movs	r3, #128	@ 0x80
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4013      	ands	r3, r2
 8006372:	d1f0      	bne.n	8006356 <HAL_RCC_OscConfig+0x236>
 8006374:	e000      	b.n	8006378 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006376:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2208      	movs	r2, #8
 800637e:	4013      	ands	r3, r2
 8006380:	d047      	beq.n	8006412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006382:	4b32      	ldr	r3, [pc, #200]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2238      	movs	r2, #56	@ 0x38
 8006388:	4013      	ands	r3, r2
 800638a:	2b18      	cmp	r3, #24
 800638c:	d10a      	bne.n	80063a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800638e:	4b2f      	ldr	r3, [pc, #188]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006392:	2202      	movs	r2, #2
 8006394:	4013      	ands	r3, r2
 8006396:	d03c      	beq.n	8006412 <HAL_RCC_OscConfig+0x2f2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d138      	bne.n	8006412 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e1ba      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d019      	beq.n	80063e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80063ac:	4b27      	ldr	r3, [pc, #156]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80063ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80063b0:	4b26      	ldr	r3, [pc, #152]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80063b2:	2101      	movs	r1, #1
 80063b4:	430a      	orrs	r2, r1
 80063b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7ff f9ee 	bl	8005798 <HAL_GetTick>
 80063bc:	0003      	movs	r3, r0
 80063be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c2:	f7ff f9e9 	bl	8005798 <HAL_GetTick>
 80063c6:	0002      	movs	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e1a2      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063d4:	4b1d      	ldr	r3, [pc, #116]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80063d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d8:	2202      	movs	r2, #2
 80063da:	4013      	ands	r3, r2
 80063dc:	d0f1      	beq.n	80063c2 <HAL_RCC_OscConfig+0x2a2>
 80063de:	e018      	b.n	8006412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80063e0:	4b1a      	ldr	r3, [pc, #104]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80063e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80063e4:	4b19      	ldr	r3, [pc, #100]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 80063e6:	2101      	movs	r1, #1
 80063e8:	438a      	bics	r2, r1
 80063ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7ff f9d4 	bl	8005798 <HAL_GetTick>
 80063f0:	0003      	movs	r3, r0
 80063f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f6:	f7ff f9cf 	bl	8005798 <HAL_GetTick>
 80063fa:	0002      	movs	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e188      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006408:	4b10      	ldr	r3, [pc, #64]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 800640a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800640c:	2202      	movs	r2, #2
 800640e:	4013      	ands	r3, r2
 8006410:	d1f1      	bne.n	80063f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2204      	movs	r2, #4
 8006418:	4013      	ands	r3, r2
 800641a:	d100      	bne.n	800641e <HAL_RCC_OscConfig+0x2fe>
 800641c:	e0c6      	b.n	80065ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800641e:	231f      	movs	r3, #31
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006426:	4b09      	ldr	r3, [pc, #36]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2238      	movs	r2, #56	@ 0x38
 800642c:	4013      	ands	r3, r2
 800642e:	2b20      	cmp	r3, #32
 8006430:	d11e      	bne.n	8006470 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006432:	4b06      	ldr	r3, [pc, #24]	@ (800644c <HAL_RCC_OscConfig+0x32c>)
 8006434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006436:	2202      	movs	r2, #2
 8006438:	4013      	ands	r3, r2
 800643a:	d100      	bne.n	800643e <HAL_RCC_OscConfig+0x31e>
 800643c:	e0b6      	b.n	80065ac <HAL_RCC_OscConfig+0x48c>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d000      	beq.n	8006448 <HAL_RCC_OscConfig+0x328>
 8006446:	e0b1      	b.n	80065ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e166      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
 800644c:	40021000 	.word	0x40021000
 8006450:	fffeffff 	.word	0xfffeffff
 8006454:	fffbffff 	.word	0xfffbffff
 8006458:	ffff80ff 	.word	0xffff80ff
 800645c:	ffffc7ff 	.word	0xffffc7ff
 8006460:	00f42400 	.word	0x00f42400
 8006464:	200000c0 	.word	0x200000c0
 8006468:	200000c4 	.word	0x200000c4
 800646c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006470:	4bac      	ldr	r3, [pc, #688]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006474:	2380      	movs	r3, #128	@ 0x80
 8006476:	055b      	lsls	r3, r3, #21
 8006478:	4013      	ands	r3, r2
 800647a:	d101      	bne.n	8006480 <HAL_RCC_OscConfig+0x360>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <HAL_RCC_OscConfig+0x362>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d011      	beq.n	80064aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006486:	4ba7      	ldr	r3, [pc, #668]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800648a:	4ba6      	ldr	r3, [pc, #664]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800648c:	2180      	movs	r1, #128	@ 0x80
 800648e:	0549      	lsls	r1, r1, #21
 8006490:	430a      	orrs	r2, r1
 8006492:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006494:	4ba3      	ldr	r3, [pc, #652]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006498:	2380      	movs	r3, #128	@ 0x80
 800649a:	055b      	lsls	r3, r3, #21
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80064a2:	231f      	movs	r3, #31
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006728 <HAL_RCC_OscConfig+0x608>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	2380      	movs	r3, #128	@ 0x80
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4013      	ands	r3, r2
 80064b4:	d11a      	bne.n	80064ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006728 <HAL_RCC_OscConfig+0x608>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006728 <HAL_RCC_OscConfig+0x608>)
 80064bc:	2180      	movs	r1, #128	@ 0x80
 80064be:	0049      	lsls	r1, r1, #1
 80064c0:	430a      	orrs	r2, r1
 80064c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80064c4:	f7ff f968 	bl	8005798 <HAL_GetTick>
 80064c8:	0003      	movs	r3, r0
 80064ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ce:	f7ff f963 	bl	8005798 <HAL_GetTick>
 80064d2:	0002      	movs	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e11c      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e0:	4b91      	ldr	r3, [pc, #580]	@ (8006728 <HAL_RCC_OscConfig+0x608>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	2380      	movs	r3, #128	@ 0x80
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4013      	ands	r3, r2
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d106      	bne.n	8006502 <HAL_RCC_OscConfig+0x3e2>
 80064f4:	4b8b      	ldr	r3, [pc, #556]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80064f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064f8:	4b8a      	ldr	r3, [pc, #552]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80064fa:	2101      	movs	r1, #1
 80064fc:	430a      	orrs	r2, r1
 80064fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006500:	e01c      	b.n	800653c <HAL_RCC_OscConfig+0x41c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b05      	cmp	r3, #5
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x404>
 800650a:	4b86      	ldr	r3, [pc, #536]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800650c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800650e:	4b85      	ldr	r3, [pc, #532]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006510:	2104      	movs	r1, #4
 8006512:	430a      	orrs	r2, r1
 8006514:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006516:	4b83      	ldr	r3, [pc, #524]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006518:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800651a:	4b82      	ldr	r3, [pc, #520]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800651c:	2101      	movs	r1, #1
 800651e:	430a      	orrs	r2, r1
 8006520:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006522:	e00b      	b.n	800653c <HAL_RCC_OscConfig+0x41c>
 8006524:	4b7f      	ldr	r3, [pc, #508]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006526:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006528:	4b7e      	ldr	r3, [pc, #504]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800652a:	2101      	movs	r1, #1
 800652c:	438a      	bics	r2, r1
 800652e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006530:	4b7c      	ldr	r3, [pc, #496]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006532:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006534:	4b7b      	ldr	r3, [pc, #492]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006536:	2104      	movs	r1, #4
 8006538:	438a      	bics	r2, r1
 800653a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d014      	beq.n	800656e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7ff f928 	bl	8005798 <HAL_GetTick>
 8006548:	0003      	movs	r3, r0
 800654a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800654c:	e009      	b.n	8006562 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7ff f923 	bl	8005798 <HAL_GetTick>
 8006552:	0002      	movs	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	4a74      	ldr	r2, [pc, #464]	@ (800672c <HAL_RCC_OscConfig+0x60c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e0db      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006562:	4b70      	ldr	r3, [pc, #448]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006566:	2202      	movs	r2, #2
 8006568:	4013      	ands	r3, r2
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x42e>
 800656c:	e013      	b.n	8006596 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7ff f913 	bl	8005798 <HAL_GetTick>
 8006572:	0003      	movs	r3, r0
 8006574:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006576:	e009      	b.n	800658c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006578:	f7ff f90e 	bl	8005798 <HAL_GetTick>
 800657c:	0002      	movs	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	4a6a      	ldr	r2, [pc, #424]	@ (800672c <HAL_RCC_OscConfig+0x60c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e0c6      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800658c:	4b65      	ldr	r3, [pc, #404]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800658e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006590:	2202      	movs	r2, #2
 8006592:	4013      	ands	r3, r2
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006596:	231f      	movs	r3, #31
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d105      	bne.n	80065ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80065a0:	4b60      	ldr	r3, [pc, #384]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80065a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065a4:	4b5f      	ldr	r3, [pc, #380]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80065a6:	4962      	ldr	r1, [pc, #392]	@ (8006730 <HAL_RCC_OscConfig+0x610>)
 80065a8:	400a      	ands	r2, r1
 80065aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d100      	bne.n	80065b6 <HAL_RCC_OscConfig+0x496>
 80065b4:	e0b0      	b.n	8006718 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2238      	movs	r2, #56	@ 0x38
 80065bc:	4013      	ands	r3, r2
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d100      	bne.n	80065c4 <HAL_RCC_OscConfig+0x4a4>
 80065c2:	e078      	b.n	80066b6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d153      	bne.n	8006674 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065cc:	4b55      	ldr	r3, [pc, #340]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4b54      	ldr	r3, [pc, #336]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80065d2:	4958      	ldr	r1, [pc, #352]	@ (8006734 <HAL_RCC_OscConfig+0x614>)
 80065d4:	400a      	ands	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7ff f8de 	bl	8005798 <HAL_GetTick>
 80065dc:	0003      	movs	r3, r0
 80065de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e2:	f7ff f8d9 	bl	8005798 <HAL_GetTick>
 80065e6:	0002      	movs	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e092      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	2380      	movs	r3, #128	@ 0x80
 80065fa:	049b      	lsls	r3, r3, #18
 80065fc:	4013      	ands	r3, r2
 80065fe:	d1f0      	bne.n	80065e2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006600:	4b48      	ldr	r3, [pc, #288]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a4c      	ldr	r2, [pc, #304]	@ (8006738 <HAL_RCC_OscConfig+0x618>)
 8006606:	4013      	ands	r3, r2
 8006608:	0019      	movs	r1, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006626:	431a      	orrs	r2, r3
 8006628:	4b3e      	ldr	r3, [pc, #248]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800662a:	430a      	orrs	r2, r1
 800662c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b3c      	ldr	r3, [pc, #240]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006634:	2180      	movs	r1, #128	@ 0x80
 8006636:	0449      	lsls	r1, r1, #17
 8006638:	430a      	orrs	r2, r1
 800663a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800663c:	4b39      	ldr	r3, [pc, #228]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	4b38      	ldr	r3, [pc, #224]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006642:	2180      	movs	r1, #128	@ 0x80
 8006644:	0549      	lsls	r1, r1, #21
 8006646:	430a      	orrs	r2, r1
 8006648:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7ff f8a5 	bl	8005798 <HAL_GetTick>
 800664e:	0003      	movs	r3, r0
 8006650:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006654:	f7ff f8a0 	bl	8005798 <HAL_GetTick>
 8006658:	0002      	movs	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e059      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006666:	4b2f      	ldr	r3, [pc, #188]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	049b      	lsls	r3, r3, #18
 800666e:	4013      	ands	r3, r2
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0x534>
 8006672:	e051      	b.n	8006718 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006674:	4b2b      	ldr	r3, [pc, #172]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b2a      	ldr	r3, [pc, #168]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800667a:	492e      	ldr	r1, [pc, #184]	@ (8006734 <HAL_RCC_OscConfig+0x614>)
 800667c:	400a      	ands	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006680:	f7ff f88a 	bl	8005798 <HAL_GetTick>
 8006684:	0003      	movs	r3, r0
 8006686:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668a:	f7ff f885 	bl	8005798 <HAL_GetTick>
 800668e:	0002      	movs	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e03e      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800669c:	4b21      	ldr	r3, [pc, #132]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	049b      	lsls	r3, r3, #18
 80066a4:	4013      	ands	r3, r2
 80066a6:	d1f0      	bne.n	800668a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80066a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80066ae:	4923      	ldr	r1, [pc, #140]	@ (800673c <HAL_RCC_OscConfig+0x61c>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	60da      	str	r2, [r3, #12]
 80066b4:	e030      	b.n	8006718 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e02b      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80066c2:	4b18      	ldr	r3, [pc, #96]	@ (8006724 <HAL_RCC_OscConfig+0x604>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2203      	movs	r2, #3
 80066cc:	401a      	ands	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d11e      	bne.n	8006714 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2270      	movs	r2, #112	@ 0x70
 80066da:	401a      	ands	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d117      	bne.n	8006714 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	23fe      	movs	r3, #254	@ 0xfe
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	401a      	ands	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d10e      	bne.n	8006714 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	23f8      	movs	r3, #248	@ 0xf8
 80066fa:	039b      	lsls	r3, r3, #14
 80066fc:	401a      	ands	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d106      	bne.n	8006714 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	0f5b      	lsrs	r3, r3, #29
 800670a:	075a      	lsls	r2, r3, #29
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b008      	add	sp, #32
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
 800672c:	00001388 	.word	0x00001388
 8006730:	efffffff 	.word	0xefffffff
 8006734:	feffffff 	.word	0xfeffffff
 8006738:	1fc1808c 	.word	0x1fc1808c
 800673c:	effefffc 	.word	0xeffefffc

08006740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0e9      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006754:	4b76      	ldr	r3, [pc, #472]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2207      	movs	r2, #7
 800675a:	4013      	ands	r3, r2
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d91e      	bls.n	80067a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b73      	ldr	r3, [pc, #460]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2207      	movs	r2, #7
 8006768:	4393      	bics	r3, r2
 800676a:	0019      	movs	r1, r3
 800676c:	4b70      	ldr	r3, [pc, #448]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006774:	f7ff f810 	bl	8005798 <HAL_GetTick>
 8006778:	0003      	movs	r3, r0
 800677a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800677c:	e009      	b.n	8006792 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800677e:	f7ff f80b 	bl	8005798 <HAL_GetTick>
 8006782:	0002      	movs	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	4a6a      	ldr	r2, [pc, #424]	@ (8006934 <HAL_RCC_ClockConfig+0x1f4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e0ca      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006792:	4b67      	ldr	r3, [pc, #412]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2207      	movs	r2, #7
 8006798:	4013      	ands	r3, r2
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d1ee      	bne.n	800677e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2202      	movs	r2, #2
 80067a6:	4013      	ands	r3, r2
 80067a8:	d015      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2204      	movs	r2, #4
 80067b0:	4013      	ands	r3, r2
 80067b2:	d006      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80067b4:	4b60      	ldr	r3, [pc, #384]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80067ba:	21e0      	movs	r1, #224	@ 0xe0
 80067bc:	01c9      	lsls	r1, r1, #7
 80067be:	430a      	orrs	r2, r1
 80067c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c2:	4b5d      	ldr	r3, [pc, #372]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	4a5d      	ldr	r2, [pc, #372]	@ (800693c <HAL_RCC_ClockConfig+0x1fc>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	0019      	movs	r1, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	4b59      	ldr	r3, [pc, #356]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80067d2:	430a      	orrs	r2, r1
 80067d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	4013      	ands	r3, r2
 80067de:	d057      	beq.n	8006890 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d107      	bne.n	80067f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067e8:	4b53      	ldr	r3, [pc, #332]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	2380      	movs	r3, #128	@ 0x80
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	4013      	ands	r3, r2
 80067f2:	d12b      	bne.n	800684c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e097      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d107      	bne.n	8006810 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006800:	4b4d      	ldr	r3, [pc, #308]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	2380      	movs	r3, #128	@ 0x80
 8006806:	049b      	lsls	r3, r3, #18
 8006808:	4013      	ands	r3, r2
 800680a:	d11f      	bne.n	800684c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e08b      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d107      	bne.n	8006828 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006818:	4b47      	ldr	r3, [pc, #284]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	2380      	movs	r3, #128	@ 0x80
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4013      	ands	r3, r2
 8006822:	d113      	bne.n	800684c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e07f      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d106      	bne.n	800683e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006830:	4b41      	ldr	r3, [pc, #260]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 8006832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006834:	2202      	movs	r2, #2
 8006836:	4013      	ands	r3, r2
 8006838:	d108      	bne.n	800684c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e074      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800683e:	4b3e      	ldr	r3, [pc, #248]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 8006840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006842:	2202      	movs	r2, #2
 8006844:	4013      	ands	r3, r2
 8006846:	d101      	bne.n	800684c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e06d      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800684c:	4b3a      	ldr	r3, [pc, #232]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2207      	movs	r2, #7
 8006852:	4393      	bics	r3, r2
 8006854:	0019      	movs	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	4b37      	ldr	r3, [pc, #220]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006860:	f7fe ff9a 	bl	8005798 <HAL_GetTick>
 8006864:	0003      	movs	r3, r0
 8006866:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006868:	e009      	b.n	800687e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686a:	f7fe ff95 	bl	8005798 <HAL_GetTick>
 800686e:	0002      	movs	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	4a2f      	ldr	r2, [pc, #188]	@ (8006934 <HAL_RCC_ClockConfig+0x1f4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e054      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	4b2e      	ldr	r3, [pc, #184]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2238      	movs	r2, #56	@ 0x38
 8006884:	401a      	ands	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	429a      	cmp	r2, r3
 800688e:	d1ec      	bne.n	800686a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006890:	4b27      	ldr	r3, [pc, #156]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2207      	movs	r2, #7
 8006896:	4013      	ands	r3, r2
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d21e      	bcs.n	80068dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b24      	ldr	r3, [pc, #144]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2207      	movs	r2, #7
 80068a4:	4393      	bics	r3, r2
 80068a6:	0019      	movs	r1, r3
 80068a8:	4b21      	ldr	r3, [pc, #132]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068b0:	f7fe ff72 	bl	8005798 <HAL_GetTick>
 80068b4:	0003      	movs	r3, r0
 80068b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068b8:	e009      	b.n	80068ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ba:	f7fe ff6d 	bl	8005798 <HAL_GetTick>
 80068be:	0002      	movs	r2, r0
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006934 <HAL_RCC_ClockConfig+0x1f4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e02c      	b.n	8006928 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068ce:	4b18      	ldr	r3, [pc, #96]	@ (8006930 <HAL_RCC_ClockConfig+0x1f0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2207      	movs	r2, #7
 80068d4:	4013      	ands	r3, r2
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d1ee      	bne.n	80068ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2204      	movs	r2, #4
 80068e2:	4013      	ands	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80068e6:	4b14      	ldr	r3, [pc, #80]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4a15      	ldr	r2, [pc, #84]	@ (8006940 <HAL_RCC_ClockConfig+0x200>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80068fa:	f000 f829 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80068fe:	0001      	movs	r1, r0
 8006900:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <HAL_RCC_ClockConfig+0x1f8>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	0a1b      	lsrs	r3, r3, #8
 8006906:	220f      	movs	r2, #15
 8006908:	401a      	ands	r2, r3
 800690a:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <HAL_RCC_ClockConfig+0x204>)
 800690c:	0092      	lsls	r2, r2, #2
 800690e:	58d3      	ldr	r3, [r2, r3]
 8006910:	221f      	movs	r2, #31
 8006912:	4013      	ands	r3, r2
 8006914:	000a      	movs	r2, r1
 8006916:	40da      	lsrs	r2, r3
 8006918:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <HAL_RCC_ClockConfig+0x208>)
 800691a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800691c:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <HAL_RCC_ClockConfig+0x20c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0018      	movs	r0, r3
 8006922:	f7fe fedd 	bl	80056e0 <HAL_InitTick>
 8006926:	0003      	movs	r3, r0
}
 8006928:	0018      	movs	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	b004      	add	sp, #16
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40022000 	.word	0x40022000
 8006934:	00001388 	.word	0x00001388
 8006938:	40021000 	.word	0x40021000
 800693c:	fffff0ff 	.word	0xfffff0ff
 8006940:	ffff8fff 	.word	0xffff8fff
 8006944:	08007a40 	.word	0x08007a40
 8006948:	200000c0 	.word	0x200000c0
 800694c:	200000c4 	.word	0x200000c4

08006950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006956:	4b3c      	ldr	r3, [pc, #240]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2238      	movs	r2, #56	@ 0x38
 800695c:	4013      	ands	r3, r2
 800695e:	d10f      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006960:	4b39      	ldr	r3, [pc, #228]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	0adb      	lsrs	r3, r3, #11
 8006966:	2207      	movs	r2, #7
 8006968:	4013      	ands	r3, r2
 800696a:	2201      	movs	r2, #1
 800696c:	409a      	lsls	r2, r3
 800696e:	0013      	movs	r3, r2
 8006970:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	4835      	ldr	r0, [pc, #212]	@ (8006a4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006976:	f7fa ffc3 	bl	8001900 <__udivsi3>
 800697a:	0003      	movs	r3, r0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e05d      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006980:	4b31      	ldr	r3, [pc, #196]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2238      	movs	r2, #56	@ 0x38
 8006986:	4013      	ands	r3, r2
 8006988:	2b08      	cmp	r3, #8
 800698a:	d102      	bne.n	8006992 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800698c:	4b30      	ldr	r3, [pc, #192]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0x100>)
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e054      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006992:	4b2d      	ldr	r3, [pc, #180]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2238      	movs	r2, #56	@ 0x38
 8006998:	4013      	ands	r3, r2
 800699a:	2b10      	cmp	r3, #16
 800699c:	d138      	bne.n	8006a10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800699e:	4b2a      	ldr	r3, [pc, #168]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2203      	movs	r2, #3
 80069a4:	4013      	ands	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a8:	4b27      	ldr	r3, [pc, #156]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	2207      	movs	r2, #7
 80069b0:	4013      	ands	r3, r2
 80069b2:	3301      	adds	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10d      	bne.n	80069d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	4824      	ldr	r0, [pc, #144]	@ (8006a50 <HAL_RCC_GetSysClockFreq+0x100>)
 80069c0:	f7fa ff9e 	bl	8001900 <__udivsi3>
 80069c4:	0003      	movs	r3, r0
 80069c6:	0019      	movs	r1, r3
 80069c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	0a1b      	lsrs	r3, r3, #8
 80069ce:	227f      	movs	r2, #127	@ 0x7f
 80069d0:	4013      	ands	r3, r2
 80069d2:	434b      	muls	r3, r1
 80069d4:	617b      	str	r3, [r7, #20]
        break;
 80069d6:	e00d      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	481c      	ldr	r0, [pc, #112]	@ (8006a4c <HAL_RCC_GetSysClockFreq+0xfc>)
 80069dc:	f7fa ff90 	bl	8001900 <__udivsi3>
 80069e0:	0003      	movs	r3, r0
 80069e2:	0019      	movs	r1, r3
 80069e4:	4b18      	ldr	r3, [pc, #96]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	227f      	movs	r2, #127	@ 0x7f
 80069ec:	4013      	ands	r3, r2
 80069ee:	434b      	muls	r3, r1
 80069f0:	617b      	str	r3, [r7, #20]
        break;
 80069f2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80069f4:	4b14      	ldr	r3, [pc, #80]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	0f5b      	lsrs	r3, r3, #29
 80069fa:	2207      	movs	r2, #7
 80069fc:	4013      	ands	r3, r2
 80069fe:	3301      	adds	r3, #1
 8006a00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	6978      	ldr	r0, [r7, #20]
 8006a06:	f7fa ff7b 	bl	8001900 <__udivsi3>
 8006a0a:	0003      	movs	r3, r0
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	e015      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a10:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2238      	movs	r2, #56	@ 0x38
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d103      	bne.n	8006a24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006a1c:	2380      	movs	r3, #128	@ 0x80
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	e00b      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006a24:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2238      	movs	r2, #56	@ 0x38
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b18      	cmp	r3, #24
 8006a2e:	d103      	bne.n	8006a38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006a30:	23fa      	movs	r3, #250	@ 0xfa
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e001      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a3c:	693b      	ldr	r3, [r7, #16]
}
 8006a3e:	0018      	movs	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b006      	add	sp, #24
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	00f42400 	.word	0x00f42400
 8006a50:	007a1200 	.word	0x007a1200

08006a54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	435b      	muls	r3, r3
 8006a68:	001a      	movs	r2, r3
 8006a6a:	0013      	movs	r3, r2
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	189b      	adds	r3, r3, r2
 8006a70:	43db      	mvns	r3, r3
 8006a72:	400b      	ands	r3, r1
 8006a74:	001a      	movs	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	435b      	muls	r3, r3
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	434b      	muls	r3, r1
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	46c0      	nop			@ (mov r8, r8)
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b004      	add	sp, #16
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	43d2      	mvns	r2, r2
 8006aa0:	401a      	ands	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	434b      	muls	r3, r1
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	605a      	str	r2, [r3, #4]
}
 8006aae:	46c0      	nop			@ (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b004      	add	sp, #16
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6899      	ldr	r1, [r3, #8]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	435b      	muls	r3, r3
 8006aca:	001a      	movs	r2, r3
 8006acc:	0013      	movs	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	400b      	ands	r3, r1
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	435b      	muls	r3, r3
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	434b      	muls	r3, r1
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	609a      	str	r2, [r3, #8]
}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b004      	add	sp, #16
 8006aec:	bd80      	pop	{r7, pc}

08006aee <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68d9      	ldr	r1, [r3, #12]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	435b      	muls	r3, r3
 8006b02:	001a      	movs	r2, r3
 8006b04:	0013      	movs	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	189b      	adds	r3, r3, r2
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	400b      	ands	r3, r1
 8006b0e:	001a      	movs	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	435b      	muls	r3, r3
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	434b      	muls	r3, r1
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	60da      	str	r2, [r3, #12]
}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b004      	add	sp, #16
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a19      	ldr	r1, [r3, #32]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	435b      	muls	r3, r3
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4353      	muls	r3, r2
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	435a      	muls	r2, r3
 8006b42:	0013      	movs	r3, r2
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	400b      	ands	r3, r1
 8006b4c:	001a      	movs	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	435b      	muls	r3, r3
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	434b      	muls	r3, r1
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	434b      	muls	r3, r1
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	434b      	muls	r3, r1
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8006b64:	46c0      	nop			@ (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b004      	add	sp, #16
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	0a12      	lsrs	r2, r2, #8
 8006b84:	4353      	muls	r3, r2
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0a12      	lsrs	r2, r2, #8
 8006b8a:	4353      	muls	r3, r2
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0a12      	lsrs	r2, r2, #8
 8006b90:	435a      	muls	r2, r3
 8006b92:	0013      	movs	r3, r2
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	400b      	ands	r3, r1
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	0a09      	lsrs	r1, r1, #8
 8006ba6:	434b      	muls	r3, r1
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	0a09      	lsrs	r1, r1, #8
 8006bac:	434b      	muls	r3, r1
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	0a09      	lsrs	r1, r1, #8
 8006bb2:	434b      	muls	r3, r1
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	434b      	muls	r3, r1
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b004      	add	sp, #16
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006bd4:	e047      	b.n	8006c66 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2101      	movs	r1, #1
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4091      	lsls	r1, r2
 8006be0:	000a      	movs	r2, r1
 8006be2:	4013      	ands	r3, r2
 8006be4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d039      	beq.n	8006c60 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d003      	beq.n	8006bfc <LL_GPIO_Init+0x36>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d10d      	bne.n	8006c18 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7ff ff56 	bl	8006ab6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7ff ff3a 	bl	8006a8c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7ff ff64 	bl	8006aee <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d111      	bne.n	8006c52 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2bff      	cmp	r3, #255	@ 0xff
 8006c32:	d807      	bhi.n	8006c44 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f7ff ff72 	bl	8006b26 <LL_GPIO_SetAFPin_0_7>
 8006c42:	e006      	b.n	8006c52 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7ff ff8d 	bl	8006b6c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f7ff fefa 	bl	8006a54 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	40da      	lsrs	r2, r3
 8006c6e:	1e13      	subs	r3, r2, #0
 8006c70:	d1b1      	bne.n	8006bd6 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b004      	add	sp, #16
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <LL_I2C_Enable>:
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	601a      	str	r2, [r3, #0]
}
 8006c90:	46c0      	nop			@ (mov r8, r8)
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b002      	add	sp, #8
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <LL_I2C_Disable>:
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	4393      	bics	r3, r2
 8006ca8:	001a      	movs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
}
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b002      	add	sp, #8
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <LL_I2C_ConfigFilters>:
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a06      	ldr	r2, [pc, #24]	@ (8006ce4 <LL_I2C_ConfigFilters+0x2c>)
 8006cca:	401a      	ands	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0219      	lsls	r1, r3, #8
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b004      	add	sp, #16
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	ffffe0ff 	.word	0xffffe0ff

08006ce8 <LL_I2C_SetOwnAddress1>:
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	0adb      	lsrs	r3, r3, #11
 8006cfa:	02da      	lsls	r2, r3, #11
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	430b      	orrs	r3, r1
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	46c0      	nop			@ (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b004      	add	sp, #16
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <LL_I2C_EnableOwnAddress1>:
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2280      	movs	r2, #128	@ 0x80
 8006d1e:	0212      	lsls	r2, r2, #8
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	609a      	str	r2, [r3, #8]
}
 8006d26:	46c0      	nop			@ (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b002      	add	sp, #8
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <LL_I2C_DisableOwnAddress1>:
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a03      	ldr	r2, [pc, #12]	@ (8006d4c <LL_I2C_DisableOwnAddress1+0x1c>)
 8006d3e:	401a      	ands	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	609a      	str	r2, [r3, #8]
}
 8006d44:	46c0      	nop			@ (mov r8, r8)
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	ffff7fff 	.word	0xffff7fff

08006d50 <LL_I2C_SetTiming>:
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	611a      	str	r2, [r3, #16]
}
 8006d60:	46c0      	nop			@ (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <LL_I2C_SetMode>:
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a05      	ldr	r2, [pc, #20]	@ (8006d8c <LL_I2C_SetMode+0x24>)
 8006d78:	401a      	ands	r2, r3
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	ffcfffff 	.word	0xffcfffff

08006d90 <LL_I2C_AcknowledgeNextData>:
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4a05      	ldr	r2, [pc, #20]	@ (8006db4 <LL_I2C_AcknowledgeNextData+0x24>)
 8006da0:	401a      	ands	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	605a      	str	r2, [r3, #4]
}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	ffff7fff 	.word	0xffff7fff

08006db8 <LL_APB1_GRP1_ForceReset>:
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR1, Periphs);
 8006dc0:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <LL_APB1_GRP1_ForceReset+0x1c>)
 8006dc2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006dc4:	4b03      	ldr	r3, [pc, #12]	@ (8006dd4 <LL_APB1_GRP1_ForceReset+0x1c>)
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006dcc:	46c0      	nop			@ (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40021000 	.word	0x40021000

08006dd8 <LL_APB1_GRP1_ReleaseReset>:
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <LL_APB1_GRP1_ReleaseReset+0x20>)
 8006de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	43d9      	mvns	r1, r3
 8006de8:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <LL_APB1_GRP1_ReleaseReset+0x20>)
 8006dea:	400a      	ands	r2, r1
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b002      	add	sp, #8
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	40021000 	.word	0x40021000

08006dfc <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are de-initialized
  *          - ERROR: I2C registers are not de-initialized
  */
ErrorStatus LL_I2C_DeInit(const I2C_TypeDef *I2Cx)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006e04:	230f      	movs	r3, #15
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a14      	ldr	r2, [pc, #80]	@ (8006e60 <LL_I2C_DeInit+0x64>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10a      	bne.n	8006e2a <LL_I2C_DeInit+0x2e>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 8006e14:	2380      	movs	r3, #128	@ 0x80
 8006e16:	039b      	lsls	r3, r3, #14
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7ff ffcd 	bl	8006db8 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 8006e1e:	2380      	movs	r3, #128	@ 0x80
 8006e20:	039b      	lsls	r3, r3, #14
 8006e22:	0018      	movs	r0, r3
 8006e24:	f7ff ffd8 	bl	8006dd8 <LL_APB1_GRP1_ReleaseReset>
 8006e28:	e012      	b.n	8006e50 <LL_I2C_DeInit+0x54>
  }
  else if (I2Cx == I2C2)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e64 <LL_I2C_DeInit+0x68>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d10a      	bne.n	8006e48 <LL_I2C_DeInit+0x4c>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 8006e32:	2380      	movs	r3, #128	@ 0x80
 8006e34:	03db      	lsls	r3, r3, #15
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7ff ffbe 	bl	8006db8 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 8006e3c:	2380      	movs	r3, #128	@ 0x80
 8006e3e:	03db      	lsls	r3, r3, #15
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7ff ffc9 	bl	8006dd8 <LL_APB1_GRP1_ReleaseReset>
 8006e46:	e003      	b.n	8006e50 <LL_I2C_DeInit+0x54>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
  }
#endif /* I2C3 */
  else
  {
    status = ERROR;
 8006e48:	230f      	movs	r3, #15
 8006e4a:	18fb      	adds	r3, r7, r3
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006e50:	230f      	movs	r3, #15
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	781b      	ldrb	r3, [r3, #0]
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b004      	add	sp, #16
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	40005400 	.word	0x40005400
 8006e64:	40005800 	.word	0x40005800

08006e68 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff ff0f 	bl	8006c98 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6899      	ldr	r1, [r3, #8]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff ff17 	bl	8006cb8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0011      	movs	r1, r2
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7ff ff5c 	bl	8006d50 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7ff feee 	bl	8006c7c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff ff44 	bl	8006d30 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6919      	ldr	r1, [r3, #16]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7ff ff18 	bl	8006ce8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7ff ff24 	bl	8006d10 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	0011      	movs	r1, r2
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f7ff ff49 	bl	8006d68 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	0011      	movs	r1, r2
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f7ff ff56 	bl	8006d90 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b002      	add	sp, #8
 8006eec:	bd80      	pop	{r7, pc}

08006eee <LL_TIM_SetPrescaler>:
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b002      	add	sp, #8
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <LL_TIM_SetAutoReload>:
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006f16:	46c0      	nop			@ (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b002      	add	sp, #8
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <LL_TIM_SetRepetitionCounter>:
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f2e:	46c0      	nop			@ (mov r8, r8)
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b002      	add	sp, #8
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <LL_TIM_OC_SetCompareCH1>:
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006f46:	46c0      	nop			@ (mov r8, r8)
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b002      	add	sp, #8
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <LL_TIM_OC_SetCompareCH2>:
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b002      	add	sp, #8
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <LL_TIM_OC_SetCompareCH3>:
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b002      	add	sp, #8
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <LL_TIM_OC_SetCompareCH4>:
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006f8e:	46c0      	nop			@ (mov r8, r8)
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b002      	add	sp, #8
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <LL_TIM_OC_SetCompareCH5>:
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b002      	add	sp, #8
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <LL_TIM_OC_SetCompareCH6>:
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	615a      	str	r2, [r3, #20]
}
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b002      	add	sp, #8
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80070ac <LL_TIM_Init+0xc4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <LL_TIM_Init+0x20>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a2b      	ldr	r2, [pc, #172]	@ (80070b0 <LL_TIM_Init+0xc8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d107      	bne.n	8007018 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2270      	movs	r2, #112	@ 0x70
 800700c:	4393      	bics	r3, r2
 800700e:	001a      	movs	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a24      	ldr	r2, [pc, #144]	@ (80070ac <LL_TIM_Init+0xc4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00f      	beq.n	8007040 <LL_TIM_Init+0x58>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a23      	ldr	r2, [pc, #140]	@ (80070b0 <LL_TIM_Init+0xc8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00b      	beq.n	8007040 <LL_TIM_Init+0x58>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a22      	ldr	r2, [pc, #136]	@ (80070b4 <LL_TIM_Init+0xcc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d007      	beq.n	8007040 <LL_TIM_Init+0x58>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a21      	ldr	r2, [pc, #132]	@ (80070b8 <LL_TIM_Init+0xd0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <LL_TIM_Init+0x58>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a20      	ldr	r2, [pc, #128]	@ (80070bc <LL_TIM_Init+0xd4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d106      	bne.n	800704e <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a1f      	ldr	r2, [pc, #124]	@ (80070c0 <LL_TIM_Init+0xd8>)
 8007044:	401a      	ands	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0011      	movs	r1, r2
 800705c:	0018      	movs	r0, r3
 800705e:	f7ff ff52 	bl	8006f06 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	001a      	movs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0011      	movs	r1, r2
 800706c:	0018      	movs	r0, r3
 800706e:	f7ff ff3e 	bl	8006eee <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a0d      	ldr	r2, [pc, #52]	@ (80070ac <LL_TIM_Init+0xc4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <LL_TIM_Init+0xa2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a0e      	ldr	r2, [pc, #56]	@ (80070b8 <LL_TIM_Init+0xd0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <LL_TIM_Init+0xa2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a0d      	ldr	r2, [pc, #52]	@ (80070bc <LL_TIM_Init+0xd4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d106      	bne.n	8007098 <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	0011      	movs	r1, r2
 8007092:	0018      	movs	r0, r3
 8007094:	f7ff ff43 	bl	8006f1e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f7ff ff95 	bl	8006fca <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	0018      	movs	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b004      	add	sp, #16
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40002000 	.word	0x40002000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800
 80070c0:	fffffcff 	.word	0xfffffcff

080070c4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80070d0:	2317      	movs	r3, #23
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	2380      	movs	r3, #128	@ 0x80
 80070dc:	035b      	lsls	r3, r3, #13
 80070de:	429a      	cmp	r2, r3
 80070e0:	d060      	beq.n	80071a4 <LL_TIM_OC_Init+0xe0>
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	035b      	lsls	r3, r3, #13
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d866      	bhi.n	80071ba <LL_TIM_OC_Init+0xf6>
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	2380      	movs	r3, #128	@ 0x80
 80070f0:	025b      	lsls	r3, r3, #9
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d04b      	beq.n	800718e <LL_TIM_OC_Init+0xca>
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	2380      	movs	r3, #128	@ 0x80
 80070fa:	025b      	lsls	r3, r3, #9
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d85c      	bhi.n	80071ba <LL_TIM_OC_Init+0xf6>
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	2380      	movs	r3, #128	@ 0x80
 8007104:	015b      	lsls	r3, r3, #5
 8007106:	429a      	cmp	r2, r3
 8007108:	d036      	beq.n	8007178 <LL_TIM_OC_Init+0xb4>
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	2380      	movs	r3, #128	@ 0x80
 800710e:	015b      	lsls	r3, r3, #5
 8007110:	429a      	cmp	r2, r3
 8007112:	d852      	bhi.n	80071ba <LL_TIM_OC_Init+0xf6>
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	2380      	movs	r3, #128	@ 0x80
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	429a      	cmp	r2, r3
 800711c:	d021      	beq.n	8007162 <LL_TIM_OC_Init+0x9e>
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	2380      	movs	r3, #128	@ 0x80
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	429a      	cmp	r2, r3
 8007126:	d848      	bhi.n	80071ba <LL_TIM_OC_Init+0xf6>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d003      	beq.n	8007136 <LL_TIM_OC_Init+0x72>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b10      	cmp	r3, #16
 8007132:	d00b      	beq.n	800714c <LL_TIM_OC_Init+0x88>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007134:	e041      	b.n	80071ba <LL_TIM_OC_Init+0xf6>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007136:	2317      	movs	r3, #23
 8007138:	18fc      	adds	r4, r7, r3
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	0011      	movs	r1, r2
 8007140:	0018      	movs	r0, r3
 8007142:	f000 f8cb 	bl	80072dc <OC1Config>
 8007146:	0003      	movs	r3, r0
 8007148:	7023      	strb	r3, [r4, #0]
      break;
 800714a:	e037      	b.n	80071bc <LL_TIM_OC_Init+0xf8>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800714c:	2317      	movs	r3, #23
 800714e:	18fc      	adds	r4, r7, r3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f000 f93e 	bl	80073d8 <OC2Config>
 800715c:	0003      	movs	r3, r0
 800715e:	7023      	strb	r3, [r4, #0]
      break;
 8007160:	e02c      	b.n	80071bc <LL_TIM_OC_Init+0xf8>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8007162:	2317      	movs	r3, #23
 8007164:	18fc      	adds	r4, r7, r3
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	0011      	movs	r1, r2
 800716c:	0018      	movs	r0, r3
 800716e:	f000 f9b7 	bl	80074e0 <OC3Config>
 8007172:	0003      	movs	r3, r0
 8007174:	7023      	strb	r3, [r4, #0]
      break;
 8007176:	e021      	b.n	80071bc <LL_TIM_OC_Init+0xf8>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8007178:	2317      	movs	r3, #23
 800717a:	18fc      	adds	r4, r7, r3
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	0011      	movs	r1, r2
 8007182:	0018      	movs	r0, r3
 8007184:	f000 fa30 	bl	80075e8 <OC4Config>
 8007188:	0003      	movs	r3, r0
 800718a:	7023      	strb	r3, [r4, #0]
      break;
 800718c:	e016      	b.n	80071bc <LL_TIM_OC_Init+0xf8>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800718e:	2317      	movs	r3, #23
 8007190:	18fc      	adds	r4, r7, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	0011      	movs	r1, r2
 8007198:	0018      	movs	r0, r3
 800719a:	f000 fa8f 	bl	80076bc <OC5Config>
 800719e:	0003      	movs	r3, r0
 80071a0:	7023      	strb	r3, [r4, #0]
      break;
 80071a2:	e00b      	b.n	80071bc <LL_TIM_OC_Init+0xf8>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80071a4:	2317      	movs	r3, #23
 80071a6:	18fc      	adds	r4, r7, r3
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	0011      	movs	r1, r2
 80071ae:	0018      	movs	r0, r3
 80071b0:	f000 fae0 	bl	8007774 <OC6Config>
 80071b4:	0003      	movs	r3, r0
 80071b6:	7023      	strb	r3, [r4, #0]
      break;
 80071b8:	e000      	b.n	80071bc <LL_TIM_OC_Init+0xf8>
      break;
 80071ba:	46c0      	nop			@ (mov r8, r8)
  }

  return result;
 80071bc:	2317      	movs	r3, #23
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b007      	add	sp, #28
 80071c8:	bd90      	pop	{r4, r7, pc}
	...

080071cc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	22ff      	movs	r2, #255	@ 0xff
 80071de:	4393      	bics	r3, r2
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	7b12      	ldrb	r2, [r2, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a2f      	ldr	r2, [pc, #188]	@ (80072a8 <LL_TIM_BDTR_Init+0xdc>)
 80071ec:	401a      	ands	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a2c      	ldr	r2, [pc, #176]	@ (80072ac <LL_TIM_BDTR_Init+0xe0>)
 80071fa:	401a      	ands	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a2a      	ldr	r2, [pc, #168]	@ (80072b0 <LL_TIM_BDTR_Init+0xe4>)
 8007208:	401a      	ands	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a27      	ldr	r2, [pc, #156]	@ (80072b4 <LL_TIM_BDTR_Init+0xe8>)
 8007216:	4013      	ands	r3, r2
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	89d2      	ldrh	r2, [r2, #14]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a25      	ldr	r2, [pc, #148]	@ (80072b8 <LL_TIM_BDTR_Init+0xec>)
 8007224:	401a      	ands	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4a22      	ldr	r2, [pc, #136]	@ (80072bc <LL_TIM_BDTR_Init+0xf0>)
 8007232:	401a      	ands	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a20      	ldr	r2, [pc, #128]	@ (80072c0 <LL_TIM_BDTR_Init+0xf4>)
 8007240:	401a      	ands	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a1d      	ldr	r2, [pc, #116]	@ (80072c4 <LL_TIM_BDTR_Init+0xf8>)
 800724e:	401a      	ands	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <LL_TIM_BDTR_Init+0xfc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d11b      	bne.n	8007298 <LL_TIM_BDTR_Init+0xcc>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a1a      	ldr	r2, [pc, #104]	@ (80072cc <LL_TIM_BDTR_Init+0x100>)
 8007264:	401a      	ands	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a17      	ldr	r2, [pc, #92]	@ (80072d0 <LL_TIM_BDTR_Init+0x104>)
 8007272:	401a      	ands	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <LL_TIM_BDTR_Init+0x108>)
 8007280:	401a      	ands	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a12      	ldr	r2, [pc, #72]	@ (80072d8 <LL_TIM_BDTR_Init+0x10c>)
 800728e:	401a      	ands	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b004      	add	sp, #16
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	fffffcff 	.word	0xfffffcff
 80072ac:	fffffbff 	.word	0xfffffbff
 80072b0:	fffff7ff 	.word	0xfffff7ff
 80072b4:	ffffefff 	.word	0xffffefff
 80072b8:	ffffdfff 	.word	0xffffdfff
 80072bc:	ffffbfff 	.word	0xffffbfff
 80072c0:	fff0ffff 	.word	0xfff0ffff
 80072c4:	efffffff 	.word	0xefffffff
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	ff0fffff 	.word	0xff0fffff
 80072d0:	feffffff 	.word	0xfeffffff
 80072d4:	fdffffff 	.word	0xfdffffff
 80072d8:	dfffffff 	.word	0xdfffffff

080072dc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	2201      	movs	r2, #1
 80072ec:	4393      	bics	r3, r2
 80072ee:	001a      	movs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2203      	movs	r2, #3
 800730a:	4393      	bics	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a2b      	ldr	r2, [pc, #172]	@ (80073c0 <OC1Config+0xe4>)
 8007312:	401a      	ands	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2202      	movs	r2, #2
 8007320:	4393      	bics	r3, r2
 8007322:	001a      	movs	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2201      	movs	r2, #1
 8007330:	4393      	bics	r3, r2
 8007332:	001a      	movs	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a21      	ldr	r2, [pc, #132]	@ (80073c4 <OC1Config+0xe8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <OC1Config+0x78>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a20      	ldr	r2, [pc, #128]	@ (80073c8 <OC1Config+0xec>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <OC1Config+0x78>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a1f      	ldr	r2, [pc, #124]	@ (80073cc <OC1Config+0xf0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d120      	bne.n	8007396 <OC1Config+0xba>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2208      	movs	r2, #8
 8007358:	4393      	bics	r3, r2
 800735a:	001a      	movs	r2, r3
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2204      	movs	r2, #4
 800736a:	4393      	bics	r3, r2
 800736c:	001a      	movs	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4a15      	ldr	r2, [pc, #84]	@ (80073d0 <OC1Config+0xf4>)
 800737c:	401a      	ands	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	4313      	orrs	r3, r2
 8007384:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4a12      	ldr	r2, [pc, #72]	@ (80073d4 <OC1Config+0xf8>)
 800738a:	401a      	ands	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	0011      	movs	r1, r2
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7ff fdc3 	bl	8006f36 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b006      	add	sp, #24
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	fffeff8f 	.word	0xfffeff8f
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800
 80073d0:	fffffeff 	.word	0xfffffeff
 80073d4:	fffffdff 	.word	0xfffffdff

080073d8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	2210      	movs	r2, #16
 80073e8:	4393      	bics	r3, r2
 80073ea:	001a      	movs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4a2f      	ldr	r2, [pc, #188]	@ (80074c4 <OC2Config+0xec>)
 8007406:	4013      	ands	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a2e      	ldr	r2, [pc, #184]	@ (80074c8 <OC2Config+0xf0>)
 800740e:	401a      	ands	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2220      	movs	r2, #32
 800741e:	4393      	bics	r3, r2
 8007420:	001a      	movs	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2210      	movs	r2, #16
 8007430:	4393      	bics	r3, r2
 8007432:	001a      	movs	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a22      	ldr	r2, [pc, #136]	@ (80074cc <OC2Config+0xf4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <OC2Config+0x7e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a21      	ldr	r2, [pc, #132]	@ (80074d0 <OC2Config+0xf8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d003      	beq.n	8007456 <OC2Config+0x7e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a20      	ldr	r2, [pc, #128]	@ (80074d4 <OC2Config+0xfc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d121      	bne.n	800749a <OC2Config+0xc2>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2280      	movs	r2, #128	@ 0x80
 800745a:	4393      	bics	r3, r2
 800745c:	001a      	movs	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	019b      	lsls	r3, r3, #6
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	4393      	bics	r3, r2
 800746e:	001a      	movs	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	019b      	lsls	r3, r3, #6
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4a16      	ldr	r2, [pc, #88]	@ (80074d8 <OC2Config+0x100>)
 800747e:	401a      	ands	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4a13      	ldr	r2, [pc, #76]	@ (80074dc <OC2Config+0x104>)
 800748e:	401a      	ands	r2, r3
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	0011      	movs	r1, r2
 80074ae:	0018      	movs	r0, r3
 80074b0:	f7ff fd4d 	bl	8006f4e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	0018      	movs	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	b006      	add	sp, #24
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	fffffcff 	.word	0xfffffcff
 80074c8:	feff8fff 	.word	0xfeff8fff
 80074cc:	40012c00 	.word	0x40012c00
 80074d0:	40014400 	.word	0x40014400
 80074d4:	40014800 	.word	0x40014800
 80074d8:	fffffbff 	.word	0xfffffbff
 80074dc:	fffff7ff 	.word	0xfffff7ff

080074e0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	4a34      	ldr	r2, [pc, #208]	@ (80075c0 <OC3Config+0xe0>)
 80074f0:	401a      	ands	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2203      	movs	r2, #3
 800750c:	4393      	bics	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a2c      	ldr	r2, [pc, #176]	@ (80075c4 <OC3Config+0xe4>)
 8007514:	401a      	ands	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <OC3Config+0xe8>)
 8007522:	401a      	ands	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	4a23      	ldr	r2, [pc, #140]	@ (80075c0 <OC3Config+0xe0>)
 8007532:	401a      	ands	r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a22      	ldr	r2, [pc, #136]	@ (80075cc <OC3Config+0xec>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d007      	beq.n	8007556 <OC3Config+0x76>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a21      	ldr	r2, [pc, #132]	@ (80075d0 <OC3Config+0xf0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d003      	beq.n	8007556 <OC3Config+0x76>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a20      	ldr	r2, [pc, #128]	@ (80075d4 <OC3Config+0xf4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d11f      	bne.n	8007596 <OC3Config+0xb6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	4a1f      	ldr	r2, [pc, #124]	@ (80075d8 <OC3Config+0xf8>)
 800755a:	401a      	ands	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	029b      	lsls	r3, r3, #10
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4a1c      	ldr	r2, [pc, #112]	@ (80075dc <OC3Config+0xfc>)
 800756a:	401a      	ands	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <OC3Config+0x100>)
 800757a:	401a      	ands	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	4a16      	ldr	r2, [pc, #88]	@ (80075e4 <OC3Config+0x104>)
 800758a:	401a      	ands	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	015b      	lsls	r3, r3, #5
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	0011      	movs	r1, r2
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7ff fcdb 	bl	8006f66 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b006      	add	sp, #24
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	fffffeff 	.word	0xfffffeff
 80075c4:	fffeff8f 	.word	0xfffeff8f
 80075c8:	fffffdff 	.word	0xfffffdff
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40014400 	.word	0x40014400
 80075d4:	40014800 	.word	0x40014800
 80075d8:	fffff7ff 	.word	0xfffff7ff
 80075dc:	fffffbff 	.word	0xfffffbff
 80075e0:	ffffefff 	.word	0xffffefff
 80075e4:	ffffdfff 	.word	0xffffdfff

080075e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4a29      	ldr	r2, [pc, #164]	@ (800769c <OC4Config+0xb4>)
 80075f8:	401a      	ands	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a23      	ldr	r2, [pc, #140]	@ (80076a0 <OC4Config+0xb8>)
 8007614:	4013      	ands	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a22      	ldr	r2, [pc, #136]	@ (80076a4 <OC4Config+0xbc>)
 800761c:	401a      	ands	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4a1f      	ldr	r2, [pc, #124]	@ (80076a8 <OC4Config+0xc0>)
 800762c:	401a      	ands	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	031b      	lsls	r3, r3, #12
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	4a18      	ldr	r2, [pc, #96]	@ (800769c <OC4Config+0xb4>)
 800763c:	401a      	ands	r2, r3
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	031b      	lsls	r3, r3, #12
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <OC4Config+0xc4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <OC4Config+0x78>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <OC4Config+0xc8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <OC4Config+0x78>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <OC4Config+0xcc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d107      	bne.n	8007670 <OC4Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	4a15      	ldr	r2, [pc, #84]	@ (80076b8 <OC4Config+0xd0>)
 8007664:	401a      	ands	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	019b      	lsls	r3, r3, #6
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	0011      	movs	r1, r2
 8007684:	0018      	movs	r0, r3
 8007686:	f7ff fc7a 	bl	8006f7e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007690:	2300      	movs	r3, #0
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b006      	add	sp, #24
 8007698:	bd80      	pop	{r7, pc}
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	ffffefff 	.word	0xffffefff
 80076a0:	fffffcff 	.word	0xfffffcff
 80076a4:	feff8fff 	.word	0xfeff8fff
 80076a8:	ffffdfff 	.word	0xffffdfff
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800
 80076b8:	ffffbfff 	.word	0xffffbfff

080076bc <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	4a24      	ldr	r2, [pc, #144]	@ (800775c <OC5Config+0xa0>)
 80076cc:	401a      	ands	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076dc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007760 <OC5Config+0xa4>)
 80076e2:	401a      	ands	r2, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <OC5Config+0xa8>)
 80076f0:	401a      	ands	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a17      	ldr	r2, [pc, #92]	@ (800775c <OC5Config+0xa0>)
 8007700:	401a      	ands	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	041b      	lsls	r3, r3, #16
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a16      	ldr	r2, [pc, #88]	@ (8007768 <OC5Config+0xac>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d007      	beq.n	8007724 <OC5Config+0x68>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a15      	ldr	r2, [pc, #84]	@ (800776c <OC5Config+0xb0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <OC5Config+0x68>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a14      	ldr	r2, [pc, #80]	@ (8007770 <OC5Config+0xb4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d109      	bne.n	8007738 <OC5Config+0x7c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4a0c      	ldr	r2, [pc, #48]	@ (800775c <OC5Config+0xa0>)
 800772a:	401a      	ands	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	0011      	movs	r1, r2
 8007746:	0018      	movs	r0, r3
 8007748:	f7ff fc25 	bl	8006f96 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007752:	2300      	movs	r3, #0
}
 8007754:	0018      	movs	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	b004      	add	sp, #16
 800775a:	bd80      	pop	{r7, pc}
 800775c:	fffeffff 	.word	0xfffeffff
 8007760:	fffeff8f 	.word	0xfffeff8f
 8007764:	fffdffff 	.word	0xfffdffff
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800

08007774 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	4a25      	ldr	r2, [pc, #148]	@ (8007818 <OC6Config+0xa4>)
 8007784:	401a      	ands	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007794:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a20      	ldr	r2, [pc, #128]	@ (800781c <OC6Config+0xa8>)
 800779a:	401a      	ands	r2, r3
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <OC6Config+0xac>)
 80077aa:	401a      	ands	r2, r3
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	051b      	lsls	r3, r3, #20
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4a17      	ldr	r2, [pc, #92]	@ (8007818 <OC6Config+0xa4>)
 80077ba:	401a      	ands	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	051b      	lsls	r3, r3, #20
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a16      	ldr	r2, [pc, #88]	@ (8007824 <OC6Config+0xb0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d007      	beq.n	80077de <OC6Config+0x6a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a15      	ldr	r2, [pc, #84]	@ (8007828 <OC6Config+0xb4>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <OC6Config+0x6a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a14      	ldr	r2, [pc, #80]	@ (800782c <OC6Config+0xb8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d109      	bne.n	80077f2 <OC6Config+0x7e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4a13      	ldr	r2, [pc, #76]	@ (8007830 <OC6Config+0xbc>)
 80077e4:	401a      	ands	r2, r3
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	029b      	lsls	r3, r3, #10
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	0011      	movs	r1, r2
 8007800:	0018      	movs	r0, r3
 8007802:	f7ff fbd6 	bl	8006fb2 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800780c:	2300      	movs	r3, #0
}
 800780e:	0018      	movs	r0, r3
 8007810:	46bd      	mov	sp, r7
 8007812:	b004      	add	sp, #16
 8007814:	bd80      	pop	{r7, pc}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	ffefffff 	.word	0xffefffff
 800781c:	feff8fff 	.word	0xfeff8fff
 8007820:	ffdfffff 	.word	0xffdfffff
 8007824:	40012c00 	.word	0x40012c00
 8007828:	40014400 	.word	0x40014400
 800782c:	40014800 	.word	0x40014800
 8007830:	fffbffff 	.word	0xfffbffff

08007834 <memset>:
 8007834:	0003      	movs	r3, r0
 8007836:	1882      	adds	r2, r0, r2
 8007838:	4293      	cmp	r3, r2
 800783a:	d100      	bne.n	800783e <memset+0xa>
 800783c:	4770      	bx	lr
 800783e:	7019      	strb	r1, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	e7f9      	b.n	8007838 <memset+0x4>

08007844 <__libc_init_array>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	2600      	movs	r6, #0
 8007848:	4c0c      	ldr	r4, [pc, #48]	@ (800787c <__libc_init_array+0x38>)
 800784a:	4d0d      	ldr	r5, [pc, #52]	@ (8007880 <__libc_init_array+0x3c>)
 800784c:	1b64      	subs	r4, r4, r5
 800784e:	10a4      	asrs	r4, r4, #2
 8007850:	42a6      	cmp	r6, r4
 8007852:	d109      	bne.n	8007868 <__libc_init_array+0x24>
 8007854:	2600      	movs	r6, #0
 8007856:	f000 f823 	bl	80078a0 <_init>
 800785a:	4c0a      	ldr	r4, [pc, #40]	@ (8007884 <__libc_init_array+0x40>)
 800785c:	4d0a      	ldr	r5, [pc, #40]	@ (8007888 <__libc_init_array+0x44>)
 800785e:	1b64      	subs	r4, r4, r5
 8007860:	10a4      	asrs	r4, r4, #2
 8007862:	42a6      	cmp	r6, r4
 8007864:	d105      	bne.n	8007872 <__libc_init_array+0x2e>
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	00b3      	lsls	r3, r6, #2
 800786a:	58eb      	ldr	r3, [r5, r3]
 800786c:	4798      	blx	r3
 800786e:	3601      	adds	r6, #1
 8007870:	e7ee      	b.n	8007850 <__libc_init_array+0xc>
 8007872:	00b3      	lsls	r3, r6, #2
 8007874:	58eb      	ldr	r3, [r5, r3]
 8007876:	4798      	blx	r3
 8007878:	3601      	adds	r6, #1
 800787a:	e7f2      	b.n	8007862 <__libc_init_array+0x1e>
 800787c:	08007aa0 	.word	0x08007aa0
 8007880:	08007aa0 	.word	0x08007aa0
 8007884:	08007aa4 	.word	0x08007aa4
 8007888:	08007aa0 	.word	0x08007aa0

0800788c <memcpy>:
 800788c:	2300      	movs	r3, #0
 800788e:	b510      	push	{r4, lr}
 8007890:	429a      	cmp	r2, r3
 8007892:	d100      	bne.n	8007896 <memcpy+0xa>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	5ccc      	ldrb	r4, [r1, r3]
 8007898:	54c4      	strb	r4, [r0, r3]
 800789a:	3301      	adds	r3, #1
 800789c:	e7f8      	b.n	8007890 <memcpy+0x4>
	...

080078a0 <_init>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr

080078ac <_fini>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	46c0      	nop			@ (mov r8, r8)
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr

080078b8 <__FLASH_Program_Fast_veneer>:
 80078b8:	b401      	push	{r0}
 80078ba:	4802      	ldr	r0, [pc, #8]	@ (80078c4 <__FLASH_Program_Fast_veneer+0xc>)
 80078bc:	4684      	mov	ip, r0
 80078be:	bc01      	pop	{r0}
 80078c0:	4760      	bx	ip
 80078c2:	bf00      	nop
 80078c4:	200000cd 	.word	0x200000cd

Disassembly of section .data:

200000c0 <SystemCoreClock>:
200000c0:	00f42400                                .$..

200000c4 <uwTickPrio>:
200000c4:	00000004                                ....

200000c8 <uwTickFreq>:
200000c8:	00000001                                ....

200000cc <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000cc:	b580      	push	{r7, lr}
200000ce:	b088      	sub	sp, #32
200000d0:	af00      	add	r7, sp, #0
200000d2:	6078      	str	r0, [r7, #4]
200000d4:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000d6:	231f      	movs	r3, #31
200000d8:	18fb      	adds	r3, r7, r3
200000da:	2200      	movs	r2, #0
200000dc:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000e2:	683b      	ldr	r3, [r7, #0]
200000e4:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000e6:	4b1a      	ldr	r3, [pc, #104]	@ (20000150 <FLASH_Program_Fast+0x84>)
200000e8:	695a      	ldr	r2, [r3, #20]
200000ea:	4b19      	ldr	r3, [pc, #100]	@ (20000150 <FLASH_Program_Fast+0x84>)
200000ec:	2180      	movs	r1, #128	@ 0x80
200000ee:	02c9      	lsls	r1, r1, #11
200000f0:	430a      	orrs	r2, r1
200000f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000f4:	f3ef 8310 	mrs	r3, PRIMASK
200000f8:	60fb      	str	r3, [r7, #12]
  return(result);
200000fa:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000fe:	b672      	cpsid	i
}
20000100:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000102:	e00f      	b.n	20000124 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000104:	697a      	ldr	r2, [r7, #20]
20000106:	69bb      	ldr	r3, [r7, #24]
20000108:	6812      	ldr	r2, [r2, #0]
2000010a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000010c:	697b      	ldr	r3, [r7, #20]
2000010e:	3304      	adds	r3, #4
20000110:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000112:	69bb      	ldr	r3, [r7, #24]
20000114:	3304      	adds	r3, #4
20000116:	61bb      	str	r3, [r7, #24]
    index++;
20000118:	211f      	movs	r1, #31
2000011a:	187b      	adds	r3, r7, r1
2000011c:	781a      	ldrb	r2, [r3, #0]
2000011e:	187b      	adds	r3, r7, r1
20000120:	3201      	adds	r2, #1
20000122:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000124:	231f      	movs	r3, #31
20000126:	18fb      	adds	r3, r7, r3
20000128:	781b      	ldrb	r3, [r3, #0]
2000012a:	2b3f      	cmp	r3, #63	@ 0x3f
2000012c:	d9ea      	bls.n	20000104 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000012e:	46c0      	nop			@ (mov r8, r8)
20000130:	4b07      	ldr	r3, [pc, #28]	@ (20000150 <FLASH_Program_Fast+0x84>)
20000132:	691a      	ldr	r2, [r3, #16]
20000134:	2380      	movs	r3, #128	@ 0x80
20000136:	025b      	lsls	r3, r3, #9
20000138:	4013      	ands	r3, r2
2000013a:	d1f9      	bne.n	20000130 <FLASH_Program_Fast+0x64>
2000013c:	693b      	ldr	r3, [r7, #16]
2000013e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000140:	68bb      	ldr	r3, [r7, #8]
20000142:	f383 8810 	msr	PRIMASK, r3
}
20000146:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000148:	46c0      	nop			@ (mov r8, r8)
2000014a:	46bd      	mov	sp, r7
2000014c:	b008      	add	sp, #32
2000014e:	bd80      	pop	{r7, pc}
20000150:	40022000 	.word	0x40022000
